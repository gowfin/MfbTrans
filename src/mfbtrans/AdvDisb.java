/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package mfbtrans;

import java.awt.HeadlessException;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.MessageFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.DayOfWeek;
import java.time.temporal.ChronoField;
import java.util.Calendar;
import java.util.Date;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author LAPO MFB
 */
public class AdvDisb extends javax.swing.JFrame {

    /**
     * Creates new form Schedule
     */
    public AdvDisb() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonGet = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jTextFieldname = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldfamount = new javax.swing.JTextField();
        jTextFieldamount = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldRepay = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableAnalysis = new javax.swing.JTable();
        jComboBoxterm = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Advance Disbursement");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jButtonGet.setText("GET");
        jButtonGet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGetActionPerformed(evt);
            }
        });

        jButton2.setText("Print");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Client Detail"));

        jTextFieldname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldnameActionPerformed(evt);
            }
        });

        jLabel1.setText("Client's Name");

        jTextFieldfamount.setText("12500");
        jTextFieldfamount.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldfamountFocusLost(evt);
            }
        });

        jLabel2.setText("Total Amount (P+I)");

        jLabel3.setText("First Repaid Date");

        jLabel5.setText("First Amount");

        jTextFieldRepay.setText("12500");

        jLabel6.setText("Regular AMount");

        jDateChooser1.setDateFormatString("yyyy-MM-dd");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(32, 32, 32)
                        .addComponent(jTextFieldname, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldRepay, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldamount, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldfamount, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldamount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextFieldfamount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)
                        .addComponent(jLabel5))
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldRepay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        jTableAnalysis.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Count", "Date", "Weekly Payment", "Outstanding Balance", "Customer's Sign", "Comment", "Officer's Sign"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableAnalysis.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTableAnalysis.setAutoscrolls(false);
        jTableAnalysis.setColumnSelectionAllowed(true);
        jTableAnalysis.setGridColor(new java.awt.Color(255, 51, 51));
        jTableAnalysis.setShowHorizontalLines(isEnabled());
        jTableAnalysis.setShowVerticalLines(isEnabled());
        jScrollPane1.setViewportView(jTableAnalysis);

        jComboBoxterm.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Monthly", "Weekly", "Daily" }));
        jComboBoxterm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxtermActionPerformed(evt);
            }
        });

        jButton1.setText("Save to DB");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 615, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(271, 271, 271)
                        .addComponent(jButton2)
                        .addGap(91, 91, 91)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addComponent(jButtonGet, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(jComboBoxterm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonGet)
                    .addComponent(jComboBoxterm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addContainerGap(103, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonGetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGetActionPerformed
String dd=jDateChooser1.getDate().toString();
      String m="";
        if(dd.contains("Jan")){m="01";}
        else if(dd.contains("Feb")){m="02";}
         else if(dd.contains("Mar")){m="03";}
         else if(dd.contains("Apr")){m="04";}
         else if(dd.contains("May")){m="05";}
         else if(dd.contains("Jun")){m="06";}
        else if(dd.contains("Jul")){m="07";}
        else if(dd.contains("Aug")){m="08";}
        else if(dd.contains("Sep")){m="09";}
        else if(dd.contains("Oct")){m="10";}
        else if(dd.contains("Nov")){m="11";}
        else if(dd.contains("Dec")){m="12";}
String SelectedDate= dd.substring(dd.length()-4)+"-"+m+"-"+dd.substring(8,10);


Calendar now=Calendar.getInstance();
String dt=SelectedDate;
int repayment=Integer.parseInt(jTextFieldRepay.getText());
            SimpleDateFormat sdf= new SimpleDateFormat("yyyy-MM-dd");
        try {
            now.setTime(sdf.parse(dt));
        } catch (ParseException ex) {
            Logger.getLogger(AdvDisb.class.getName()).log(Level.SEVERE, null, ex);
        }
       
         
        try{
  




            //to eliminate empty rows
       
            DefaultTableModel tmp =new DefaultTableModel();
           
            jTableAnalysis.setModel(tmp);
            //adding columns
         jTableAnalysis.setAutoResizeMode(jTableAnalysis.AUTO_RESIZE_OFF);
             tmp.addColumn("Count");
             
             tmp.addColumn("Date");
             if(jComboBoxterm.getSelectedItem().toString().equalsIgnoreCase("Monthly")){tmp.addColumn("Monthly Payment");   }
             else if(jComboBoxterm.getSelectedItem().toString().equalsIgnoreCase("Weekly")){tmp.addColumn("Weekly Payment");   }
             else {tmp.addColumn("Daily Payment");}
             tmp.addColumn("<HTML>Outstanding<BR> Balance</HTML>");
             tmp.addColumn("<HTML>Customer's<BR> Sign</HTML>");
             tmp.addColumn("Comment");
             tmp.addColumn("Officer's Sign");
          
          
             //setting column size
             jTableAnalysis.getColumnModel().getColumn(0).setPreferredWidth(50);
             jTableAnalysis.getColumnModel().getColumn(1).setPreferredWidth(100);
             jTableAnalysis.getColumnModel().getColumn(2).setPreferredWidth(100);
             jTableAnalysis.getColumnModel().getColumn(3).setPreferredWidth(100);
             jTableAnalysis.getColumnModel().getColumn(4).setPreferredWidth(100);
             jTableAnalysis.getColumnModel().getColumn(5).setPreferredWidth(100);
             jTableAnalysis.getColumnModel().getColumn(6).setPreferredWidth(140);
             int paid =Integer.parseInt(jTextFieldfamount.getText());
             //initialisaction
            int Totalbal=Integer.parseInt(jTextFieldamount.getText());
            int Actualbal=Totalbal-paid;
            int CurrentBal=0;
            int i=0;
          int interval=7;
          
          tmp.addRow(new String[i]);
          jTableAnalysis.getModel().setValueAt("",i,0);
               jTableAnalysis.getModel().setValueAt("",i,1);
               jTableAnalysis.getModel().setValueAt("",i,2);
               jTableAnalysis.getModel().setValueAt(Totalbal,i,3);
               jTableAnalysis.getModel().setValueAt("",i,4);
               jTableAnalysis.getModel().setValueAt("Disbursed",i,5);
              
               jTableAnalysis.getModel().setValueAt("",i,6);
            
          i=i+1;
          //set first instalment
          tmp.addRow(new String[i]);
          jTableAnalysis.getModel().setValueAt(i,i,0);
               jTableAnalysis.getModel().setValueAt(sdf.format(now.getTime()),i,1);
               jTableAnalysis.getModel().setValueAt(paid,i,2);
               jTableAnalysis.getModel().setValueAt(Actualbal,i,3);
               jTableAnalysis.getModel().setValueAt("",i,4);
               jTableAnalysis.getModel().setValueAt("First Repayment",i,5);
              
               jTableAnalysis.getModel().setValueAt("",i,6);
               i=i+1;
                Actualbal=Actualbal-repayment;//to get correct balance for next instalment
            while(CurrentBal<=Actualbal){
       
        tmp.addRow(new String[i+1]);
        if(jComboBoxterm.getSelectedItem().toString().equalsIgnoreCase("Monthly")){
            now.add(Calendar.MONTH,1);//to increase date
        }else if(jComboBoxterm.getSelectedItem().toString().equalsIgnoreCase("Weekly")){
        now.add(Calendar.DATE,7);//to increase date by one week
        }
        else if (jComboBoxterm.getSelectedItem().toString().equalsIgnoreCase("Daily")){
             now.add(Calendar.DATE,1);//to increase date by one day
            //function to skip Weekends for all Daily Loans
        int day=now.get(Calendar.DAY_OF_WEEK);
      switch(day)
      {
          case Calendar.SATURDAY:
               now.add(Calendar.DATE,1);//to increase date by two days to Monday
          case  Calendar.SUNDAY:
               now.add(Calendar.DATE,1);//to increase date by one day to Monday
         default:
            
      }
        
        }
         
               jTableAnalysis.getModel().setValueAt(i,i,0);//here i is 2
               jTableAnalysis.getModel().setValueAt(sdf.format(now.getTime()),i,1);
               jTableAnalysis.getModel().setValueAt(repayment,i,2);
               jTableAnalysis.getModel().setValueAt(Actualbal,i,3);
               jTableAnalysis.getModel().setValueAt("",i,4);
               jTableAnalysis.getModel().setValueAt("Repayment",i,5);
              
               jTableAnalysis.getModel().setValueAt("",i,6);
            
               
              paid=paid+repayment;
              i=i+1;//increase i
             
        Actualbal=Actualbal-repayment;
             
            }
            instalcount=i-1;
            jTableAnalysis.getModel().setValueAt("Last Repayment",i-1,5);//indicate last repayment   
            totalAmount=Double.parseDouble(jTextFieldamount.getText());
}
catch(Exception e){JOptionPane.showMessageDialog(this, e.getMessage());
}        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonGetActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
String printData="Repayment Schedule for "+ClientID+"-"+jTextFieldname.getText();
       
MessageFormat header = new MessageFormat(printData) ;
MessageFormat footer =new MessageFormat(printData);



 try
 {
   
 //job.print();
jTableAnalysis.print(JTable.PrintMode.FIT_WIDTH,header,footer,true,null,false);
 }
 catch(HeadlessException | PrinterException e){JOptionPane.showMessageDialog(this, e.getMessage());
    
 }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextFieldnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldnameActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
Calendar now=Calendar.getInstance();
        now.getTime();
        int year=now.get(Calendar.YEAR);
       
        String Smonth,Sday;
        int Omonth=now.get(Calendar.MONTH);//opening as january=0 not 1
        int day=now.get(Calendar.DAY_OF_MONTH);
         int month=Omonth+1;//note month start with january=0 in java
        Smonth=month+"";
        Sday=day+"";
       if(month<10){Smonth="0"+month;}// let it appear as two digit e.g 02
        if(day<10){Sday="0"+day;}
       
        Smonth=month+"";
        Sday=day+"";
       if(month<10){Smonth="0"+month;}// let it appear as two digit e.g 02
        if(day<10){Sday="0"+day;} 
   
        
jDateChooser1.getDate();
   
    }//GEN-LAST:event_formComponentShown

    private void jComboBoxtermActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxtermActionPerformed
if(jComboBoxterm.getSelectedItem().toString().equalsIgnoreCase("Monthly"))
{
    jButtonGet.setText("Get Monthly");
   
}
else if(jComboBoxterm.getSelectedItem().toString().equalsIgnoreCase("Weekly"))
{
    jButtonGet.setText("Get Weekly");
    
}
else if(jComboBoxterm.getSelectedItem().toString().equalsIgnoreCase("Daily"))
{
    jButtonGet.setText("Get Daily");
     
}
    }//GEN-LAST:event_jComboBoxtermActionPerformed

    private void jTextFieldfamountFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldfamountFocusLost
jTextFieldRepay.setText(jTextFieldfamount.getText());        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldfamountFocusLost

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
double totalInterest=Double.parseDouble(JOptionPane.showInputDialog("Enter the Total interest on the loan"));
double totalPrinAmount=totalAmount-totalInterest;
        //JOptionPane.showMessageDialog(rootPane, instalcount); 
        double intAmoun=totalInterest/instalcount,prinAmoun=totalPrinAmount/instalcount;
        BigDecimal  IntRate=BigDecimal.valueOf(totalAmount/totalPrinAmount);
         BigDecimal  Instalment=BigDecimal.valueOf(totalAmount/instalcount);
        BigDecimal intAmount=BigDecimal.valueOf(intAmoun);
         BigDecimal prinAmount=BigDecimal.valueOf(prinAmoun);
        Global glob = new Global();
        String query2,query3;
  
query3=("insert into Loans(Custno,AccountName,LoanID,LoanProduct,DisbursedDate,OutstandingBal,"+
        " Status,GroupID,interestPercent,BVN,instalment) VALUES (?,?,?,?,?,?,?,?,?,?,?)");

String query6="Select max(count) as count from loans";
    
     
Connection conn=glob.getConnect();//from global setting
           
try
{
   Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
           
         ResultSet  current = stmt.executeQuery(query6);
            current.next();
         int    LastLoanNum=current.getInt("count");
            
           current.close();
           String Loancode="300";
        
           
           String LoanNum=Loancode+glob.getIDFormat(LastLoanNum+1);
      conn.setAutoCommit(false);//for transaction posting
      //////////////////
      PreparedStatement pstmt;

    pstmt=conn.prepareStatement(query3);
  
    pstmt.setString(1,ClientID);
    pstmt.setString(2,jTextFieldname.getText());
    pstmt.setString(3,LoanNum);
    pstmt.setString(4,"SPELN");
    pstmt.setString(5,ses_date+" 00:00:00.000");
    pstmt.setString(6,"-"+totalPrinAmount);
    pstmt.setString(7,"Active");
    pstmt.setString(8,GroupID);
    pstmt.setString(9,IntRate.setScale(3, RoundingMode.HALF_UP).toString());
    pstmt.setString(10,"none");
    pstmt.setString(11, Instalment.setScale(3, RoundingMode.HALF_UP).toString());
    pstmt.executeUpdate();
  
    String queryq=("insert into loanschedule VALUES (?,?,?,?,?,?,?,?,?,?,?,?)");
    String queryq4=("insert into transactn (AccountID,tranid,Amount,CreditGL,DebitGL,Runningbal,ValueDate,DateEffective,CustNo,StmtRef,BranchID,ChequeNbr,transactionNbr)"
        + " values(?,?,?,?,?,?,?,?,?,?,?,?,?)");
    String query11="update glbal set GlbCredit=GlbCredit+"+totalPrinAmount+" where CoaNbr='1102-"+Brancode+"' and GlbFinyear='C'"
        + " and glbPeriod='"+ses_date.substring(5, 7)+"'";

query2="update glbal set Glbdebit=Glbdebit+"+totalPrinAmount+" where CoaNbr='13102-"+Brancode+"' and GlbFinyear='C'"
  + " and glbPeriod='"+ses_date.substring(5, 7)+"'";
Timestamp timestamp = new Timestamp(System.currentTimeMillis());    
        Random rand = new Random(timestamp.getTime());
        int Rnum=rand.nextInt(9999999);
String tranctno=ses_date.substring(2, 4)+ses_date.substring(5, 7)+ses_date.substring(8,10)+Rnum+"LD";



  
        pstmt=conn.prepareStatement(queryq4);
pstmt.setString(1,LoanNum);
pstmt.setString(2,"010");
pstmt.setDouble(3,totalPrinAmount);
pstmt.setString(4,"11102-"+Brancode);
pstmt.setString(5,"13102-"+Brancode);
pstmt.setString(6,totalPrinAmount+"");
pstmt.setString(7,ses_date);
pstmt.setString(8,ses_date);
pstmt.setString(9,ClientID);
pstmt.setString(10,"Disbursement");
pstmt.setString(11,jTextFieldname.getText());
pstmt.setString(12,"");
pstmt.setString(13,tranctno);
pstmt.executeUpdate();

//updating gl for trial balance
pstmt=conn.prepareStatement(query11);
pstmt.executeUpdate();

pstmt=conn.prepareStatement(query2);
pstmt.executeUpdate();
  



  for(int o=1;o<=instalcount;o++){
          pstmt=conn.prepareStatement(queryq); 
          pstmt.setString(1,LoanNum);
          pstmt.setString(2,jTableAnalysis.getModel().getValueAt(o, 1).toString()+" 00:00:00.000");
        pstmt.setString(3,Double.parseDouble(jTableAnalysis.getModel().getValueAt(o, 3).toString())+Double.parseDouble(jTextFieldfamount.getText())+"");
        pstmt.setString(4,Double.parseDouble(jTableAnalysis.getModel().getValueAt(o, 2).toString())+"");
        pstmt.setString(5,prinAmount.setScale(2,RoundingMode.HALF_UP).toString());
        pstmt.setString(6,intAmount.setScale(2,RoundingMode.HALF_UP).toString());
        pstmt.setString(7,"Not Serviced");
        pstmt.setString(8,ClientID);
         pstmt.setInt(9,o);
         pstmt.setInt(10,0);
          pstmt.setInt(11,0);
          if(o==1){
          pstmt.setString(12,"P");
          }else{
            pstmt.setString(12,"U");   
          }
        pstmt.executeUpdate();

        }    
         String onedaybefore=ses_date;// just inialising    
      try
        {
       Date prevdate=new SimpleDateFormat("yyyy-MM-dd").parse(ses_date);
       prevdate = new Date(prevdate.getTime() - 2);
       DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
       onedaybefore = dateFormat.format( prevdate);
      
        }
        catch(Exception e){JOptionPane.showMessageDialog(this, e.getMessage());}
        //updating loanschedule to display loan balance in field print
        String strSQl="insert into Loanschedule values('"+LoanNum+"','"+onedaybefore+" 00:00:00.000"+"','"+jTextFieldamount.getText()+"','','0.00','0.00','Not Serviced','"+ClientID+"','0','0.00','0.00','D')";
        pstmt=conn.prepareStatement(strSQl);
        pstmt.executeUpdate();
       

 conn.commit();//transaction saved
 //JOptionPane.showMessageDialog(this,"Please, write down customer no "+ClientID);
 JOptionPane.showMessageDialog(this,"Disbursement Successful,Boss");

}

catch(   Exception e){
try{JOptionPane.showMessageDialog(this, e.getMessage());
conn.rollback();

}catch(SQLException sqx){//throw new Exception.("Roll back failed: "+sqx.getMessage();)
JOptionPane.showMessageDialog(this, e.getMessage());
}
}
  
 
  
 
       
                                         

                     
            
           

           
            
        
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdvDisb.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdvDisb.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdvDisb.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdvDisb.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdvDisb().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButtonGet;
    private javax.swing.JComboBox jComboBoxterm;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableAnalysis;
    public javax.swing.JTextField jTextFieldRepay;
    public javax.swing.JTextField jTextFieldamount;
    public javax.swing.JTextField jTextFieldfamount;
    public javax.swing.JTextField jTextFieldname;
    // End of variables declaration//GEN-END:variables
int instalcount;
double totalAmount;
String Brancode="002";
String ClientID;
String GroupID;
String tellerControlGl;
String ses_date,compshortname,companyname;
}
