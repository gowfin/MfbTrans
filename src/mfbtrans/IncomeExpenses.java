/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package mfbtrans;

import java.awt.print.PrinterJob;
import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.MessageFormat;
import java.util.Calendar;
import javax.swing.JOptionPane;
import javax.swing.JTable;

/**
 *
 * @author Emmanuel
 */
public class IncomeExpenses extends javax.swing.JFrame {

    /**
     * Creates new form TrialBalance
     */
    public IncomeExpenses() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabeltitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableTrialbalance = new javax.swing.JTable();
        jButtonPrint = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Income And Expenses Report");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabeltitle.setBackground(new java.awt.Color(0, 51, 255));
        jLabeltitle.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabeltitle.setForeground(new java.awt.Color(102, 0, 255));
        jLabeltitle.setText("Bridge To Wealth Income And Expenditure Statement");

        jTableTrialbalance.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "GLCode", "Description", "Monthly Balance", "YTDBalance"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableTrialbalance.setAutoscrolls(false);
        jTableTrialbalance.setColumnSelectionAllowed(true);
        jTableTrialbalance.setGridColor(new java.awt.Color(255, 51, 51));
        jTableTrialbalance.setShowHorizontalLines(isEnabled());
        jScrollPane1.setViewportView(jTableTrialbalance);

        jButtonPrint.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButtonPrint.setForeground(new java.awt.Color(0, 0, 255));
        jButtonPrint.setText("Print");
        jButtonPrint.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPrintActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jLabeltitle, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(72, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabeltitle, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

Calendar now=Calendar.getInstance();
        now.getTime();
        //int year=now.get(Calendar.YEAR);
       
        int Omonth=now.get(Calendar.MONTH);//opening as january=0 not 1
         int month=Omonth+1;//note month start with january=0 in java
         //month=4;//testing purpose only
Global glob=new Global();
 
String query1="select B.CoaNbr Code,CoaType,CoaName Descriptn,Sum(GlbDebit)-Sum(GlbCredit) as ytdbal from Glbal B  inner join GlCoa C" + 
       " on B.CoaNbr=C.CoaNbr where (CoaType='I')and  GlbFinYear='C' and GlbPeriod<='"+month+"' Group by B.CoaNbr,CoaName,CoaType";
String query2="select B.CoaNbr Code,CoaType,CoaName Descriptn,GlbDebit-GlbCredit month from Glbal B  inner join GlCoa C " +
"  on B.CoaNbr=C.CoaNbr where (CoaType='I') and GlbFinYear='C' and GlbPeriod='"+month+"'" +
"order by B.Coanbr,CoaName,CoaType";
String query3="select B.CoaNbr Code,CoaType,CoaName Descriptn,Sum(GlbDebit)-Sum(GlbCredit) as Ytdbal from Glbal B  inner join GlCoa C" + 
       " on B.CoaNbr=C.CoaNbr where (CoaType='E')and  GlbFinYear='C' and GlbPeriod<='"+month+"' Group by B.CoaNbr,CoaName,CoaType";
String query4="select B.CoaNbr Code,CoaType,CoaName Descriptn,GlbDebit-GlbCredit month from Glbal B  inner join GlCoa C " +
"  on B.CoaNbr=C.CoaNbr where (CoaType='E') and GlbFinYear='C' and GlbPeriod='"+month+"'" +
"order by B.Coanbr,CoaName,CoaType";

     
  Connection    conn = glob.getConnect();     

        
        
        try{
   

 Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
            ResultSet current = stmt.executeQuery(query1);
            
            int i=0;
            BigDecimal Ytdincome=BigDecimal.ZERO;//for opening total
           while( current.next()){
               
               jTableTrialbalance.getModel().setValueAt(current.getString("Code"),i,0);
               jTableTrialbalance.getModel().setValueAt(current.getString("Descriptn"),i,1);
               jTableTrialbalance.getModel().setValueAt(current.getBigDecimal("ytdbal").setScale(2, RoundingMode.UP),i,3);
              
             
               i=i+1;
               Ytdincome=(current.getBigDecimal("ytdbal")).add(Ytdincome); 
          
           }//get the total
           jTableTrialbalance.getModel().setValueAt("____________________________",i,1);//to underline
             jTableTrialbalance.getModel().setValueAt("__________________________",i,3);//to underline
             
              i=i+1;//next row below
           jTableTrialbalance.getModel().setValueAt("TOTAL INCOME",i,1);
           jTableTrialbalance.getModel().setValueAt(Ytdincome.setScale(2, RoundingMode.UP),i,3);
           
           ResultSet current2 = stmt.executeQuery(query2);
            i=0;//go up to the begining of row i.e row zero
            BigDecimal MonthIncom=BigDecimal.ZERO;
           
          
         
           while( current2.next()){
           
             
              jTableTrialbalance.getModel().setValueAt(current2.getBigDecimal("month").setScale(2, RoundingMode.UP),i,2);
              
             
               i=i+1;
               MonthIncom=(current2.getBigDecimal("month")).add(MonthIncom); 
         
               
           }//get debit and credit total
           jTableTrialbalance.getModel().setValueAt("__________________________",i,2);//to underline
               i=i+1;//go next row below
         jTableTrialbalance.getModel().setValueAt(MonthIncom.setScale(2, RoundingMode.UP),i,2);
     //Generating for Expenses
         ResultSet current3 = stmt.executeQuery(query3);
          
           i=i+2;//Move two rows below
            int BeginExp=i; 
            BigDecimal YtdExp=BigDecimal.ZERO;//for opening total
           while( current3.next()){
               
               jTableTrialbalance.getModel().setValueAt(current3.getString("Code"),i,0);
               jTableTrialbalance.getModel().setValueAt(current3.getString("Descriptn"),i,1);
               jTableTrialbalance.getModel().setValueAt(current3.getBigDecimal("Ytdbal").setScale(2, RoundingMode.UP),i,3);
              
             
               i=i+1;
               YtdExp=(current3.getBigDecimal("Ytdbal")).add(YtdExp); 
          
           }//get the total
           jTableTrialbalance.getModel().setValueAt("____________________________",i,1);//to underline
             jTableTrialbalance.getModel().setValueAt("__________________________",i,3);//to underline
             
              i=i+1;//next row below
           jTableTrialbalance.getModel().setValueAt("TOTAL EXPENSE",i,1);
           jTableTrialbalance.getModel().setValueAt(YtdExp.setScale(2, RoundingMode.UP),i,3);
           //generating monthly Expenditure
           ResultSet current4 = stmt.executeQuery(query4);
            i=BeginExp;//go up to the begining of Expense note not the row zero but where expeses started
            BigDecimal MonthExp=BigDecimal.ZERO;
           
          
         
           while( current4.next()){
           
             
              jTableTrialbalance.getModel().setValueAt(current4.getBigDecimal("month").setScale(2, RoundingMode.UP),i,2);
              
             
               i=i+1;
              MonthExp=(current4.getBigDecimal("month")).add(MonthExp); 
         
               
           }
           jTableTrialbalance.getModel().setValueAt("__________________________",i,2);//to underline
               i=i+1;//go next row below
         jTableTrialbalance.getModel().setValueAt(MonthExp.setScale(2, RoundingMode.UP),i,2);
              i=i+2;//go two rows below i.e use one row as space
               jTableTrialbalance.getModel().setValueAt("EXCESS OF INCOME OVER EXPENSES",i,1);
               MonthIncom=MonthIncom.negate().subtract(MonthExp);
               Ytdincome=Ytdincome.negate().subtract(YtdExp);
            jTableTrialbalance.getModel().setValueAt(MonthIncom.setScale(2, RoundingMode.UP),i,2);
           jTableTrialbalance.getModel().setValueAt(Ytdincome.setScale(2, RoundingMode.UP),i,3);
          
            current.close();
            current2.close();
            current3.close();
            current4.close();
}
catch(Exception e){JOptionPane.showMessageDialog(this, e.getMessage());}        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void jButtonPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPrintActionPerformed
String printData=jLabeltitle.getText();
       
MessageFormat header = new MessageFormat("MFB Trial Balance") ;
MessageFormat footer =new MessageFormat(printData);
//Graphics2D g=image.createGraphics();
PrinterJob job =PrinterJob.getPrinterJob();
job.setPrintable(new OutputPrinter(""));
job.setPrintable(new OutputPrinter(""));
boolean doPrint=job.printDialog();
if (doPrint)
{
 try
 {
   
 //job.print();
 jTableTrialbalance.print(JTable.PrintMode.FIT_WIDTH,header,footer,true,null,false);
 }
 catch(Exception e){JOptionPane.showMessageDialog(this, e.getMessage());
     //print job did not complete
 }
}// TODO add your handling code here:
    }//GEN-LAST:event_jButtonPrintActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IncomeExpenses.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IncomeExpenses.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IncomeExpenses.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IncomeExpenses.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IncomeExpenses().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonPrint;
    private javax.swing.JLabel jLabeltitle;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableTrialbalance;
    // End of variables declaration//GEN-END:variables
String ses_date,companyname,compshortname;
}
