/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mfbtrans;

import java.awt.Cursor;
import java.awt.Graphics;
import java.awt.Image;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Emmanuel Ikpe
 */
public class Onlineupload extends javax.swing.JFrame {

    /**
     * Creates new form Onlineupload
     */
    public Onlineupload() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelcloud = new javax.swing.JPanel();
        jButtonupload = new javax.swing.JButton();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        ImageIcon icon= new ImageIcon(this.getClass().getResource("/img/CloudUpload.png"));
        final Image img=icon.getImage();
        this.setIconImage(img);
        jPanelcloud =new JPanel(){

            public void paintComponent(Graphics g){
                g.drawImage( img,0,0,getWidth(),getHeight(),this);
            }
        };
        jPanelcloud.setBackground(new java.awt.Color(255, 255, 255));

        jPanelcloud.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jPanelcloud.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jButtonupload.setBackground(new java.awt.Color(51, 153, 0));
        jButtonupload.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButtonupload.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mfbtrans/UploadButton.png"))); // NOI18N
        jButtonupload.setText("Upload");
        jButtonupload.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonupload.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonupload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonuploadActionPerformed(evt);
            }
        });

        jDateChooser1.setDateFormatString("yyyy-MM-dd");
        jDateChooser1.setOpaque(false);

        javax.swing.GroupLayout jPanelcloudLayout = new javax.swing.GroupLayout(jPanelcloud);
        jPanelcloud.setLayout(jPanelcloudLayout);
        jPanelcloudLayout.setHorizontalGroup(
            jPanelcloudLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelcloudLayout.createSequentialGroup()
                .addGap(119, 119, 119)
                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addComponent(jButtonupload, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(243, 243, 243))
        );
        jPanelcloudLayout.setVerticalGroup(
            jPanelcloudLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelcloudLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonupload, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(225, Short.MAX_VALUE))
            .addGroup(jPanelcloudLayout.createSequentialGroup()
                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelcloud, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelcloud, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonuploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonuploadActionPerformed
Global glob= new Global();
   Connection conn=glob.getConnect();
      this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
      String dd=jDateChooser1.getDate().toString();
        String m="";
        if(dd.contains("Jan")){m="01";}
        else if(dd.contains("Feb")){m="02";}
         else if(dd.contains("Mar")){m="03";}
         else if(dd.contains("Apr")){m="04";}
         else if(dd.contains("May")){m="05";}
         else if(dd.contains("Jun")){m="06";}
        else if(dd.contains("Jul")){m="07";}
        else if(dd.contains("Aug")){m="08";}
        else if(dd.contains("Sep")){m="09";}
        else if(dd.contains("Oct")){m="10";}
        else if(dd.contains("Nov")){m="11";}
        else if(dd.contains("Dec")){m="12";}
String SelectedDate= dd.substring(dd.length()-4)+"-"+m+"-"+dd.substring(8,10);
SelectedDate=SelectedDate+" 00:00:00.000";
      //loan bal
      String sql="select Sum(abs(OutstandingBal)) as PrinBal,sum(abs(OutstandingBal*interestPercent)) PrinPlusIntBal, loanproduct from Loans  " +
"where Status='Active' " +
"group by loanproduct " +
"having Sum(abs(OutstandingBal))>0 ";
      BigDecimal loanbal=BigDecimal.ZERO,loanbalInt=BigDecimal.ZERO;
       
      
      //Savings Bal
       String sql2=" select sum(RunningBal) SavBal from deposit  " +
" where Status='Active' " ;

       BigDecimal SavBal=BigDecimal.ZERO;
       //Members 
        String sql3a= " select count(distinct Custno) Mem " +
" from Deposit  "+
" where status='Active' ";
        BigDecimal Mem=BigDecimal.ZERO;
 //Borrowers
        String sql3b= " select count(distinct Custno) borro " +
" from Loans   " +
" where status='Active'";
        BigDecimal borro=BigDecimal.ZERO;
 
        //Disbursement
        
         String sql4a=   "SELECT Isnull(sum(Amount),0) Amount FROM     transactn  " +
"  WHERE  valuedate BETWEEN '"+SelectedDate+"' and '"+SelectedDate+"' and TranID in ('010','R010')";
         BigDecimal disb=BigDecimal.ZERO;
           //Repayment 
           String sql4b=   "SELECT Isnull(sum(Amount),0) Amount FROM     transactn  " +
"  WHERE  valuedate BETWEEN '"+SelectedDate+"' and '"+SelectedDate+"' and TranID in ('001','R001')";
         BigDecimal Repay=BigDecimal.ZERO;
           // Deposit 
           String sql4c=   "SELECT Isnull(sum(Amount),0) Amount FROM     transactn  " +
"  WHERE  valuedate BETWEEN '"+SelectedDate+"' and '"+SelectedDate+"' and TranID in ('002','R002')";
           BigDecimal Deposit=BigDecimal.ZERO;
           // Withdrawal
           String sql4d=   "SELECT Isnull(sum(Amount),0) Amount FROM     transactn  " +
"  WHERE  valuedate BETWEEN '"+SelectedDate+"' and '"+SelectedDate+"' and TranID in ('005','R005')";
           BigDecimal Withdr=BigDecimal.ZERO;
           
          
         //Overdue 
         String sql5a="select sum(RepayWithInt)-SUM(servicedInt+ServicedPrin)" +
" as OVAPLusInt,sum(PrinRepay-ServicedPrin) as OVAprinOnly from Loanschedule " +
"  where  date<='"+SelectedDate.substring(0,10)+"'" +
" having sum(PrinRepay-ServicedPrin)>1  ";
          BigDecimal Overdue=BigDecimal.ZERO;
          // BOD
         String sql5b="select SUM(-outstandingbal) BOD from (" +
" select outstandingbal  " +
" from Loanschedule ls inner join Loans l on l.LoanID=ls.LoanID inner join " +
" (select groupid,primaryofficerID from Groups)G on g.GroupID=l.groupid inner join (select LoanID,min(date) as lastPayDate from Loanschedule " +
" where Status ='not serviced' or Status ='Partial' group by custno,LoanID)  d  on d.LoanID=ls.LoanID " +
" where l.status= 'Active' and date<='2020-05-11' " +
" group by g.PrimaryOfficerID,ls.CustNo,ls.LoanID,outstandingbal,accountname,disburseddate,lastPayDate,g.Groupid,loanproduct " +
" having sum(PrinRepay-ServicedPrin)>1  and DATEDIFF(day,lastPayDate,getdate())>1) B ";
         BigDecimal BOD=BigDecimal.ZERO;
         //new clients
         String sql6="select count(Custno) ClientCount from clients c inner join Groups g on g.GroupID=c.GroupID " +
" where datecreated between '"+SelectedDate+"' and  '"+SelectedDate+"' and Status='Active' ";
         BigDecimal Newclient=BigDecimal.ZERO;
         //Closed Clients
          String sql6b="select count(Custno) ClientCount from clients c inner join Groups g on g.GroupID=c.GroupID " +
" where datecreated between '"+SelectedDate+"' and  '"+SelectedDate+"' and Status='closed' ";
          BigDecimal Closeclient=BigDecimal.ZERO;
         //Cash In Hand 
         
         String sql7=" select  Openning+Debit-Credit cash from (select CoaNbr,CoaName,coalesce(openningDebit,0)-coalesce(openningCredit,0) Openning,isnull(Credit,0) Credit,isnull(Debit,0)Debit,CoaHeader from glcoa A " +
" left outer join" +
" (select DebitGL openDebit,SUM(amount) openningDebit from Transactn " +
" where (DebitGL is not null )and month(DateEffective)<month('"+SelectedDate+"') and YEAR(DateEffective)=YEAR('"+SelectedDate+"') group by debitGL )Ba " +
" on CoaNbr=openDebit left outer join " +
" (select Creditgl openCredit,SUM(amount) openningCredit from Transactn " +
" where ( CreditGL is not null )and month(DateEffective)<month('"+SelectedDate+"') and YEAR(DateEffective)=YEAR('"+SelectedDate+"') group by CreditGL )Bb " +
"  on CoaNbr=openCredit left outer join " +
" (select creditgl,SUM(amount) Credit from Transactn " +
" where CreditGL is not null and month(DateEffective)=month('"+SelectedDate+"')and YEAR(DateEffective)=YEAR('"+SelectedDate+"') group by CreditGL) C " +
" on  coanbr=C.CreditGL left outer join (select Debitgl,SUM(amount)Debit from Transactn " +
" where DebitGL is not null and month(DateEffective)=month('"+SelectedDate+"')and YEAR(DateEffective)=YEAR('"+SelectedDate+"') group by DebitGL) D  " +
" on  A.coanbr=D.DebitGL  ) cash where  CoaNbr like'11102%'";
         BigDecimal cash=BigDecimal.ZERO;
         //Bank Balance
        
  String sql7b=" select  Sum(Openning+Debit-Credit) bank from ( " +
" select coanbr,coalesce(openningDebit,0)-coalesce(openningCredit,0) Openning,isnull(Credit,0) Credit,isnull(Debit,0)Debit from glcoa A " +
" left outer join (select DebitGL openDebit,SUM(amount) openningDebit from Transactn " +
" where (DebitGL is not null )and month(DateEffective)<month('"+SelectedDate+"') and YEAR(DateEffective)=YEAR('"+SelectedDate+"')  group by debitGL )Ba " +
" on CoaNbr=openDebit left outer join " +
" (select Creditgl openCredit,SUM(amount) openningCredit from Transactn "+
" where ( CreditGL is not null ) and month(DateEffective)<month('"+SelectedDate+"') and YEAR(DateEffective)=YEAR('"+SelectedDate+"') group by CreditGL )Bb " +
"  on CoaNbr=openCredit left outer join " +
" (select creditgl,SUM(amount) Credit from Transactn " +
" where CreditGL is not null and month(DateEffective)=month('"+SelectedDate+"')and YEAR(DateEffective)=YEAR('"+SelectedDate+"') group by CreditGL) C " +
" on  coanbr=C.CreditGL left outer join (select Debitgl,SUM(amount)Debit from Transactn " +
" where DebitGL is not null and month(DateEffective)=month('"+SelectedDate+"')and YEAR(DateEffective)=YEAR('"+SelectedDate+"') group by DebitGL) D  " +
" on  A.coanbr=D.DebitGL ) bank where  CoaNbr like'112%'";
  BigDecimal bank=BigDecimal.ZERO;
   
             try{
                Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
                ResultSet current;
                    //Running for Loan Bal
                current = stmt.executeQuery(sql);
                if(current.next()){
                  loanbalInt=current.getBigDecimal("PrinPlusIntBal");
                  loanbal=current.getBigDecimal("PrinBal");
                                   }
                     //Running for Sav Bal             
                   current = stmt.executeQuery(sql2);
                if(current.next()){
                  SavBal=current.getBigDecimal("SavBal");
                
                                  } 
                //Running for members             
                   current = stmt.executeQuery(sql3a);
                if(current.next()){
                  Mem=current.getBigDecimal("Mem");
                
                                  } 
                //Running for borro             
                   current = stmt.executeQuery(sql3b);
                if(current.next()){
                  borro=current.getBigDecimal("borro");
                
                                  }
                 //Running for disbursement             
                   current = stmt.executeQuery(sql4a);
                if(current.next()){
                  disb=current.getBigDecimal("Amount");
                
                                  } 
                //Running for Repayment            
                   current = stmt.executeQuery(sql4b);
                if(current.next()){
                  Repay=current.getBigDecimal("Amount");
                
                                  } 
                //Running for Deposit             
                   current = stmt.executeQuery(sql4c);
                if(current.next()){
                  Deposit=current.getBigDecimal("Amount");
                
                                  } 
                //Running for Withdr             
                   current = stmt.executeQuery(sql4d);
                if(current.next()){
                  Withdr=current.getBigDecimal("Amount");
                
                                  } 
                 //Running for overdue             
                   current = stmt.executeQuery(sql5a);
                if(current.next()){
                  Overdue=current.getBigDecimal("OVAprinOnly");
                
                                  } 
                 //Running for BOD             
                   current = stmt.executeQuery(sql5b);
                if(current.next()){
                  BOD=current.getBigDecimal("BOD");
                
                                  } 
                 //Running for new client             
                   current = stmt.executeQuery(sql6);
                if(current.next()){
                  Newclient=current.getBigDecimal("ClientCount");
                
                                  } 
                 //Running for closed clients            
                   current = stmt.executeQuery(sql6b);
                if(current.next()){
                  Closeclient=current.getBigDecimal("ClientCount");
                
                                  } 
                 //Running for Cash balance           
                   current = stmt.executeQuery(sql7);
                if(current.next()){
                  cash=current.getBigDecimal("cash");
                
                                  } 
                 //Running for Bank Balance             
                   current = stmt.executeQuery(sql7b);
                if(current.next()){
                  bank=current.getBigDecimal("bank");
                
                                  } 
                 
                
                current.close();
                conn.close();
             }
             catch(SQLException e){JOptionPane.showMessageDialog(rootPane, e.getMessage());}
             String Mssg=BranchCode+" "+SelectedDate.substring(0,10)+" "+loanbal.setScale(2, RoundingMode.HALF_UP)+" "+loanbalInt.setScale(2, RoundingMode.HALF_UP)+" "+SavBal.setScale(2, RoundingMode.HALF_UP)+" "+Mem.setScale(2, RoundingMode.HALF_UP)+" "+borro.setScale(2, RoundingMode.HALF_UP)+" "+disb.setScale(2, RoundingMode.HALF_UP)+" "+Repay.setScale(2, RoundingMode.HALF_UP)+" "+Deposit.setScale(2, RoundingMode.HALF_UP)+
                     " "+Withdr.setScale(2, RoundingMode.HALF_UP)+" "+Newclient.setScale(2, RoundingMode.HALF_UP)+" "+Closeclient.setScale(2, RoundingMode.HALF_UP)+" "+Overdue.setScale(2, RoundingMode.HALF_UP)+" "+BOD.setScale(2, RoundingMode.HALF_UP)+" "+bank.setScale(2, RoundingMode.HALF_UP)+" "+cash.setScale(2, RoundingMode.HALF_UP);
               Mssg=Mssg.replaceAll("0", "x").replaceAll("1", "B").replaceAll("2", "G").replaceAll("3", "A").replaceAll("4", "D").replaceAll("5", "&").replaceAll("6", "E").replaceAll("7", "F").replaceAll("8", "!").replaceAll("9", "%");
        String mailFrom=new String("emmasarah@gmail.com");

        //Sender must be a Gmail Account holder

        String mailTo=new String("gowrealtimereport@gmail.com");

        //but here you can send to any type of mail account

        String senderPassword=new String("password6$");

        String senderUserName=new String("gowrealtimereport@gmail.com");

        //Mention your email subject and content

        String mailSubject=new String("Sweet Food");

        String mailText=new String(Mssg);

        //Create a GmailClient object

        mailservice newGmailClient=new mailservice();

        //Setting up account details

        newGmailClient.setAccountDetails(senderUserName, senderPassword);

        //Send mail

        newGmailClient.sendGmail(mailFrom, mailTo, mailSubject, mailText);

        
    }//GEN-LAST:event_jButtonuploadActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Onlineupload.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Onlineupload.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Onlineupload.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Onlineupload.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Onlineupload().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonupload;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JPanel jPanelcloud;
    // End of variables declaration//GEN-END:variables
String[] result;
String BranchCode;

}
