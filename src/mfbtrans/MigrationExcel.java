/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mfbtrans;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.FileDialog;
import java.awt.Font;
import java.awt.Insets;
import java.util.List;
import java.io.File;
import javax.swing.JOptionPane;
// import for Excel import
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
 
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.Random;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.print.attribute.standard.Copies;
import javax.print.attribute.standard.MediaSizeName;
import javax.swing.JTable;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.openxml4j.opc.OPCPackage;
import org.apache.poi.ss.usermodel.CellType;
/**
 *
 * @author Emmanuel Ikpe
 */
public class MigrationExcel extends javax.swing.JFrame {

    /**
     * Creates new form ReportControl
     */
    public MigrationExcel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTablecust = new javax.swing.JTable();
        jButtonsheet = new javax.swing.JButton();
        jLabelDept = new javax.swing.JLabel();
        jTextFieldgross = new javax.swing.JTextField();
        jButtonloaddata = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabelgroup = new javax.swing.JTextField();
        jButtonPrint = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButtonBrowse = new javax.swing.JButton();
        jButtontotal = new javax.swing.JButton();
        jButtonreset = new javax.swing.JButton();
        jTextFieldgrossDep = new javax.swing.JTextField();
        jTextFieldAddress = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldBrancode = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jComboBoxDays = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jCheckBoxCreateGroup = new javax.swing.JCheckBox();
        jCheckBoxBiweekly = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        OutstandingPI = new javax.swing.JMenuItem();
        OutstandingDate = new javax.swing.JMenuItem();
        OverdraftPrincipalBalance = new javax.swing.JMenuItem();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("MIGRATION FROM EXCEL");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 204, 102));

        jTablecust.setAutoCreateRowSorter(true);
        jTablecust.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "S/N", "Name in Excel", "RegSaving Bal", "Voluntary", "Festival", "Union Purse", "Future", "Loan Bal", "Product", "Repayment"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false, false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTablecust.setColumnSelectionAllowed(true);
        jTablecust.setOpaque(false);
        jTablecust.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(jTablecust);
        jTablecust.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        if (jTablecust.getColumnModel().getColumnCount() > 0) {
            jTablecust.getColumnModel().getColumn(0).setMinWidth(10);
            jTablecust.getColumnModel().getColumn(0).setPreferredWidth(40);
            jTablecust.getColumnModel().getColumn(0).setMaxWidth(45);
            jTablecust.getColumnModel().getColumn(1).setMinWidth(150);
            jTablecust.getColumnModel().getColumn(1).setPreferredWidth(150);
            jTablecust.getColumnModel().getColumn(1).setMaxWidth(200);
            jTablecust.getColumnModel().getColumn(2).setMinWidth(150);
            jTablecust.getColumnModel().getColumn(2).setPreferredWidth(150);
            jTablecust.getColumnModel().getColumn(2).setMaxWidth(200);
            jTablecust.getColumnModel().getColumn(3).setResizable(false);
        }

        jButtonsheet.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButtonsheet.setText("Sheet 1");
        jButtonsheet.setEnabled(false);
        jButtonsheet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonsheetActionPerformed(evt);
            }
        });

        jLabelDept.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jTextFieldgross.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jButtonloaddata.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonloaddata.setText("Load Data");
        jButtonloaddata.setEnabled(false);
        jButtonloaddata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonloaddataActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Meeting Day");

        jDateChooser1.setDateFormatString("dd-MM-yyyy");

        jLabelgroup.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabelgroup.setOpaque(false);

        jButtonPrint.setText("Print Once");
        jButtonPrint.setEnabled(false);
        jButtonPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPrintActionPerformed(evt);
            }
        });

        jButton2.setText("preview");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("=>");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Check Duplicate Accounts"));
        jPanel2.setOpaque(false);

        jButton4.setText("Check");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Back");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(jButton5)
                .addContainerGap())
        );

        jButtonBrowse.setText("Browse excel");
        jButtonBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseActionPerformed(evt);
            }
        });

        jButtontotal.setText("Total");
        jButtontotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtontotalActionPerformed(evt);
            }
        });

        jButtonreset.setText("reset excel");
        jButtonreset.setBorder(null);
        jButtonreset.setEnabled(false);
        jButtonreset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonresetActionPerformed(evt);
            }
        });

        jTextFieldgrossDep.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jTextFieldAddress.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTextFieldAddress.setText("IKOM");

        jLabel1.setText("Savings");

        jLabel3.setText("Loans");

        jTextFieldBrancode.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTextFieldBrancode.setText("002");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Branch Code");

        jComboBoxDays.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday" }));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Default Address");

        jCheckBoxCreateGroup.setText("CREATE GROUP");

        jCheckBoxBiweekly.setText("BIWEEKLY");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addComponent(jButtonloaddata, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70)
                        .addComponent(jButtontotal)
                        .addGap(29, 29, 29)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldgrossDep, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldgross, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonreset, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(390, 390, 390)
                        .addComponent(jButton2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jButtonBrowse)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonsheet)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(jTextFieldBrancode, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBoxCreateGroup)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCheckBoxBiweekly, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(58, 58, 58))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabelDept, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(jLabelgroup, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(125, 125, 125)
                                        .addComponent(jButtonPrint))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(127, 127, 127)
                                        .addComponent(jTextFieldAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(24, 24, 24))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(30, 30, 30)
                                .addComponent(jComboBoxDays, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(193, 193, 193))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 842, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(29, 29, 29))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(592, Short.MAX_VALUE)
                    .addComponent(jLabel5)
                    .addGap(336, 336, 336)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonsheet)
                            .addComponent(jButtonBrowse)
                            .addComponent(jTextFieldBrancode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jCheckBoxCreateGroup)
                            .addComponent(jCheckBoxBiweekly))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxDays, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelgroup, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelDept, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonPrint))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(153, 153, 153)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextFieldgrossDep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)
                        .addComponent(jTextFieldgross, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3))
                    .addComponent(jButtonloaddata)
                    .addComponent(jButtontotal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButtonreset)))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(54, 54, 54)
                    .addComponent(jLabel5)
                    .addContainerGap(610, Short.MAX_VALUE)))
        );

        jMenu1.setText("Report");

        jMenuItem1.setText("OutstandingPrincipalBalance");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        OutstandingPI.setText("OutstandingPrincipalAndInterestBalance");
        OutstandingPI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OutstandingPIActionPerformed(evt);
            }
        });
        jMenu1.add(OutstandingPI);

        OutstandingDate.setText("OutstandingLastTransactionDate");
        OutstandingDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OutstandingDateActionPerformed(evt);
            }
        });
        jMenu1.add(OutstandingDate);

        OverdraftPrincipalBalance.setText("OverdraftPrincipalBalance");
        OverdraftPrincipalBalance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OverdraftPrincipalBalanceActionPerformed(evt);
            }
        });
        jMenu1.add(OverdraftPrincipalBalance);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1009, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JRCViewReport.REPORT_NAME=jMenuItem1.getText()+".rpt";
        JRCViewReport.launchApplication();


        



    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void OutstandingDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OutstandingDateActionPerformed
 JRCViewReport.REPORT_NAME=OutstandingDate.getText()+".rpt";
       JRCViewReport.launchApplication();

		       
    }//GEN-LAST:event_OutstandingDateActionPerformed

    private void OutstandingPIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OutstandingPIActionPerformed
 JRCViewReport.REPORT_NAME=OutstandingPI.getText()+".rpt";
        JRCViewReport.launchApplication();        // TODO add your handling code here:
    }//GEN-LAST:event_OutstandingPIActionPerformed

    private void OverdraftPrincipalBalanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OverdraftPrincipalBalanceActionPerformed
JRCViewReport.REPORT_NAME=OverdraftPrincipalBalance.getText()+".rpt";
       JRCViewReport.launchApplication();        // TODO add your handling code here:
    }//GEN-LAST:event_OverdraftPrincipalBalanceActionPerformed

    private void jButtonsheetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonsheetActionPerformed
//if(i<maxsheet){i=i+1;    
//jButtonsheet.setText("Sheet "+(i+1));
//}
for(int y=0; y<200;y++){
    jTablecust.getModel().setValueAt("",y,0);
    jTablecust.getModel().setValueAt("",y,1);
    jTablecust.getModel().setValueAt("",y,2);
    jTablecust.getModel().setValueAt("",y,3);
    jTablecust.getModel().setValueAt("",y,4);
    jTablecust.getModel().setValueAt("",y,5);
     jTablecust.getModel().setValueAt("",y,6);
     
      
}
jTextFieldgross.setText("0");

    }//GEN-LAST:event_jButtonsheetActionPerformed

    private void jButtonloaddataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonloaddataActionPerformed
Global glob = new Global();
int len;
 boolean posted;
Connection conn=glob.getConnect();
        String dd=jDateChooser1.getDate().toString();
        String m="";
        if(dd.contains("Jan")){m="01";}
        else if(dd.contains("Feb")){m="02";}
         else if(dd.contains("Mar")){m="03";}
         else if(dd.contains("Apr")){m="04";}
         else if(dd.contains("May")){m="05";}
         else if(dd.contains("Jun")){m="06";}
        else if(dd.contains("Jul")){m="07";}
        else if(dd.contains("Aug")){m="08";}
        else if(dd.contains("Sep")){m="09";}
        else if(dd.contains("Oct")){m="10";}
        else if(dd.contains("Nov")){m="11";}
        else if(dd.contains("Dec")){m="12";}
String dtt= dd.substring(dd.length()-4)+"-"+m+"-"+dd.substring(8,10);
String query,query2,query3,query4,query5,query6;
double InterestRate=0; int term=0,moratorium=1;
int instalcount=0,noOfmonths=0;
int LastLoanNum,LastDepositNum,LastClientNum;
String ClientID="",name="",LoanNum="",DepositNum,DepositNum2,Depcode="200",Depcode2="201",Loancode="300";
 BigDecimal InitialAmountWithint=BigDecimal.ZERO;
PreparedStatement pstmt;
String tranctno="";
if(dtt.length()<10){dtt=dtt.substring(0,5)+"0"+dtt.substring(5);};// to take care of 01/03/2018
int trannoCnt=1;
            String StrngtrannoCnt="01";
            String acno="",glno="",amount="";
              int n=0;  
 int Clientcount=0;          
            try{
                 query=("insert into Clients VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
String      sqlGroup="insert into Groups VALUES (?,?,?,?,?,?,?,?,?)";
query2="insert into Deposit VALUES (?,?,?,?,?,?,?,?,?,?)";
query4="Select max(num) as num from clients";
query5="Select max(serial) as  serial  from deposit";
query6="Select max(count) as count from loans";

                 this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                conn.setAutoCommit(false);
            
                ///Creating Groups
if(jCheckBoxCreateGroup.isSelected()){
pstmt=conn.prepareStatement(sqlGroup);
  pstmt.setString(1,jLabelgroup.getText());
  pstmt.setString(2, jLabelgroup.getText()+" Union");
 pstmt.setString(3,jTextFieldAddress.getText());
 pstmt.setString(5,"System");
 pstmt.setString(6,"");
 pstmt.setString(7,dtt+" 00:00:00.000");
 pstmt.setString(4,jComboBoxDays.getSelectedItem().toString());
 pstmt.setString(8,"30");
 pstmt.setString(9,"1");
 pstmt.executeUpdate();
}
//checking for biweekly
if(jCheckBoxBiweekly.isSelected()){
  Biweekly=true;  
}
 // declaring variables
 Statement stmt;
  ResultSet current ;
   String Lastname,Firstname="",Middlename="";
   
   //looping through the Jtable to import data
        for( n=0;n<salcount;n++){// 2nd for stmt
               
 

    stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
  
         //get last client id   
            current = stmt.executeQuery(query4);
            current.next();
            
            LastClientNum=current.getInt("num");
            //JOptionPane.showMessageDialog(this, LastClientNum);
           current.close();
           /////////////////////////////////////////////////////////////////
            //get last deposit id
          current = stmt.executeQuery(query5);
            current.next();
             LastDepositNum=current.getInt("serial");
            // JOptionPane.showMessageDialog(this, LastDepositNum);
           current.close();
           //get last loan num
           current = stmt.executeQuery(query6);
            current.next();
             LastLoanNum=current.getInt("count");
              // JOptionPane.showMessageDialog(this, LastDepositNum);
           current.close();
          // Get the current Account,loan and Clientid
          if(Integer.parseInt(jTablecust.getModel().getValueAt( n, 0).toString())>Clientcount)
    {      
       
           ClientID=jTextFieldBrancode.getText()+glob.getIDFormat(LastClientNum+1);
    } 
      conn.setAutoCommit(false);//for transaction posting
      

     
  // JOptionPane.showMessageDialog(rootPane,jTablecust.getModel().getValueAt( n, 1).toString());
     String[] names=jTablecust.getModel().getValueAt( n, 1).toString().trim().split("\\s+");
       Lastname=names[0].toUpperCase();
        if(names.length>1){
        Firstname=names[1].toUpperCase();
        }
        if(names.length>2){
         Middlename=names[2].toUpperCase();
        }else{Middlename="";} 
        //getting date
        
        Calendar now=Calendar.getInstance();
        now.getTime();
        int year=now.get(Calendar.YEAR);
        String Smonth,Sday;
        int Omonth=now.get(Calendar.MONTH);//opening as january=0 not 1
        int day=now.get(Calendar.DAY_OF_MONTH);
         int month=Omonth+1;//note month start with january=0 in java
        Smonth=month+"";
        Sday=day+"";
       if(month<10){Smonth="0"+month;}// let it appear as two digit e.g 02
        if(day<10){Sday="0"+day;}
//end of getting date
       
       if(Integer.parseInt(jTablecust.getModel().getValueAt( n, 0).toString())>Clientcount)
    {         
pstmt=conn.prepareStatement(query);
pstmt.setString(1,ClientID);
pstmt.setString(2,Firstname);
pstmt.setString(3,Lastname);
pstmt.setString(4,Middlename);
pstmt.setString(5,"Female");
pstmt.setString(6,"SSCE");
pstmt.setString(7,"Business");
pstmt.setString(8,"");
pstmt.setString(9,jTextFieldAddress.getText());
pstmt.setString(10,jLabelgroup.getText());
pstmt.setString(11,"");
pstmt.setString(12,"");
pstmt.setString(13,year+"-"+Smonth+"-"+Sday+" 00:00:00.000");

pstmt.setString(14,"");
File file=new File(pixpath);
FileInputStream fis=new FileInputStream(file);
len =(int)file.length();

pstmt.setBinaryStream(15,fis,len);
//get image info
File file2=new File(pixpath2);
FileInputStream fis2=new FileInputStream(file2);
len =(int)file2.length();
pstmt.setBinaryStream(16,fis2,len);

pstmt.setString(17,"Active");
pstmt.setString(18,jTextFieldBrancode.getText());
pstmt.setString(19,"");
pstmt.setString(20,null);
pstmt.setString(21,"x"+ClientID.substring(3));

pstmt.executeUpdate();//end of Clientcreation
Clientcount=Integer.parseInt(jTablecust.getModel().getValueAt( n, 0).toString());
    } //end of if for checking for changes in client ID before client creation
//creating  Savings Accounts

 //DepositNum2=Depcode2+glob.getIDFormat(LastDepositNum+2);
 
 LoanNum=Loancode+glob.getIDFormat(LastLoanNum+1);
name=Firstname+" "+Middlename+" "+Lastname ;
//creating Regular Deposit accounts
if(Double.parseDouble(jTablecust.getModel().getValueAt( n, 2).toString())>0)
{
     DepositNum=Depcode+glob.getIDFormat(LastDepositNum++);
  pstmt=conn.prepareStatement(query2);
  pstmt.setString(1,ClientID);
  pstmt.setString(2,Firstname+" "+Middlename+" "+Lastname);
 pstmt.setString(3,DepositNum);
 pstmt.setString(4,year+"-"+Smonth+"-"+Sday+" 00:00:00.000");
 pstmt.setString(5,jTablecust.getModel().getValueAt( n, 2).toString());
 pstmt.setString(6,"null");
 pstmt.setString(7,"Regular Savings");
 pstmt.setString(8,"Active");
 pstmt.setString(9,jLabelgroup.getText());
 pstmt.setString(10,"");
 pstmt.executeUpdate();
}
 //creating Voluntary Deposit accounts
if(Double.parseDouble(jTablecust.getModel().getValueAt( n, 3).toString())>0)
{
     DepositNum=Depcode+glob.getIDFormat(LastDepositNum++);
  pstmt=conn.prepareStatement(query2);
  pstmt.setString(1,ClientID);
  pstmt.setString(2,Firstname+" "+Middlename+" "+Lastname);
 pstmt.setString(3,DepositNum);
 pstmt.setString(4,year+"-"+Smonth+"-"+Sday+" 00:00:00.000");
 pstmt.setString(5,jTablecust.getModel().getValueAt( n, 3).toString());
 pstmt.setString(6,"null");
 pstmt.setString(7,"Voluntary Savings");
 pstmt.setString(8,"Active");
 pstmt.setString(9,jLabelgroup.getText());
 pstmt.setString(10,"");
 pstmt.executeUpdate();
}
//creating Festival Deposit accounts
if(Double.parseDouble(jTablecust.getModel().getValueAt( n, 4).toString())>0)
{
     DepositNum=Depcode+glob.getIDFormat(LastDepositNum++);
  pstmt=conn.prepareStatement(query2);
  pstmt.setString(1,ClientID);
  pstmt.setString(2,Firstname+" "+Middlename+" "+Lastname);
 pstmt.setString(3,DepositNum);
 pstmt.setString(4,year+"-"+Smonth+"-"+Sday+" 00:00:00.000");
 pstmt.setString(5,jTablecust.getModel().getValueAt( n, 4).toString());
 pstmt.setString(6,"null");
 pstmt.setString(7,"Voluntary Savings");
 pstmt.setString(8,"Active");
 pstmt.setString(9,jLabelgroup.getText());
 pstmt.setString(10,"");
 pstmt.executeUpdate();
}
//creating Union Purse accounts
if(Double.parseDouble(jTablecust.getModel().getValueAt( n, 5).toString())>0)
{  DepositNum=Depcode+glob.getIDFormat(LastDepositNum++);
  pstmt=conn.prepareStatement(query2);
  pstmt.setString(1,ClientID);
  pstmt.setString(2,Firstname+" "+Middlename+" "+Lastname);
 pstmt.setString(3,DepositNum);
 pstmt.setString(4,year+"-"+Smonth+"-"+Sday+" 00:00:00.000");
 pstmt.setString(5,jTablecust.getModel().getValueAt( n, 5).toString());
 pstmt.setString(6,"null");
 pstmt.setString(7,"Union Purse Savings");
 pstmt.setString(8,"Active");
 pstmt.setString(9,jLabelgroup.getText());
 pstmt.setString(10,"");
 pstmt.executeUpdate();
}
//creating Future accounts
if(Double.parseDouble(jTablecust.getModel().getValueAt( n, 6).toString())>0)
{
    DepositNum=Depcode+glob.getIDFormat(LastDepositNum++);
  pstmt=conn.prepareStatement(query2);
  pstmt.setString(1,ClientID);
  pstmt.setString(2,Firstname+" "+Middlename+" "+Lastname);
 pstmt.setString(3,DepositNum);
 pstmt.setString(4,year+"-"+Smonth+"-"+Sday+" 00:00:00.000");
 pstmt.setString(5,jTablecust.getModel().getValueAt( n, 6).toString());
 pstmt.setString(6,"null");
 pstmt.setString(7,"Future Savings");
 pstmt.setString(8,"Active");
 pstmt.setString(9,jLabelgroup.getText());
 pstmt.setString(10,"");
 pstmt.executeUpdate();
}
 ////Creating Loans
 query3=("insert into Loans(Custno,AccountName,LoanID,LoanProduct,DisbursedDate,OutstandingBal,"+
        " Status,GroupID,interestPercent,BVN,instalment) VALUES (?,?,?,?,?,?,?,?,?,?,?)");

String qMaxloan="Select max(count) as count from loans";
int loancount=7;
 String LoanProduct="Regln6";   
  
 //Looping through loans field
         //for(loancount=7;loancount<11;loancount++){  
             
      if(Double.parseDouble(jTablecust.getModel().getValueAt( n, 7).toString())>0)
{
        
         //if(loancount==8){ LoanProduct="Special";}
         //else if(loancount==9){ LoanProduct="SBL";}
         // else if(loancount==10){ LoanProduct="MIDTMLN";} 
         current = stmt.executeQuery(qMaxloan);
            current.next();
             LastLoanNum=current.getInt("count");
            
           current.close();
            Loancode="300";
        
      
  ///get product details
  String SQL="Select * from Product where ProductID='"+jTablecust.getModel().getValueAt( n, 8).toString()+"'";
   current = stmt.executeQuery(SQL);
            current.next();
 term = current.getInt("term");
 moratorium= current.getInt("moratorium");
 InterestRate=current.getDouble("InterestRate");
 String frqncy=current.getString("paymentfrequency");
 noOfmonths=current.getInt("monthduration");
 instalcount=term-moratorium; 
 double Intpercent=(InterestRate/12*noOfmonths/100)+1;
 
  double totalAmount=Double.parseDouble(jTablecust.getModel().getValueAt( n, 7).toString());
  double totalPrinAmount=totalAmount/Intpercent;
  double totalint=  totalAmount-totalPrinAmount; 
  int InttotalAmount=Integer.parseInt(jTablecust.getModel().getValueAt( n, 7).toString().replace(".00", "").replace(".0", ""));
         pstmt=conn.prepareStatement(query3);
   
    pstmt.setString(1,ClientID);
    pstmt.setString(2,Firstname+" "+Middlename+" "+Lastname);
    pstmt.setString(3,LoanNum);
    pstmt.setString(4,jTablecust.getModel().getValueAt( n, 8).toString());
    pstmt.setString(5,year+"-"+Smonth+"-"+Sday+" 00:00:00.000");
    pstmt.setString(6,"-"+totalPrinAmount); //needs to be converted to principal later
    pstmt.setString(7,"Active");
    pstmt.setString(8,jLabelgroup.getText());
    pstmt.setString(9,BigDecimal.valueOf(Intpercent).setScale(5, RoundingMode.HALF_UP)+"");
    pstmt.setString(10,"none");
    pstmt.setString(11, jTablecust.getModel().getValueAt( n, 9).toString());
    pstmt.executeUpdate();

     
String sqlTrans=("insert into transactn (AccountID,tranid,Amount,CreditGL,DebitGL,Runningbal,ValueDate,DateEffective,CustNo,StmtRef,BranchID,ChequeNbr,transactionNbr)"
        + " values(?,?,?,?,?,?,?,?,?,?,?,?,?)");
   
  Timestamp timestamp = new Timestamp(System.currentTimeMillis());    
        Random rand = new Random(timestamp.getTime());
        int Rnum=rand.nextInt(9999999);
tranctno=ses_date.substring(2, 4)+ses_date.substring(5, 7)+ses_date.substring(8,10)+Rnum+"LD";

pstmt=conn.prepareStatement(sqlTrans);
pstmt.setString(1,LoanNum);
pstmt.setString(2,"010");
pstmt.setDouble(3,totalPrinAmount);
pstmt.setString(4,"11102-"+jTextFieldBrancode.getText());
pstmt.setString(5,"13102-"+jTextFieldBrancode.getText());
pstmt.setString(6,totalPrinAmount+"");
pstmt.setString(7,ses_date);
pstmt.setString(8,ses_date);
pstmt.setString(9,ClientID);
pstmt.setString(10,"Disbursement");
pstmt.setString(11,name);
pstmt.setString(12,"");
pstmt.setString(13,tranctno);
pstmt.executeUpdate();
 
 int count=1;
  SimpleDateFormat sdf= new SimpleDateFormat("yyyy-MM-dd");
///creating schedules
String qLoansched=("insert into loanschedule VALUES (?,?,?,?,?,?,?,?,?,?,?,?)");
 BigDecimal AmountWithintt=BigDecimal.ZERO;
   
   BigDecimal RunningPrin = BigDecimal.ONE;
   BigDecimal RunningInt = BigDecimal.ONE;
   double AmountWithint=totalAmount;
   
   double Intrepay=totalint/instalcount;

   int repayment=Integer.parseInt(jTablecust.getModel().getValueAt( n, 9).toString().replace(".00", "").replace(".0", ""));
   BigDecimal RunningPrinWithInt = BigDecimal.ONE;
   BigDecimal intrepay=BigDecimal.valueOf(Intrepay);
   BigDecimal repaymnt=BigDecimal.valueOf(repayment);
   int lastschedEven= InttotalAmount/repayment;//to get last schedule for fractional differences

    
        while(AmountWithint>0 && count<=(lastschedEven)){
  String ddd=sdf.format(now.getTime()).substring(8,10)+sdf.format(now.getTime()).substring(4,7);
//the above shows the correct holiday format with the note pad
            if(glob.checkHoliday(ddd)){//this will skip public holidays
                if(frqncy.equalsIgnoreCase("weekly")){now.add(Calendar.DATE,7);//to increase date
            // JOptionPane.showMessageDialog(this,ddd);
             }else if(frqncy.equalsIgnoreCase("monthly")){
              now.add(Calendar.DATE,1);  
             }
             continue;   
            }//end of if check holiday is true
            
  
AmountWithintt = new BigDecimal(AmountWithint).setScale(2, RoundingMode.HALF_EVEN);
        
         InitialAmountWithint = AmountWithintt; 
        pstmt=conn.prepareStatement(qLoansched); 
        pstmt.setString(1,LoanNum);
        pstmt.setString(2,sdf.format(now.getTime())+" 00:00:00.000");
      
        if(count==lastschedEven){  
        BigDecimal CumulaPrin=repaymnt.setScale(2, RoundingMode.HALF_UP).subtract(intrepay.setScale(2, RoundingMode.HALF_UP)).multiply(BigDecimal.valueOf(lastschedEven-1));
        pstmt.setString(3,BigDecimal.valueOf(totalAmount).setScale(2, RoundingMode.HALF_UP).subtract(CumulaPrin).setScale(2, RoundingMode.HALF_UP).add(intrepay.setScale(2, RoundingMode.HALF_UP)).toString());
        pstmt.setString(4,BigDecimal.valueOf(totalAmount).setScale(2, RoundingMode.HALF_UP).subtract(CumulaPrin).setScale(2, RoundingMode.HALF_UP).add(intrepay.setScale(2, RoundingMode.HALF_UP)).toString());
        pstmt.setString(5,BigDecimal.valueOf(totalAmount).setScale(2, RoundingMode.HALF_UP).subtract(CumulaPrin).setScale(2, RoundingMode.HALF_UP).toString());
        pstmt.setString(6,intrepay.setScale(2, RoundingMode.HALF_UP).setScale(2, RoundingMode.HALF_UP).toString());
       // pstmt.setString(6,BigDecimal.valueOf(totalInt).subtract(RunningInt).toString());
           }
        else{
            
        pstmt.setString(3,AmountWithintt+"");
        pstmt.setString(4,repaymnt.setScale(2, RoundingMode.HALF_UP).toString());
        pstmt.setString(5,repaymnt.setScale(2, RoundingMode.HALF_UP).subtract(intrepay.setScale(2, RoundingMode.HALF_UP)).toString());
        pstmt.setString(6,intrepay.setScale(2, RoundingMode.HALF_UP).toString());
            }
        pstmt.setString(7,"Not Serviced");
        pstmt.setString(8,ClientID);
         pstmt.setInt(9,count);
         pstmt.setInt(10,0);
          pstmt.setInt(11,0);
          if(count==1){
          pstmt.setString(12,"P");
          }else{
            pstmt.setString(12,"U");   
          }
        pstmt.executeUpdate();
        
        String onedaybefore=ses_date;// just inialising
        try
        {
       Date prevdate=new SimpleDateFormat("yyyy-MM-dd").parse(ses_date);
       prevdate = new Date(prevdate.getTime() - 2);
       DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
       onedaybefore = dateFormat.format( prevdate);
      
        }
        catch(Exception e){JOptionPane.showMessageDialog(this, e.getMessage());}
        //updating loanschedule to display loan balance in field print
        String strSQl="insert into Loanschedule values('"+LoanNum+"','"+onedaybefore+" 00:00:00.000"+"','"+InitialAmountWithint+"','','0.00','0.00','Not Serviced','"+ClientID+"','0','0.00','0.00','D')";
        pstmt=conn.prepareStatement(strSQl);
        pstmt.executeUpdate();

 
            // JOptionPane.showMessageDialog(this,totalint+" "+ AmountWithint+"----"+repaymnt.setScale(2, RoundingMode.HALF_UP)+"int on repay"+ intrepay.setScale(2, RoundingMode.HALF_UP)+ " and term is "+term+" and moratorium is "+moratorium);
             if(Biweekly==true){now.add(Calendar.DATE,14);  }//to increase date
             else if(frqncy.equalsIgnoreCase("weekly")){now.add(Calendar.DATE,7);//to increase date
             
             }else if(frqncy.equalsIgnoreCase("monthly")){
              now.add(Calendar.MONTH,1) ; 
                  
             }
            count=count+1;
           
           AmountWithint=AmountWithint-repayment;
           RunningInt =RunningInt.add(intrepay);
           RunningPrin =RunningPrin.add(repaymnt).subtract(intrepay);
          RunningPrinWithInt =RunningPrinWithInt.add(repaymnt);

        }// end of while
        }// end of if value >0
        //} //end of 2nd for
                              }// end of 1st for 
        
       
         
        

                              
       conn.commit();
        //sending sms
        //JOptionPane.showMessageDialog(rootPane, salcount);
        String Depositor="";
        
                   JOptionPane.showMessageDialog(rootPane, "Updated Successfully.");
        //indicated successful transaction
         posted=true;
        jButtonPrint.setEnabled(true);
        jButtonloaddata.setEnabled(false);
        jButtontotal.setEnabled(false);
        
        
            }
             catch(Exception e){JOptionPane.showMessageDialog(rootPane, e.getMessage());posted=false;}
        //catch(Exception e){JOptionPane.showMessageDialog(rootPane, e.getCause()+" and "+e.getMessage()+"Customer name "+jTablecust.getModel().getValueAt(salcount, 1).toString()+" at S/N "+(n+2) + " of Salary Count= "+(salcount+1)+"\n A/C="+glno+"-"+acno+" Amount="+amount);posted=false;}
             this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
             
             
           //Creating space variables as sp1 and sp2
      //String sp1="\t",sp2="\t \t";
     // String name, posted="";
       // int np=0;
        /*
        posted="                                                                          Ohafia MFB \n"+"                     "
                  + "                                                            Posted Daily Saving List "+
                  "\n"+"No"+sp1+sp1+"Name"+sp2+sp2+"AccountID"+sp1+sp1+" DailyAmt"+sp1+sp1+"Status";
        //JOptionPane.showMessageDialog(rootPane, salcount);
        while(np<salcount){
         name=jTablecust.getModel().getValueAt(np, 1).toString();
         if(name.length()>22){
             // JOptionPane.showMessageDialog(rootPane, name);
             name=name.substring(0,21);
             //JOptionPane.showMessageDialog(rootPane, name);
         }
         
              posted=posted+"\n("+jTablecust.getModel().getValueAt(np, 0)+")"+String.format("%1$30s",name)+sp1+String.format("%1$13s", jTablecust.getModel().getValueAt(np, 3))+"  "+String.format("%1$10s", jTablecust.getModel().getValueAt(np, 4));
                
              
              np=np+1;
        }    
        //PrintPostedSalary ps= new  PrintPostedSalary();
        //ps.jTextAreaposted.setMargin( new Insets(2,2,2,2) );
        
       //ps.jTextAreaposted.setText(posted);
       //ps.setVisible(true);
          */
                try
       {
       Document document = new Document();
 // JOptionPane.showMessageDialog(null, dir);
                        PdfWriter.getInstance(document, new FileOutputStream(dir2+"\\Marketer Reports\\"+jLabelgroup.getText()+"-Migrated@"+dtt+".pdf"));

                        document.open();

                        //addMetaData(document);

                        //addTitlePage(document);

 

                        Anchor anchor = new Anchor("OHAFIA MICROFINANCE BANK PLC");

                        anchor.setName("DAILY MARKETERS REPORT");

 

                        // Second parameter is the number of the chapter

                        Chapter catPart = new Chapter(new Paragraph(anchor), 1);

 

                        Paragraph subPara = new Paragraph("Marketer's Name: "+jLabelgroup.getText()+"              "+"Transaction Date: "+dtt);
                       
                        Section subCatPart = catPart.addSection(subPara);
                       
                       PdfPTable table = null;
                       //setting table row count to 5
 table = new PdfPTable(8); // note name column uses two columns
    //insert column headings
   insertCell(table, "No", Element.ALIGN_LEFT, 1, null);
   insertCell(table, "Account Name", Element.ALIGN_LEFT, 3, null); //uses two columns
   insertCell(table, "Account No", Element.ALIGN_LEFT, 2, null);
   insertCell(table, "Deposit Amount", Element.ALIGN_RIGHT, 1, null);
   insertCell(table, "Remark", Element.ALIGN_RIGHT, 1, null);
   table.setHeaderRows(1);
 for(int rr=0;rr<salcount;rr++){

// the function insertCall is at the bottom of the class. see below
     insertCell(table, jTablecust.getModel().getValueAt(rr, 0).toString(),  Element.ALIGN_LEFT, 1, null);
   insertCell(table, jTablecust.getModel().getValueAt(rr, 1).toString(), Element.ALIGN_LEFT, 3, null);
   insertCell(table, jTablecust.getModel().getValueAt(rr, 3).toString(), Element.ALIGN_LEFT, 2, null);
   insertCell(table, jTablecust.getModel().getValueAt(rr, 4).toString(), Element.ALIGN_RIGHT, 1, null);
   insertCell(table, "Posted", Element.ALIGN_RIGHT, 1, null);
   table.setHeaderRows(1);
                                                            

                                

                                                                        
 }// end of for statement
 Paragraph subPara2 = new Paragraph( "                 Count("+salcount+")"+"Total = "+jTextFieldgross.getText()+"  ("+ NumberToWords.convert(Integer.parseInt(jTextFieldgross.getText().replace(".00", "")))+" naira only )");
 
 subCatPart.add(table);
 subCatPart.add(subPara2);


                        addEmptyLine(subPara, 5);
                         document.add(catPart);
                        document.close();
                        //check for Marketers Report and create if it does not exist
          // File folder= new File(dir2+"\\Marketer Reports");
        
           //  if( !folder.exists()){folder.mkdir();}
        
                       // File file2 = new File(jLabeltrantext.getText()+"-Posted"+jComboBoxIsAlert.getSelectedItem().toString().replace("SEND", "SENT")+"@"+dtt+".pdf");
             //           File file = new File(dir2+"\\Marketer Reports\\"+jLabelgroup.getText()+"-Migrated"+"@"+dtt+".pdf");
    //if (file.toString().endsWith(".pdf")) {
      //  Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + file);
        //Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + file2);
                         }
   // else {
   //     Desktop desktop = Desktop.getDesktop();
   //     desktop.open(file);
//}
       //}
       catch(Exception e){JOptionPane.showMessageDialog(rootPane, e.getMessage());}

      jButtonreset.setEnabled(true);
      if( posted){ //if posted successfully, reset the excel
      //jButtonreset.doClick();
      }
       jButtonreset.setEnabled(false);
    
        
    }//GEN-LAST:event_jButtonloaddataActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
Calendar now=Calendar.getInstance();
Global glob= new Global();
Connection conn= glob.getConnect();
SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
 // JOptionPane.showMessageDialog(rootPane, now.getTime().toString());
  
        Date dt =new Date(sdf.format(now.getTime()).toString());
     jDateChooser1.setDate(dt);
       String query="select gl_no,ac_name from coa where gl_no='202999' or gl_no  like '1021%'" +
" order by gl_no";
     
        //try{
             //   Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
             //   ResultSet current = stmt.executeQuery(query);

          
            
              //  while(current.next()){

//jComboBoxGLcode.addItem(current.getString("gl_no")+"|"+current.getString("ac_name"));
                  
                //}
               
                //current.close();
               // conn.close();
            //}
           // catch(Exception e){ JOptionPane.showMessageDialog(this,e.getMessage());}
          // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void jButtonPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPrintActionPerformed
String printData="OMFB Salary Posted Printout";
 SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
		String headerField = "as on " + sdf.format(new Date());      
MessageFormat header = new MessageFormat(printData) ;
MessageFormat footer =new MessageFormat("Posted with Automated batch import "+headerField+" "+"Page {0}");

{
 try
 {
   PrintRequestAttributeSet attribSet = new HashPrintRequestAttributeSet();
		attribSet.add(MediaSizeName.ISO_A4);
		attribSet.add(new Copies(1));
                
                   
        
			
 //job.print();
 jTablecust.print(JTable.PrintMode.FIT_WIDTH,header,footer,true,attribSet,false);
 jButtonPrint.setEnabled(false);
 }
 catch(Exception e){JOptionPane.showMessageDialog(this, e.getMessage());
     //print job did not complete
 }
}        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonPrintActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
      if(search.importAcc=true && jTablecust.getSelectedRow()!=-1 && !search.SelectedAcc.isEmpty()){
         
      jTablecust.getModel().setValueAt(search.acctitle, jTablecust.getSelectedRow(), 1);
        jTablecust.getModel().setValueAt(search.acctitle, jTablecust.getSelectedRow(), 2);
         jTablecust.getModel().setValueAt(search.SelectedAcc, jTablecust.getSelectedRow(), 3);
        search.importAcc=false;
      }
    }//GEN-LAST:event_formWindowActivated

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

             //Creating space variables as sp1 and sp2
      String sp1="\t",sp2="\t \t";
      String name, posted="";
        int np=0;
        posted="                                                                          Ohafia MFB \n"+"                     "
                  + "                                                            Posted Daily Savings List "+
                  "\n"+"No"+sp1+"Name"+sp2+"AccountID"+sp1+" Amount"+sp1+"Status";
        //JOptionPane.showMessageDialog(rootPane, salcount);
        while(np<salcount){
         name=jTablecust.getModel().getValueAt(np, 1).toString();
         if(name.length()>22){
             // JOptionPane.showMessageDialog(rootPane, name);
             name=name.substring(0,21);
             //JOptionPane.showMessageDialog(rootPane, name);
         }
         
              posted=posted+"\n("+jTablecust.getModel().getValueAt(np, 0)+")"+String.format("%1$30s",name)+sp1+String.format("%1$13s", jTablecust.getModel().getValueAt(np, 3))+"  "+String.format("%1$10s", jTablecust.getModel().getValueAt(np, 4));
                
              
              np=np+1;
        } 
        PrintPostedSalary ps= new  PrintPostedSalary();
        ps.jTextAreaposted.setMargin( new Insets(2,2,2,2) );
       ps.jTextAreaposted.setText(posted);
       ps.jTextAreaposted.setEditable(false);
     
       ps.setVisible(true);
        
                     // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
TableRowSorter<TableModel> sorter = new TableRowSorter<>(jTablecust.getModel());
jTablecust.setRowSorter(sorter);
List<RowSorter.SortKey> sortKeys = new ArrayList<>();
 
int columnIndexToSort = 3;
sortKeys.add(new RowSorter.SortKey(columnIndexToSort, SortOrder.DESCENDING));
 
sorter.setSortKeys(sortKeys);
sorter.sort(); 

//jTablecust.setDefaultRenderer(3, render);
jTablecust.setDefaultRenderer(Object.class, new MyCellRenderer());
jButtonloaddata.setEnabled(false);

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
TableRowSorter<TableModel> sorter = new TableRowSorter<>(jTablecust.getModel());
jTablecust.setRowSorter(sorter);
List<RowSorter.SortKey> sortKeys = new ArrayList<>();
 
int columnIndexToSort = 3;
sortKeys.add(new RowSorter.SortKey(columnIndexToSort, SortOrder.UNSORTED));
 
sorter.setSortKeys(sortKeys);
sorter.sort();    
 DefaultTableCellRenderer renderer = new DefaultTableCellRenderer(); 
jTablecust.setDefaultRenderer(Object.class,renderer);
jButtonloaddata.setEnabled(true);


    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButtonBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseActionPerformed
///getting date
String dd=jDateChooser1.getDate().toString();
        String m="";
        if(dd.contains("Jan")){m="01";}
        else if(dd.contains("Feb")){m="02";}
         else if(dd.contains("Mar")){m="03";}
         else if(dd.contains("Apr")){m="04";}
         else if(dd.contains("May")){m="05";}
         else if(dd.contains("Jun")){m="06";}
        else if(dd.contains("Jul")){m="07";}
        else if(dd.contains("Aug")){m="08";}
        else if(dd.contains("Sep")){m="09";}
        else if(dd.contains("Oct")){m="10";}
        else if(dd.contains("Nov")){m="11";}
        else if(dd.contains("Dec")){m="12";}
 dtt= dd.substring(dd.length()-4)+"-"+m+"-"+dd.substring(8,10);
//end of getting date
        Global glob = new Global();
        String excelFile = "";

        FileDialog fd = new FileDialog(this,"Import Salary Excel File in .XLSX Format",FileDialog.LOAD); // begin of if stmt
        fd.setFile("*.xlsx");
        fd.setVisible(true);

        fd.setDirectory("C:\\");

            String path = fd.getDirectory() + fd.getFile();
           
            
            String filename =fd.getFiles()[0].toString();
            dir=path.replace(fd.getName(),"");
               //JOptionPane.showMessageDialog(this,filename);
            if (filename == null) {
                JOptionPane.showMessageDialog(this,"You cancelled the File Dialog");
            }
            else
            {
                excelFile=filename;
                F_Path=filename;
                File f = new File(excelFile);
                dir2=f.getParent();
                jLabelDept.setText(excelFile.replace(".xlsx", "").replace(".xls", ""));
                jLabelgroup.setText(fd.getFile().replace(".xlsx", "").replace(".xls", "").replace(".XLSX", ""));
                //JOptionPane.showMessageDialog(this,dir+"\\Marketer Reports");
           //check for Marketers Report and create if it does not exist
           File folder= new File(dir2+"\\Marketer Reports");
             if(!folder.exists() ){folder.mkdir();}
         
            }
               
            File xlsFile = new File(excelFile);
              
            Workbook workbook;

            try {

                workbook = loadSpreadSheet(xlsFile);
                
                readSpreadSheet(workbook);
                
               // JOptionPane.showMessageDialog(this,"DONE");
            } catch (FileNotFoundException e) {

                JOptionPane.showMessageDialog(this,"Excel File (or) PDF File is already opened. Please close the file");

                //System.exit(1);

            } catch (Exception e) {

                JOptionPane.showMessageDialog(this,  e.getMessage());

            }

            //// /////////////////importing from excel sheet

            //JOptionPane.showMessageDialog(this,filename);

            FileInputStream fis = null;
            try {
                this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                fis = new FileInputStream(excelFile);

                // Using XSSF for xlsx format, for xls use HSSF
                workbook = new XSSFWorkbook(fis);

                int numberOfSheets = workbook.getNumberOfSheets();
                maxsheet= numberOfSheets;
                //looping over each workbook sheet
                //for (int i = 0; i < numberOfSheets; i++) {
                    //for (int i = 0; i <= 0; i++) {
                        Sheet sheet = workbook.getSheetAt(0);
                        Iterator rowIterator = sheet.iterator();
                        int r=0,c=0;
                        boolean end=false;

                        // Row row0 = (Row) rowIterator.next();// Department header
                        //  Iterator cellIterator0 = row0.cellIterator();
                        //Cell cell0 =(Cell) cellIterator0.next();
                        //jLabelDept.setText(cell0.getStringCellValue());
                        //rowIterator.next();//Ohafia Header

                        // rowIterator.next();//For salary title header
                        // Row row1 = (Row) rowIterator.next();//For table header
                        //Iterator cellIterator1 = row1.cellIterator();
                        //Cell cell1 =(Cell) cellIterator1.next();

                        rowIterator.next();//For table header
                        //iterating over each row
                        while (rowIterator.hasNext()) {
                            if(end==true){
                                break;
                            }
                            c=0; // start from the beginning of the cells
                           
                            Row row = (Row) rowIterator.next();
                            Iterator cellIterator = row.cellIterator();

                            //Iterating over each cell (column wise)  in a particular row.
                            while (cellIterator.hasNext()) {

                                Cell cell =(Cell) cellIterator.next();
                                CellType type = cell.getCellTypeEnum();
                                //JOptionPane.showMessageDialog(rootPane, type);
                                //The Cell Containing String will be name.
                                if (cell.getColumnIndex() == 0  ) {

                                    if(!checkNumerictype(type.toString())){
                                    if(row.getCell(0).getStringCellValue().equalsIgnoreCase("total")){
                                        r=r-1;
                                        salcount=r;

                                      // end= true;
                                        break;
                                    }
                                    
                                    }
                                    else
                                    {
                                        // check for the type
                                        if(checkNumerictype(type.toString())){
                                            //jTablecust.getModel().setValueAt(cell.getNumericCellValue(), r, c);
                                             jTablecust.getModel().setValueAt(BigDecimal.valueOf(cell.getNumericCellValue()).intValue(), r, c);

                                        }
                                        else{
                                            jTablecust.getModel().setValueAt(cell.getStringCellValue(), r, c);
                                        }
                                    }
                                }
                                //Cell with index 1 contains serial number

                                else if (cell.getColumnIndex() == 1   ) {
                                    if(checkNumerictype(type.toString())){
                                        jTablecust.getModel().setValueAt(BigDecimal.valueOf(cell.getNumericCellValue()).setScale(2, RoundingMode.HALF_EVEN), r, c);
                                    }else{
                                        jTablecust.getModel().setValueAt(cell.getStringCellValue(), r, c);
                                    }
                                }
                                //Cell with index 2 contains Names

                                else if (cell.getColumnIndex() == 2  ) {
                                    //JOptionPane.showMessageDialog(rootPane,String.valueOf( row.getCell(3).getNumericCellValue()));
                                    if(checkNumerictype(type.toString())){
                                        jTablecust.getModel().setValueAt( new BigDecimal(cell.getNumericCellValue()), r, c);
                                    }else{
                                        jTablecust.getModel().setValueAt( cell.getStringCellValue(), r, c);
                                    }

                                }
                                //Cell with index 3 contains marks in English
                                else if (cell.getColumnIndex() == 3   ) {

                                    if(checkNumerictype(type.toString())){
                                        jTablecust.getModel().setValueAt(String.valueOf(cell.getNumericCellValue()), r, c);
                                    }else{
                                        jTablecust.getModel().setValueAt(cell.getStringCellValue(), r, c);
                                    }
                                    // jTablecust.getModel().setValueAt(String.valueOf(cell.getNumericCellValue()), r, c);
                                }
                                else if (cell.getColumnIndex() == 4  ) {
                                    //JOptionPane.showMessageDialog(rootPane, row.getCell(4).getNumericCellValue());
                                    if(checkNumerictype(type.toString())){
                                        jTablecust.getModel().setValueAt(BigDecimal.valueOf(cell.getNumericCellValue()).setScale(2, RoundingMode.HALF_UP), r, c);
                                    }else{
                                        jTablecust.getModel().setValueAt(cell.getStringCellValue(), r, c);
                                    }
                                    //jTablecust.getModel().setValueAt(BigDecimal.valueOf(cell.getNumericCellValue()).setScale(2, RoundingMode.HALF_UP), r, c);

                                }
                                else if (cell.getColumnIndex() == 5) {
                                    if(checkNumerictype(type.toString())){
                                        jTablecust.getModel().setValueAt(BigDecimal.valueOf(cell.getNumericCellValue()).setScale(2, RoundingMode.HALF_UP), r, c);
                                    }else{
                                        jTablecust.getModel().setValueAt(cell.getStringCellValue(), r, c);
                                    }
                                    //JOptionPane.showMessageDialog(rootPane,cell.getStringCellValue());
                                    //jTablecust.getModel().setValueAt(BigDecimal.valueOf(cell.getNumericCellValue()).setScale(2, RoundingMode.HALF_UP), r, c);
                                }
                                  else if (cell.getColumnIndex() == 6) {
                                    if(checkNumerictype(type.toString())){
                                        jTablecust.getModel().setValueAt(BigDecimal.valueOf(cell.getNumericCellValue()).setScale(2, RoundingMode.HALF_UP), r, c);
                                    }else{
                                        jTablecust.getModel().setValueAt(cell.getStringCellValue(), r, c);
                                    }
                                                        }
                                      else if (cell.getColumnIndex() == 7) {
                                    if(checkNumerictype(type.toString())){
                                        jTablecust.getModel().setValueAt(BigDecimal.valueOf(cell.getNumericCellValue()).setScale(2, RoundingMode.HALF_UP), r, c);
                                    }else{
                                        jTablecust.getModel().setValueAt(cell.getStringCellValue(), r, c);
                                    }
                                       }
                                      else if (cell.getColumnIndex() == 8) {
                                    if(checkNumerictype(type.toString())){
                                        jTablecust.getModel().setValueAt(BigDecimal.valueOf(cell.getNumericCellValue()).setScale(2, RoundingMode.HALF_UP), r, c);
                                    }else{
                                        jTablecust.getModel().setValueAt(cell.getStringCellValue(), r, c);
                                    }
                                                        }
                                      else if (cell.getColumnIndex() == 9) {
                                    if(checkNumerictype(type.toString())){
                                        jTablecust.getModel().setValueAt(BigDecimal.valueOf(cell.getNumericCellValue()).setScale(2, RoundingMode.HALF_UP), r, c);
                                    }else{
                                        jTablecust.getModel().setValueAt(cell.getStringCellValue(), r, c);
                                    }
                                                        }
                                c=c+1;
                                //if(c==2){c=3;}//to skip the 3rd column for name verification
                            }
                            //end iterating a row, add all the elements of a row in list
                            
                            r=r+1;// to move next
                            salcount=r;
                        }
                        //} //end of for
//JOptionPane.showMessageDialog(rootPane, salcount);
                    fis.close();
                    //enable to buttons
                    // jButtonverify.setEnabled(true);
                    //jButtonsheet.setEnabled(true);
       
                    //connect.close();
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                } catch (IOException e) {
                    e.printStackTrace();
                }

                this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                  jButtontotal.setEnabled(true);
    }//GEN-LAST:event_jButtonBrowseActionPerformed

    private void jButtontotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtontotalActionPerformed
        BigDecimal gross= BigDecimal.ZERO,grossdep=BigDecimal.ZERO,charge=BigDecimal.ZERO;
       // JOptionPane.showMessageDialog(rootPane, jTablecust.getModel().getValueAt(1, 4).toString()+"  and total="+salcount);
        for(int x=0; x<salcount;x++){

            gross=gross.add(BigDecimal.valueOf(Double.parseDouble(jTablecust.getModel().getValueAt(x, 7).toString())).setScale(2, RoundingMode.HALF_UP));
             grossdep=grossdep.add(BigDecimal.valueOf(Double.parseDouble(jTablecust.getModel().getValueAt(x, 2).toString())).setScale(2, RoundingMode.HALF_UP));
              grossdep=grossdep.add(BigDecimal.valueOf(Double.parseDouble(jTablecust.getModel().getValueAt(x, 3).toString())).setScale(2, RoundingMode.HALF_UP));
            grossdep=grossdep.add(BigDecimal.valueOf(Double.parseDouble(jTablecust.getModel().getValueAt(x, 4).toString())).setScale(2, RoundingMode.HALF_UP));
            grossdep=grossdep.add(BigDecimal.valueOf(Double.parseDouble(jTablecust.getModel().getValueAt(x, 5).toString())).setScale(2, RoundingMode.HALF_UP));
            grossdep=grossdep.add(BigDecimal.valueOf(Double.parseDouble(jTablecust.getModel().getValueAt(x, 6).toString())).setScale(2, RoundingMode.HALF_UP));
           
            //net=net.add(BigDecimal.valueOf(Double.parseDouble(jTablecust.getModel().getValueAt(x, 6).toString())).setScale(2, RoundingMode.HALF_UP));

        }
        jTextFieldgross.setText(gross+"");
        jTextFieldgrossDep.setText(grossdep+"");

        jButtonloaddata.setEnabled(true);
             // TODO add your handling code here:
    }//GEN-LAST:event_jButtontotalActionPerformed

    private void jButtonresetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonresetActionPerformed
   try
   {
        Workbook workbook;
         FileInputStream fis = new FileInputStream(F_Path); 
   // File xlsxFile= new File(F_Path);
// workbook = loadSpreadSheet(xlsxFile);

// Using XSSF for xlsx format, for xls use HSSF
                workbook = new XSSFWorkbook(fis);

                int numberOfSheets = workbook.getNumberOfSheets();
                maxsheet= numberOfSheets;
                //looping over each workbook sheet
                //for (int i = 0; i < numberOfSheets; i++) {
                    //for (int i = 0; i <= 0; i++) {
                        Sheet sheet = workbook.getSheetAt(0);
                        Iterator rowIterator = sheet.iterator();
                        int r=0,c=0;
                      

                       
                        rowIterator.next();//For table header
                        //iterating over each row
                        while (rowIterator.hasNext()) {
                          
                            c=0; // start from the beginning of the cells
                     
                            Row row = (Row) rowIterator.next();
                           // Iterator cellIterator = row.cellIterator();
                             row.getCell(3).setCellValue((Integer.parseInt("0")));
                            
                            //Iterating over each cell (column wise)  in a particular row.
                            //while (cellIterator.hasNext()) {

                                //Cell cell =(Cell) cellIterator.next();
                                //CellType type = cell.getCellTypeEnum();
                                //JOptionPane.showMessageDialog(rootPane, type);
                                //The Cell Containing String will be name.
                                //if (cell.getColumnIndex() == 0 && row.getCell(3).getNumericCellValue()>0 ) {

                                         // check for the type
                                      //  if(checkNumerictype(type.toString())){
                                       //     jTablecust.getModel().setValueAt(cell.getNumericCellValue(), r, c);
                                      //  }
                                      //  else{
                                        //    jTablecust.getModel().setValueAt(cell.getStringCellValue(), r, c);
                                       // }
                                    //}
                               // }
                                
                        }
                        fis.close();
                        FileOutputStream outputStream = new FileOutputStream(F_Path);
                      
                         workbook.write(outputStream);
   }
   catch(Exception e){JOptionPane.showMessageDialog(rootPane, e.getMessage());}
    }//GEN-LAST:event_jButtonresetActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MigrationExcel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MigrationExcel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MigrationExcel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MigrationExcel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MigrationExcel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem OutstandingDate;
    private javax.swing.JMenuItem OutstandingPI;
    private javax.swing.JMenuItem OverdraftPrincipalBalance;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButtonBrowse;
    private javax.swing.JButton jButtonPrint;
    private javax.swing.JButton jButtonloaddata;
    private javax.swing.JButton jButtonreset;
    private javax.swing.JButton jButtonsheet;
    private javax.swing.JButton jButtontotal;
    private javax.swing.JCheckBox jCheckBoxBiweekly;
    private javax.swing.JCheckBox jCheckBoxCreateGroup;
    private javax.swing.JComboBox<String> jComboBoxDays;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabelDept;
    private javax.swing.JTextField jLabelgroup;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTablecust;
    private javax.swing.JTextField jTextFieldAddress;
    private javax.swing.JTextField jTextFieldBrancode;
    private javax.swing.JTextField jTextFieldgross;
    private javax.swing.JTextField jTextFieldgrossDep;
    // End of variables declaration//GEN-END:variables
static int numberOfColumns;
String ses_date;
boolean Biweekly=false;
 static String dir,dir2;
String pixpath="micro77.png";
String pixpath2="signature.jpg";
 int maxsheet;
int salcount;
String F_Path;
String dtt;
Clientnameonly search=new Clientnameonly();
 public boolean checkNumerictype(String type ){
        boolean numeric;
        if(type.equalsIgnoreCase("Numeric")||type.equalsIgnoreCase("Formula")){numeric=true;}
        else 
        {numeric=false;}
      return numeric;     
  }
private static Workbook loadSpreadSheet(File xlsFile) throws Exception {

                        Workbook workbook = null;

 

                        String ext = getFileExtension(xlsFile.getName());

                        if (ext.equalsIgnoreCase("xlsx")) {

                                    OPCPackage pkg = OPCPackage.open(xlsFile.getAbsolutePath());

                                    workbook = new XSSFWorkbook(pkg);

                                    pkg.close();

                        } else if (ext.equalsIgnoreCase("xls")) {

                                    InputStream xlsFIS = new FileInputStream(xlsFile);

                                    workbook = new HSSFWorkbook(xlsFIS);

                                    xlsFIS.close();

                        } else {

                                    throw new Exception("FILE EXTENSION NOT RECOGNIZED");

                        }

                        return workbook;

            }

 private static String getFileExtension(String fileName) {

                        String ext = "";

                        int mid = fileName.lastIndexOf(".");

                        ext = fileName.substring(mid + 1, fileName.length());

                       // System.out.println("File Extension --" + ext);

                        return ext;

            }
 private  void readSpreadSheet(Workbook workbook) throws IOException,

                                    DocumentException {

 

                        Document document = new Document();
 // JOptionPane.showMessageDialog(null, dir);
                      
                        PdfWriter.getInstance(document, new FileOutputStream(jLabelDept.getText()+"@"+dtt+".pdf"));

                        document.open();

                        addMetaData(document);

                        addTitlePage(document);

                           

                        Anchor anchor = new Anchor("OHAFIA MICROFINANCE BANK PLC");

                        anchor.setName("DAILY MARKETERS REPORT");

 

                        // Second parameter is the number of the chapter

                        Chapter catPart = new Chapter(new Paragraph(anchor), 1);

 

                        Paragraph subPara = new Paragraph("DAILY MARKETERS REPORT");

                        Section subCatPart = catPart.addSection(subPara);

                        addEmptyLine(subPara, 5);

 ///////////////////Setting the worksheet

                        Sheet sheet = workbook.getSheetAt(0);

                       

                        // Iterate through each rows from first sheet

                        Iterator<Row> rowIterator = sheet.iterator();

 

                        int temp = 0;

                        boolean flag = true;

                        PdfPTable table = null;

                       

                        while (rowIterator.hasNext()) {

                                    Row row = rowIterator.next();

                                    int cellNumber = 0;

 

                                    if (flag) {

                                                table = new PdfPTable(row.getLastCellNum());

                                                flag = false;

                                    }

                                   

                                    // For each row, iterate through each columns

                                    Iterator<Cell> cellIterator = row.cellIterator();

                                    while (cellIterator.hasNext()) {

                                                Cell cell = cellIterator.next();

                                   

                                                switch (cell.getCellType()) {  

                                                case STRING:
                                                              
                                                            if (temp == 0) {                                 
                                                                         
                                                                        numberOfColumns = row.getLastCellNum();

                                                                        PdfPCell c1 = new PdfPCell(new Phrase(

                                                                                                cell.getStringCellValue()));

                                                                        c1.setHorizontalAlignment(Element.ALIGN_CENTER);

                                                                        table.addCell(c1);

                                                                        table.setHeaderRows(1);

                                                          

                                                            }else{

                                                                        cellNumber =checkEmptyCellAndAddCellContentToPDFTable(cellNumber,cell,table);

                                                            }                                                         

                                                            cellNumber++;

                                                            break;

                                                           

                                                case NUMERIC:
                                                            //if(cell.getNumericCellValue()>0){
                                                            cellNumber =checkEmptyCellAndAddCellContentToPDFTable(cellNumber,cell,table);

                                                            cellNumber++;

                                                            break;
                                                            //}

                                                }                     

                                    }

                                    temp = 1;

                                    if(numberOfColumns != cellNumber){

                                                for(int i=0;i<(numberOfColumns-cellNumber);i++){

                                                            table.addCell(" ");

                                                }

                                    }

                        }

                        subCatPart.add(table);

                        // Now add all this to the document

                        document.add(catPart);

                        document.close();
                        
            }

private static void addMetaData(Document document) {

                        document.addTitle("Marketers' PDF Report");

                       // document.addSubject("Using iText");

                        //document.addKeywords("Java, PDF, iText");

                        //document.addAuthor("Uvaraj");

                       // document.addCreator("Uvaraj");

            }




private static void addTitlePage(Document document)

                                    throws DocumentException {

                        Paragraph preface = new Paragraph();

                        // We add one empty line

                        //addEmptyLine(preface, 1);

                        // Lets write a big header

                       // preface.add(new Paragraph("Title of the document"));

 

                        //addEmptyLine(preface, 1);

                        // Will create: Report generated by: _name, _date

                        //preface.add(new Paragraph("Report generated by: " + "Uvaraj" + ", "

                                             //   + new Date()));

                        addEmptyLine(preface, 3);

                        //preface.add(new Paragraph(

                                         //       "This document describes something which is very important "

                                            //    ));

 

                        addEmptyLine(preface, 8);

 

                       // preface.add(new Paragraph(

                                         //       "This document is a preliminary version  ;-)."));

 

                        //document.add(preface);

                        // Start a new page

                        //document.newPage();

            }

 private static void addEmptyLine(Paragraph paragraph, int number) {

                        for (int i = 0; i < number; i++) {

                                    paragraph.add(new Paragraph(" "));

                        }

            }
 private static int checkEmptyCellAndAddCellContentToPDFTable(int cellNumber, Cell cell, PdfPTable table) {
                       
                        if (cellNumber == cell.getColumnIndex()) {

                                    if(cell.getCellType() == cell.getCellType().NUMERIC){
                                        

                                                table.addCell(Double.toString(cell.getNumericCellValue()));
                                                    
                                    }

                                    if(cell.getCellType() == cell.getCellType().STRING){

                                                table.addCell(cell.getStringCellValue());

                                    }

                       

                        } else {

                                    while( cellNumber < cell.getColumnIndex()) {

                                                 

                                                            table.addCell(" ");

                                                            cellNumber++;

                                               

                                    }

                                    if (cellNumber == cell.getColumnIndex()) {

                                                if(cell.getCellType() == cell.getCellType().NUMERIC){
                                                          
                                                            table.addCell(Double.toString(cell.getNumericCellValue()));
                                                         

                                                }

                                                if(cell.getCellType() == cell.getCellType().STRING){

                                                            table.addCell(cell.getStringCellValue());

                                                }

                                               

                                    }

                                    cellNumber = cell.getColumnIndex();

                        }         

                       

                        return cellNumber;

            }
 
 
 
 
  public class MyCellRenderer extends javax.swing.table.DefaultTableCellRenderer {

        @Override
        public java.awt.Component getTableCellRendererComponent(javax.swing.JTable table, java.lang.Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            final java.awt.Component cellComponent = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
      if(row<salcount-1){
            Object val = table.getValueAt(row, 3);
             Object val2 = table.getValueAt(row+1, 3);
            String sval = val.toString();
            String sval2 = val2.toString();
            //sval = sval.replaceAll(":", "");
           // int ival = Integer.parseInt(sval);
            if (sval.equalsIgnoreCase(sval2)  ) {
                cellComponent.setForeground(Color.black);
                cellComponent.setBackground(Color.red);
                   
            } else {
                cellComponent.setBackground(Color.white);
                cellComponent.setForeground(Color.black);
            }
        }

            return cellComponent;

        }

    }
// insert cells functions
  
  private void insertCell(PdfPTable table, String text, int align, int colspan, Font font){
  
  //create a new cell with the specified Text and Font
  PdfPCell cell = new PdfPCell(new Phrase(text.trim()));
  //set the cell alignment
  cell.setHorizontalAlignment(align);
  //set the cell column span in case you want to merge two or more cells
  cell.setColspan(colspan);
  //in case there is no text and you wan to create an empty row
  if(text.trim().equalsIgnoreCase("")){
   cell.setMinimumHeight(10f);
  }
  //add the call to the table
  table.addCell(cell);
  
 }
}






 

