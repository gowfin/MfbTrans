/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package mfbtrans;

import java.awt.Color;
import java.awt.Image;
import java.awt.print.PrinterJob;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.MessageFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import javax.swing.JTable;

/**
 *
 * @author Emmanuel
 */
public class AccountHistory extends javax.swing.JFrame {

    /**
     * Creates new form StudentAccount
     */
    public AccountHistory() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldClientID = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldName = new javax.swing.JTextField();
        jLabelItem = new javax.swing.JLabel();
        jTextFieldAccountID = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableHistory = new javax.swing.JTable();
        jButtonPrint = new javax.swing.JButton();
        jLabelRemove = new javax.swing.JLabel();
        jTextFieldPay = new javax.swing.JTextField();
        jTextFieldWithdr = new javax.swing.JTextField();
        jLabeladd = new javax.swing.JLabel();
        jComboBoxRvsal = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jButtonContinue = new javax.swing.JButton();
        jLabelBal = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Account History");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Account History"));
        jPanel1.setForeground(new java.awt.Color(0, 204, 255));

        jLabel3.setText("Client ID");

        jTextFieldClientID.setEditable(false);
        jTextFieldClientID.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N

        jLabel2.setText("Client Name");

        jTextFieldName.setEditable(false);
        jTextFieldName.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N

        jLabelItem.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelItem.setForeground(new java.awt.Color(51, 0, 255));
        jLabelItem.setText("Item Desc");

        jTextFieldAccountID.setEditable(false);
        jTextFieldAccountID.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextFieldName, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                    .addComponent(jTextFieldClientID))
                .addGap(64, 64, 64)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelItem, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextFieldAccountID, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldClientID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldAccountID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelItem))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTableHistory.setFont(jTableHistory.getFont().deriveFont(jTableHistory.getFont().getStyle() | java.awt.Font.BOLD, jTableHistory.getFont().getSize()+2));
        jTableHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Transaction Date", "AccountID", "Decription", "Trx_no", "Amount", "Balance"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableHistory.setRowSelectionAllowed(false);
        jTableHistory.setShowHorizontalLines(isEnabled());
        jTableHistory.setShowVerticalLines(isEnabled());
        jTableHistory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableHistoryMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableHistoryMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTableHistory);

        jButtonPrint.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jButtonPrint.setText("Print");
        jButtonPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPrintActionPerformed(evt);
            }
        });

        jLabelRemove.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelRemove.setText("Total  Removed");
        jLabelRemove.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTextFieldPay.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jTextFieldWithdr.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jLabeladd.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabeladd.setText("Total  Added ");
        jLabeladd.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jComboBoxRvsal.setActionCommand("");
        jComboBoxRvsal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jComboBoxRvsalMousePressed(evt);
            }
        });
        jComboBoxRvsal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRvsalActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Reversal");

        jLabel19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mfbtrans/imagesreportsmall.png"))); // NOI18N
        jLabel19.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel19.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel19MouseClicked(evt);
            }
        });

        jButtonContinue.setText("Continue");
        jButtonContinue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonContinueActionPerformed(evt);
            }
        });

        jLabelBal.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelBal.setText("Bal");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 194, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jLabeladd)
                        .addGap(36, 36, 36))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jButtonContinue, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jComboBoxRvsal, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldPay, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabelRemove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonPrint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextFieldWithdr, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE))
                        .addGap(55, 55, 55)
                        .addComponent(jLabelBal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldPay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldWithdr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabeladd, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelBal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jComboBoxRvsal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonPrint))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonContinue)
                        .addGap(0, 8, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
Image icon=null;
        try {
            icon = ImageIO.read(getClass().getResource("/mfbtrans/micro1.jpeg"));
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
   this.setIconImage(icon);  
 
 glob = new Global();
Connection conn = glob.getConnect();
String query2="select * from transactn where AccountID='"+jTextFieldClientID.getToolTipText()+"' order by DateProcessing";

        
        
        try{
    
 
 Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
            ResultSet current = stmt.executeQuery(query2);
            int i=0;
            BigDecimal Tunit=BigDecimal.ZERO;
           while( current.next()){
               
               jTableHistory.getModel().setValueAt(current.getString("DateEffective"),i,0);
               jTableHistory.getModel().setValueAt(current.getString("AccountID"),i,1);
               jTableHistory.getModel().setValueAt(current.getString("Stmtref"),i,2);
               jTableHistory.getModel().setValueAt(current.getString("transactionNbr"),i,3);
               jTableHistory.getModel().setValueAt(current.getBigDecimal("amount").setScale(1, RoundingMode.UP),i,4);
               jTableHistory.getModel().setValueAt(current.getBigDecimal("RunningBal").setScale(1, RoundingMode.UP),i,5);
             
               i=i+1;
               if(current.getString("transactionNbr").contains("LRP") && !current.getString("Stmtref").contains("Interest on")){
                Tunit=(current.getBigDecimal("amount")).add(Tunit);
               }
               else if(current.getString("transactionNbr").contains("CDP")){
                   Tunit=(current.getBigDecimal("amount")).add(Tunit); 
               }
               
          
           }
           jTextFieldPay.setText(Tunit.setScale(2)+""); 
           
           // jTextFieldWithdr.setText(Double.parseDouble(jTextFieldWithdr.getText())* Double.parseDouble(LoanIntRate)+"");
           
             
            current.close();
}
catch(Exception e){JOptionPane.showMessageDialog(this, e.getMessage());}// TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void jButtonPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPrintActionPerformed
String printData=jTextFieldName.getText()+":::::"+jTextFieldClientID.getText();
       
MessageFormat header = new MessageFormat(companyname) ;
MessageFormat footer =new MessageFormat(printData);
//Graphics2D g=image.createGraphics();
PrinterJob job =PrinterJob.getPrinterJob();
job.setPrintable(new OutputPrinter(jTextFieldName.getText()));
job.setPrintable(new OutputPrinter(jTextFieldClientID.getText()));
//boolean doPrint=job.printDialog();
//if (doPrint)
//{
 try
 {

 //job.print();
 jTableHistory.print(JTable.PrintMode.FIT_WIDTH,header,footer,true,null,false);
 }
 catch(Exception e){
     JOptionPane.showMessageDialog(rootPane, "The Job did not print");
 }

     

 
//}
    
          // TODO add your handling code here:
    }//GEN-LAST:event_jButtonPrintActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
 
    }//GEN-LAST:event_formComponentShown

    private void jComboBoxRvsalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRvsalActionPerformed
    // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxRvsalActionPerformed

    private void jLabel19MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel19MouseClicked
        Reports rpt =new Reports();
        rpt.setVisible(true);// TODO add your handling code here:
    }//GEN-LAST:event_jLabel19MouseClicked

    private void jTableHistoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableHistoryMouseClicked
if(evt.getClickCount()==2){
    jButtonContinue.doClick();
}
              // TODO add your handling code here:
    }//GEN-LAST:event_jTableHistoryMouseClicked

    private void jTableHistoryMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableHistoryMouseReleased

        if(jComboBoxRvsal.getItemCount()>0){
            jComboBoxRvsal.removeAllItems();
            
        }
String ds=jTableHistory.getModel().getValueAt(jTableHistory.getSelectedRow(), 2).toString();
        if(ds.contains("LN") || ds.contains("Repayment")){
     
    jComboBoxRvsal.addItem("Repayment");  
    } 
   
    else if (ds.contains("Dep") || ds.contains("DEP") ||  ds.contains("Deposit") ){
         
      jComboBoxRvsal.addItem("Deposit");  
      
     }else if (ds.contains("Disbursement")){
         
      jComboBoxRvsal.addItem("Disbursement");  
      
     }else if (ds.contains("Withdrawal") || ds.contains("CSH WITHDR")){
     jComboBoxRvsal.addItem("Withdrawal");    
    }else{
      jComboBoxRvsal.addItem("No Reversal");    
     }        // TODO add your handling code here:
    }//GEN-LAST:event_jTableHistoryMouseReleased

    private void jComboBoxRvsalMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBoxRvsalMousePressed
      // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxRvsalMousePressed

    private void jButtonContinueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonContinueActionPerformed
if(Reversal){int i=jTableHistory.getSelectedRow();
        Reversal rvsal= new Reversal();
rvsal.jTextFieldBalance.setText(jTableHistory.getModel().getValueAt(i,5).toString());
rvsal.jTextFieldAmount.setText(jTableHistory.getModel().getValueAt(i,4).toString());
rvsal.jTextFieldDescription.setText("Reversal of "+jTableHistory.getModel().getValueAt(i,2).toString());
rvsal.jTextFieldAccountID.setText(jTableHistory.getModel().getValueAt(i,1).toString());
rvsal.jTextFieldTrxno.setText(jTableHistory.getModel().getValueAt(i,3).toString());
rvsal.companyname=companyname;
rvsal.compshortname=compshortname;
rvsal.ses_date=ses_date;
rvsal.tellerControlGl=tellerControlGl;
rvsal.custno=jTextFieldClientID.getText();

rvsal. AccName= AccName;
 glob = new Global();
Connection conn= glob.getConnect();
if(jComboBoxRvsal.getSelectedItem().toString().equalsIgnoreCase("Repayment")){
    rvsal.jTextFieldReference.setText("Reversal of Repayment");
   String  qry="Select * from transactn where stmtref like '%Interest on Repayment%' and transactionNbr='"+jTableHistory.getModel().getValueAt(i,3).toString()+"'";
ResultSet current=null;
    try
    {
    Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
            current = stmt.executeQuery(qry);
            //JOptionPane.showMessageDialog(rootPane, ses_date);
            if(current.next()){
                
             BigDecimal amt=BigDecimal.valueOf(Double.parseDouble(jTableHistory.getModel().getValueAt(i,4).toString()));
   BigDecimal intrt=BigDecimal.valueOf(Double.parseDouble(current.getString("Amount")));
    BigDecimal prin=amt.subtract(intrt);
    
    rvsal.jTextFieldint.setText(intrt+"");
    rvsal.jTextFieldprin.setText(prin+"");
     rvsal.jTextFieldint.setEnabled(true);
    rvsal.jTextFieldprin.setEnabled(true);
            }    
    }
    catch(Exception e){JOptionPane.showMessageDialog(rootPane, e.getMessage());}

   
    
     rvsal.desc=jComboBoxRvsal.getSelectedItem().toString();
      rvsal.compshortname=compshortname;
      rvsal.companyname=companyname;
      rvsal.ses_date=ses_date;
    rvsal.setVisible(true);
}
else if(jComboBoxRvsal.getSelectedItem().toString().equalsIgnoreCase("Deposit")){
    rvsal.jTextFieldReference.setText("Reversal of Deposit");
    rvsal.desc=jComboBoxRvsal.getSelectedItem().toString();
    rvsal.setVisible(true);
}
else if(jComboBoxRvsal.getSelectedItem().toString().equalsIgnoreCase("Withdrawal")){
    rvsal.jTextFieldReference.setText("Reversal of Withdrawal");
    rvsal.desc=jComboBoxRvsal.getSelectedItem().toString();
    rvsal.setVisible(true);
}    
else if(jComboBoxRvsal.getSelectedItem().toString().equalsIgnoreCase("Disbursement")){
    rvsal.jTextFieldReference.setText("Reversal of Disbursement");
    rvsal.desc=jComboBoxRvsal.getSelectedItem().toString();
    rvsal.setVisible(true);
} 
}//end of if (Reversal)
else{
    JOptionPane.showMessageDialog(rootPane, "You are not permitted to Reverse Transactions");
}
    }//GEN-LAST:event_jButtonContinueActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
glob = new Global();
Connection conn = glob.getConnect();
String query2="select * from transactn where AccountID='"+jTextFieldClientID.getToolTipText()+"' "
        + "order by dateprocessing";

        
        
        try{
    
 
 Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
            ResultSet current = stmt.executeQuery(query2);
            int i=0;
            BigDecimal Tdep=BigDecimal.ZERO,Twithdr=BigDecimal.ZERO,Tint=BigDecimal.ZERO;
           while( current.next()){
               
               jTableHistory.getModel().setValueAt(current.getString("DateEffective"),i,0);
               jTableHistory.getModel().setValueAt(current.getString("AccountID"),i,1);
               jTableHistory.getModel().setValueAt(current.getString("Stmtref"),i,2);
               jTableHistory.getModel().setValueAt(current.getString("transactionNbr"),i,3);
               jTableHistory.getModel().setValueAt(current.getBigDecimal("amount").setScale(1, RoundingMode.UP),i,4);
               jTableHistory.getModel().setValueAt(current.getBigDecimal("RunningBal").setScale(1, RoundingMode.UP),i,5);
                 
               i=i+1;
               if(current.getString("transactionNbr").contains("LRP")||current.getString("transactionNbr").contains("CWR")){
               Twithdr=((current.getBigDecimal("amount")).add(Twithdr)).setScale(2, RoundingMode.HALF_UP); 
               }
               
               if(current.getString("transactionNbr").contains("LD")||current.getString("transactionNbr").contains("CDP")){//skips interest on repayment
                   Tdep=((current.getBigDecimal("amount")).add(Tdep)).setScale(2, RoundingMode.HALF_UP); 
                 
               }
                if(current.getString("transactionNbr").contains("LRP") && current.getString("Stmtref").contains("Interest on")){//skips interest on repayment
                   Tint=((current.getBigDecimal("amount")).add(Tint)).setScale(2, RoundingMode.HALF_UP); 
               }
               
           }
           jTextFieldWithdr.setText(Twithdr.setScale(2)+""); 
           jTextFieldPay.setText(Tdep.setScale(2)+"");
           if(isloan){ jTextFieldWithdr.setText( jTableHistory.getModel().getValueAt(0,4).toString());
           jTextFieldPay.setText(Tdep.setScale(2).multiply(BigDecimal.valueOf(Double.parseDouble(LoanIntRate)))+"");
           jLabelRemove.setText("Total Disbursed");
           jLabeladd.setText("Total Repaid");
         
          jTextFieldWithdr.setText(BigDecimal.valueOf(Double.parseDouble(jTextFieldWithdr.getText())* Double.parseDouble(LoanIntRate)).setScale(2, RoundingMode.HALF_UP)+"");
           jLabelBal.setForeground(Color.red);
          Double tot=(Twithdr.subtract(Tint)).doubleValue();
          jTextFieldPay.setText(BigDecimal.valueOf(tot).setScale(2, RoundingMode.HALF_UP)+"");
           }
           
         jLabelBal.setText(BigDecimal.valueOf(Double.parseDouble(jTextFieldPay.getText())-Double.parseDouble( jTextFieldWithdr.getText())).setScale(2, RoundingMode.HALF_UP)+"");
            current.close();
            conn.close();
}
catch(Exception e){JOptionPane.showMessageDialog(this, e.getMessage());}// TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowActivated

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AccountHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AccountHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AccountHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AccountHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AccountHistory().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonContinue;
    private javax.swing.JButton jButtonPrint;
    public javax.swing.JComboBox jComboBoxRvsal;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    public javax.swing.JLabel jLabelBal;
    public javax.swing.JLabel jLabelItem;
    private javax.swing.JLabel jLabelRemove;
    private javax.swing.JLabel jLabeladd;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableHistory;
    public javax.swing.JTextField jTextFieldAccountID;
    public javax.swing.JTextField jTextFieldClientID;
    public javax.swing.JTextField jTextFieldName;
    private javax.swing.JTextField jTextFieldPay;
    private javax.swing.JTextField jTextFieldWithdr;
    // End of variables declaration//GEN-END:variables
String AccName="";
boolean isloan=false;
String userid;
String ses_date,compshortname,companyname;
String tellerControlGl;
boolean Reversal;
Global glob=new Global();
String LoanIntRate;
}
