/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package mfbtrans;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.FileDialog;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Calendar;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Iterator;
import java.util.Random;
import javax.imageio.ImageIO;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.openxml4j.opc.OPCPackage;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
/**
 *
 * @author Emma
 */
public class BulkEntry extends javax.swing.JFrame {

    /**
     * Creates new form Accounts
     */
    public BulkEntry() {
        initComponents();
        
        
    }
class TableRenderer extends DefaultTableCellRenderer
{
  private int row, col;

  public Component getTableCellRendererComponent (JTable table,
                          Object value,
                          boolean isSelected,
                          boolean hasFocus,
                          int row,
                          int column)
  {
   // Save row and column information for use in setValue().

   this.row = row;
   this.col = column;

   // Allow superclass to return rendering component.

   return super.getTableCellRendererComponent (table, value, 
                         isSelected, hasFocus,
                         row, column);
  }

  protected void setValue (Object v)
  {
   // Allow superclass to set the value.

   super.setValue (v);

   // If in names column, color cell with even row number white on
   // dark green, and cell with odd row number black on white.

   if (col == 0)
   {
     if (row % 2 == 0)
     {
       setForeground (Color.white);
       setBackground (new Color (0, 128, 0));
     }
     else
     {
       setForeground (UIManager.getColor ("Table.foreground"));
       setBackground (UIManager.getColor ("Table.background"));
     }

     return;
   }

   // Must be in balances column. Make sure v is valid.

   if (v == null)
     return;
    
   // Extract the cell's numeric value.

   Double d = (Double) v;

   // If numeric value is less than zero, color cell yellow on red.
   // Otherwise, color cell black on white.

   if (d.doubleValue () < 0)
   {
     setForeground (Color.yellow);
     setBackground (Color.red);
   }
   else
   {
     setForeground (UIManager.getColor ("Table.foreground"));
     setBackground (UIManager.getColor ("Table.background"));
   }
  }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupTran = new javax.swing.JPopupMenu();
        jTabbedBulk = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        JtbClientRepay = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        JTbDeposit = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        javax.swing.JLabel CLIENTID = new javax.swing.JLabel();
        jCombogroupname = new javax.swing.JComboBox();
        jcount = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jTextOfficer = new javax.swing.JTextField();
        jTextCode = new javax.swing.JTextField();
        javax.swing.JLabel CLIENTID1 = new javax.swing.JLabel();
        jTextFieldGcode = new javax.swing.JTextField();
        jButtonfind = new javax.swing.JButton();
        jButtonBrowse = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        textFieldRepay = new java.awt.TextField();
        label3 = new java.awt.Label();
        txtMan = new java.awt.TextField();
        jTextFieldTcollect = new javax.swing.JTextField();
        label2 = new java.awt.Label();
        jTextFieldSorted = new javax.swing.JTextField();
        jTextFieldPosted = new javax.swing.JTextField();
        label7 = new java.awt.Label();
        label8 = new java.awt.Label();
        jButtonVerify = new javax.swing.JButton();
        jButtonPrint = new javax.swing.JButton();
        jButtonClear = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        label10 = new java.awt.Label();
        jButtonSumUp = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        jButtonPost = new javax.swing.JButton();
        jLabelstatus = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();

        jPopupTran.setBackground(new java.awt.Color(255, 255, 255));
        jPopupTran.setInvoker(JtbClientRepay);
        jPopupTran.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPopupTranMouseClicked(evt);
            }
        });
        jPopupTran.getAccessibleContext().setAccessibleParent(JtbClientRepay);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Bulk Posting");
        setBackground(new java.awt.Color(255, 255, 0));
        setFont(new java.awt.Font("Dotum", 1, 12)); // NOI18N
        setLocationByPlatform(true);
        setPreferredSize(new java.awt.Dimension(920, 550));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });

        jTabbedBulk.setBackground(new java.awt.Color(51, 0, 51));
        jTabbedBulk.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jTabbedBulk.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedBulk.setAutoscrolls(true);

        JtbClientRepay.setAutoCreateRowSorter(true);
        JtbClientRepay.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createEtchedBorder()));
        JtbClientRepay.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        JtbClientRepay.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"", "", "0.0", "0.0"},
                {"", "", null, "0.0"},
                {null, null, null, "0.0"},
                {null, null, null, "0.0"},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ClientID", "Client Name", "Expected", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JtbClientRepay.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        JtbClientRepay.setEditingColumn(getCursorType());
        JtbClientRepay.setEditingRow(getCursorType());
        JtbClientRepay.setFillsViewportHeight(true);
        JtbClientRepay.setFocusCycleRoot(true);
        JtbClientRepay.setGridColor(new java.awt.Color(0, 0, 0));
        JtbClientRepay.setRowMargin(2);
        JtbClientRepay.setSelectionModel(JtbClientRepay.getSelectionModel());
        JtbClientRepay.setShowHorizontalLines(isEnabled());
        JtbClientRepay.setShowVerticalLines(isEnabled());
        JtbClientRepay.setSurrendersFocusOnKeystroke(true);
        JtbClientRepay.getTableHeader().setReorderingAllowed(false);
        JtbClientRepay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JtbClientRepayMouseClicked(evt);
            }
        });
        JtbClientRepay.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                JtbClientRepayKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JtbClientRepayKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(JtbClientRepay);
        if (JtbClientRepay.getColumnModel().getColumnCount() > 0) {
            JtbClientRepay.getColumnModel().getColumn(0).setResizable(false);
            JtbClientRepay.getColumnModel().getColumn(0).setPreferredWidth(30);
            JtbClientRepay.getColumnModel().getColumn(1).setResizable(false);
            JtbClientRepay.getColumnModel().getColumn(1).setPreferredWidth(40);
            JtbClientRepay.getColumnModel().getColumn(2).setResizable(false);
            JtbClientRepay.getColumnModel().getColumn(2).setPreferredWidth(30);
            JtbClientRepay.getColumnModel().getColumn(3).setResizable(false);
            JtbClientRepay.getColumnModel().getColumn(3).setPreferredWidth(20);
        }
        JtbClientRepay.getAccessibleContext().setAccessibleName("JtbAccountList");
        JtbClientRepay.getAccessibleContext().setAccessibleParent(this);

        jTabbedBulk.addTab("Repayment", jScrollPane1);

        JTbDeposit.setAutoCreateRowSorter(true);
        JTbDeposit.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        JTbDeposit.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, ""},
                {null, null, null, ""},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ClientID", "Client Name", "Deposit Type", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JTbDeposit.setFillsViewportHeight(true);
        JTbDeposit.setShowHorizontalLines(isEnabled());
        JTbDeposit.setShowVerticalLines(isEnabled());
        JTbDeposit.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                JTbDepositFocusLost(evt);
            }
        });
        JTbDeposit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                JTbDepositKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTbDepositKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                JTbDepositKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(JTbDeposit);

        jTabbedBulk.addTab("Saving", jScrollPane2);

        jPanel1.setBackground(new java.awt.Color(255, 0, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        CLIENTID.setText("Group Name");
        CLIENTID.setToolTipText("");

        jCombogroupname.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jCombogroupname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCombogroupnameActionPerformed(evt);
            }
        });

        jcount.setText("Records");
        jcount.setToolTipText("");

        jPanel3.setBackground(new java.awt.Color(255, 0, 255));

        jTextOfficer.setEditable(false);
        jTextOfficer.setBackground(new java.awt.Color(204, 204, 204));
        jTextOfficer.setForeground(new java.awt.Color(153, 0, 0));
        jTextOfficer.setToolTipText("");
        jTextOfficer.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextOfficer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextOfficerActionPerformed(evt);
            }
        });

        jTextCode.setEditable(false);
        jTextCode.setBackground(new java.awt.Color(204, 204, 204));
        jTextCode.setForeground(new java.awt.Color(153, 0, 0));
        jTextCode.setToolTipText("");
        jTextCode.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextCodeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextCode, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextOfficer, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jTextOfficer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTextCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        CLIENTID1.setText("Group Code");
        CLIENTID1.setToolTipText("");

        jTextFieldGcode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldGcodeKeyPressed(evt);
            }
        });

        jButtonfind.setText("Search");
        jButtonfind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonfindActionPerformed(evt);
            }
        });

        jButtonBrowse.setBackground(new java.awt.Color(102, 102, 0));
        jButtonBrowse.setText("Import Excel");
        jButtonBrowse.setBorder(null);
        jButtonBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CLIENTID1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CLIENTID, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTextFieldGcode, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(jButtonfind))
                            .addComponent(jCombogroupname, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jcount, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jCombogroupname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(CLIENTID))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(CLIENTID1)
                                    .addComponent(jTextFieldGcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButtonfind)))
                            .addComponent(jButtonBrowse))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(jcount))
        );

        jPanel2.setBackground(new java.awt.Color(255, 0, 255));
        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        textFieldRepay.setBackground(new java.awt.Color(240, 240, 240));
        textFieldRepay.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        textFieldRepay.setText("0");
        textFieldRepay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldRepayActionPerformed(evt);
            }
        });

        label3.setFont(new java.awt.Font("Dotum", 1, 12)); // NOI18N
        label3.setName(""); // NOI18N
        label3.setText("Total Repayment");

        txtMan.setBackground(new java.awt.Color(240, 240, 240));
        txtMan.setText("0");

        jTextFieldTcollect.setBackground(new java.awt.Color(240, 240, 240));
        jTextFieldTcollect.setText("0");
        jTextFieldTcollect.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        label2.setFont(new java.awt.Font("Dotum", 1, 12)); // NOI18N
        label2.setText("Total Deposit");

        jTextFieldSorted.setBackground(new java.awt.Color(240, 240, 240));
        jTextFieldSorted.setText("NO");
        jTextFieldSorted.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jTextFieldPosted.setBackground(new java.awt.Color(240, 240, 240));
        jTextFieldPosted.setText("NO");
        jTextFieldPosted.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        label7.setFont(new java.awt.Font("Dotum", 1, 12)); // NOI18N
        label7.setName(""); // NOI18N
        label7.setText("Is Verified");

        label8.setFont(new java.awt.Font("Dotum", 1, 12)); // NOI18N
        label8.setName(""); // NOI18N
        label8.setText("Is Posted");

        jButtonVerify.setEnabled(false);
        jButtonVerify.setText("Verify");
        jButtonVerify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVerifyActionPerformed(evt);
            }
        });

        jButtonPrint.setText("Print");
        jButtonPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPrintActionPerformed(evt);
            }
        });

        jButtonClear.setText("Clear");
        jButtonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearActionPerformed(evt);
            }
        });

        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        label10.setFont(new java.awt.Font("Dotum", 1, 12)); // NOI18N
        label10.setText("Total Collection");

        jButtonVerify.setEnabled(false);
        jButtonSumUp.setText("Total");
        jButtonSumUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSumUpActionPerformed(evt);
            }
        });

        jLabel19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mfbtrans/imagesreportsmall.png"))); // NOI18N
        jLabel19.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel19.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel19MouseClicked(evt);
            }
        });

        jButtonPost.setEnabled(false);
        jButtonPost.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonPost.setText("Post");
        jButtonPost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPostActionPerformed(evt);
            }
        });

        jLabelstatus.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelstatus.setForeground(new java.awt.Color(0, 204, 102));
        jLabelstatus.setText(" Pending ");
        jLabelstatus.setToolTipText("");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addComponent(jButtonClear)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonVerify)
                        .addGap(30, 30, 30)
                        .addComponent(jButtonPrint)
                        .addGap(16, 16, 16)
                        .addComponent(jButtonPost, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(47, 47, 47)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jTextFieldTcollect)
                                .addComponent(textFieldRepay, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE))
                            .addComponent(txtMan, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelstatus, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(label8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(51, 51, 51)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldSorted, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                            .addComponent(jTextFieldPosted))
                        .addGap(59, 59, 59)
                        .addComponent(jButtonSumUp)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jButtonCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 149, Short.MAX_VALUE)
                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(textFieldRepay, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(2, 2, 2)
                                .addComponent(txtMan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldTcollect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(label8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelstatus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextFieldSorted, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButtonSumUp))
                                .addGap(25, 25, 25)
                                .addComponent(jTextFieldPosted, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButtonClear)
                                    .addComponent(jButtonVerify)
                                    .addComponent(jButtonPrint)
                                    .addComponent(jButtonPost))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addContainerGap(30, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jButtonCancel)
                        .addContainerGap(25, Short.MAX_VALUE))))
        );

        jPanel4.setBackground(new java.awt.Color(255, 0, 255));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 58, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(160, 160, 160)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTabbedBulk)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTabbedBulk, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(51, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleParent(this);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPopupTranMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPopupTranMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jPopupTranMouseClicked

    private void jTextOfficerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextOfficerActionPerformed
      // TODO add your handling code here:
    }//GEN-LAST:event_jTextOfficerActionPerformed

    private void JtbClientRepayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JtbClientRepayMouseClicked
 
       
    }//GEN-LAST:event_JtbClientRepayMouseClicked

    private void textFieldRepayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldRepayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldRepayActionPerformed

    private void JTbDepositKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JTbDepositKeyPressed
       if (evt.getKeyCode()==KeyEvent.VK_LEFT){
            
            
            jTabbedBulk.setSelectedIndex(0);
            
      
         
       
        }      else if (evt.getKeyCode()==KeyEvent.VK_ENTER){
    int row= JTbDeposit.getSelectedRow();
     

 
 if(row==2){
 JTbDeposit.isRowSelected(2);
 }
 
}
    else if(evt.getKeyCode()>=97 && evt.getKeyCode()<=105 ){
   if(JTbDeposit.getModel().getValueAt(JTbDeposit.getSelectedRow(), 4).toString().equalsIgnoreCase("0")|| JTbDeposit.getValueAt(JTbDeposit.getSelectedRow(), 4).toString().contains("0.00")){
//JOptionPane.showMessageDialog(rootPane, evt.getKeyCode());
JTbDeposit.getModel().setValueAt("", JTbDeposit.getSelectedRow(), 4);

}
}
       else if(evt.getKeyCode()==KeyEvent.VK_DOWN ){
   if(JTbDeposit.getModel().getValueAt(JTbDeposit.getSelectedRow(), 4).toString().equalsIgnoreCase("")|| JTbDeposit.getValueAt(JTbDeposit.getSelectedRow(), 4).toString().isEmpty()){
//JOptionPane.showMessageDialog(rootPane, evt.getKeyCode());
JTbDeposit.getModel().setValueAt("0.00", JTbDeposit.getSelectedRow(), 4);

}
}

    }//GEN-LAST:event_JTbDepositKeyPressed

    private void JtbClientRepayKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JtbClientRepayKeyPressed
if (evt.getKeyCode()==KeyEvent.VK_RIGHT){
     jTabbedBulk.setSelectedIndex(1);
     
}
else if(evt.getKeyCode()>=97 && evt.getKeyCode()<=105 ){
   if(JtbClientRepay.getModel().getValueAt(JtbClientRepay.getSelectedRow(), 6).toString().equalsIgnoreCase("0")|| JtbClientRepay.getValueAt(JtbClientRepay.getSelectedRow(), 6).toString().contains("0.00")){
//JOptionPane.showMessageDialog(rootPane, evt.getKeyCode());
JtbClientRepay.getModel().setValueAt("", JtbClientRepay.getSelectedRow(), 6);

}
}
else if(evt.getKeyCode()==KeyEvent.VK_DOWN ){
   if(JtbClientRepay.getModel().getValueAt(JtbClientRepay.getSelectedRow(), 6).toString().equalsIgnoreCase("")|| JtbClientRepay.getValueAt(JtbClientRepay.getSelectedRow(), 6).toString().isEmpty()){
//JOptionPane.showMessageDialog(rootPane, evt.getKeyCode());
JtbClientRepay.getModel().setValueAt("0.00", JtbClientRepay.getSelectedRow(), 6);

}
}

    }//GEN-LAST:event_JtbClientRepayKeyPressed

    private void jButtonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearActionPerformed
 int i;
        for(i=0;i<JtbClientRepay.getRowCount();i++){
 
        JtbClientRepay.getModel().setValueAt(null, i, 0);
        JtbClientRepay.getModel().setValueAt(null, i, 1);
        JtbClientRepay.getModel().setValueAt(null, i, 2);
        JtbClientRepay.getModel().setValueAt(null, i, 3);
        JtbClientRepay.getModel().setValueAt(null, i, 4);
        JtbClientRepay.getModel().setValueAt(null, i, 5);
        JtbClientRepay.getModel().setValueAt(null, i, 6);
        
     
        }
        for(i=0;i<JTbDeposit.getRowCount();i++){
 
        JTbDeposit.getModel().setValueAt(null, i, 0);
        JTbDeposit.getModel().setValueAt(null, i, 1);
        JTbDeposit.getModel().setValueAt(null, i, 2);
        JTbDeposit.getModel().setValueAt(null, i, 3);
        JTbDeposit.getModel().setValueAt(null, i, 4);
       
        //lastrepcount
     
        }
        jButtonPost.setEnabled(true);
jButtonVerify.setEnabled(true);

jTextFieldSorted.setText("NO");
jTextFieldPosted.setText("NO");
     // TODO add your handling code here:
    }//GEN-LAST:event_jButtonClearActionPerformed

    private void jButtonVerifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVerifyActionPerformed
jButtonPost.setEnabled(true);
jButtonVerify.setEnabled(false);

        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonVerifyActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
     this.setVisible(false);   // TODO add your handling code here:
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
Image icon=null;
        try {
            icon = ImageIO.read(getClass().getResource("/mfbtrans/micro1.jpeg"));
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
   this.setIconImage(icon);  
   
      Global glob =new Global();
      Connection conn=glob.getConnect();
        try {
           
         String  SQL ="select * from groups" ; 
       
              Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
        ResultSet result = stmt.executeQuery(SQL);
        int i=0;
        while(result.next()){
        
     
         
          String  Group=result.getString("groupid");
         jCombogroupname.addItem(Group);
         
 
        }  
        
       SQL="Select * from company";
    ResultSet current = stmt.executeQuery(SQL);
     current.next();
     ses_date=current.getString("ses_date");
companyname=current.getString("fullname");
compshortname=current.getString("shortname");

             result.close();
            stmt.close();
            conn.close();  
            
        }
        catch(Exception e){JOptionPane.showMessageDialog(this, e.getMessage());}// TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void jTextCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextCodeActionPerformed

    private void jButtonPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPrintActionPerformed
       // TODO add your handling code here:
    }//GEN-LAST:event_jButtonPrintActionPerformed

    private void jButtonfindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonfindActionPerformed
jLabelstatus.setText("Pending");
        Calendar now=Calendar.getInstance();
String dt="22-03-2016";//ensure you change this by  dt= year+"-"+Smonth+"-"+Sday;
BigDecimal totalsvgbal=BigDecimal.ZERO,totallnbal=BigDecimal.ZERO;
String code=jTextFieldGcode.getText();

        now.getTime();
        int year=now.get(Calendar.YEAR);
        String Smonth,Sday;
        int Omonth=now.get(Calendar.MONTH);//opening as january=0 not 1
        int day=now.get(Calendar.DAY_OF_MONTH);
         int month=Omonth+1;//note month start with january=0 in java
        Smonth=month+"";
        Sday=day+"";
       if(month<10){Smonth="0"+month;}// let it appear as two digit e.g 02
        if(day<10){Sday="0"+day;}
       dt= year+"-"+Smonth+"-"+Sday;
String SQL="select l.loanID,outstandingbal,expected,loanproduct,interestPercent,c.custno,lastname+' '+firstname as name from clients c  inner join loans l on c.custno=l.custno " +
" left outer join" +
" (select * from dbo.expected) ls on l.loanid=ls.loanid" +
" where c.groupID='"+code+"' and l.status='Active'";
String query="ALTER VIEW [dbo].[Expected] AS " +
" select ls.loanid,sum(prinrepay)-prin as expected from loanschedule ls inner join  (select loanid,sum(servicedprin) as prin from loanschedule group by loanid) lo on ls.loanid=lo.loanid " +
" where date<='"+dt+"'  " +
" group by ls.loanid,prin " +
" having sum(prinrepay)>prin";
Global glob =new Global();
Connection conn = glob.getConnect();
            SimpleDateFormat sdf= new SimpleDateFormat("dd-MM-yyyy");
        try {
            now.setTime(sdf.parse(dt));
        } catch (ParseException ex) {
           JOptionPane.showMessageDialog(this, ex.getMessage());
        }
       
         
        try{
            PreparedStatement pstmt;
 pstmt=conn.prepareStatement(query);//update loan  portfolio
pstmt.executeUpdate();
  Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
            ResultSet current = stmt.executeQuery(SQL);
            
            //to eliminate empty rows
          
            DefaultTableModel tmp =new DefaultTableModel()
            {
                @Override
      public boolean isCellEditable(int row, int column) {
        //return false;
          return (column == 6) ;
                }
               
           public Component prepareRenderer(TableCellRenderer renderer,
                    int row, int col) {


                Component c = this.prepareRenderer(renderer, row, col);
                if (col == 3) {
                    Integer intValue = (Integer) getValueAt(row, col);
                    c.setForeground(getColor(intValue));
                } else {
                    c.setForeground(getForeground());
                }
                return c;
            }

            private Color getColor(int intValue) {
                Color color = null;
                if (intValue > 0) {
                    color = Color.GREEN;
                } else if (intValue < 0) {
                    color = Color.RED;
                } else {
                    color = getForeground();
                }
                return color;
            }
        };
     
            
           JtbClientRepay.setModel(tmp);
   

            
            //adding columns
         JtbClientRepay.setAutoResizeMode(JtbClientRepay.AUTO_RESIZE_OFF);
             tmp.addColumn("ClientID");
             tmp.addColumn("AccountID");
             tmp.addColumn("ClientName");
             tmp.addColumn("Product");
             tmp.addColumn("Balance");
             tmp.addColumn("Expected");
             tmp.addColumn("Amount");
           
             //setting column size
             JtbClientRepay.getColumnModel().getColumn(0).setPreferredWidth(100);
             JtbClientRepay.getColumnModel().getColumn(1).setPreferredWidth(80);
            JtbClientRepay.getColumnModel().getColumn(2).setPreferredWidth(250);
            JtbClientRepay.getColumnModel().getColumn(3).setPreferredWidth(100);
            JtbClientRepay.getColumnModel().getColumn(3).setPreferredWidth(100);
             JtbClientRepay.getColumnModel().getColumn(3).setPreferredWidth(100);
             JtbClientRepay.getColumnModel().getColumn(4).setPreferredWidth(100);
            
             
             //initialisaction
            
           
            int i=0;
         String expected="";
         while( current.next()){
          tmp.addRow(new String[i]);
          JtbClientRepay.getModel().setValueAt(current.getString("custno"),i,0);
          JtbClientRepay.getModel().setValueAt(current.getString("loanid"),i,1);
          JtbClientRepay.getModel().setValueAt(current.getString("name"),i,2);
           JtbClientRepay.getModel().setValueAt(current.getString("loanProduct"),i,3);
         expected= current.getBigDecimal("expected")+"zero";
         //JOptionPane.showMessageDialog(this, expected);
        JtbClientRepay.getModel().setValueAt(current.getBigDecimal("OutstandingBal").multiply(current.getBigDecimal("interestPercent")).setScale(2, RoundingMode.HALF_UP).negate(),i,4);
        if(expected.equalsIgnoreCase("nullzero")){
         JtbClientRepay.getModel().setValueAt("0.00",i,5);   
        }else{
         JtbClientRepay.getModel().setValueAt(current.getBigDecimal("expected").setScale(2, RoundingMode.HALF_UP),i,5);
        }
        totallnbal=totallnbal.add(current.getBigDecimal("OutstandingBal").multiply(current.getBigDecimal("interestPercent")).setScale(2, RoundingMode.HALF_UP));
                
        JtbClientRepay.getModel().setValueAt("0.00",i,6);
               
               i=i+1;
         }   
         lastrepcount=i;
          tmp.addRow(new String[i]);
           JtbClientRepay.getModel().setValueAt("Total",i,0);
          JtbClientRepay.getModel().setValueAt(totallnbal.negate(),i,4);
         
       String  SQL2="select AccountID,c.custno,ProductID,RunningBal,AccountName as name from clients c  inner join Deposit d on c.custno=d.custno where c.groupID='"+code+"' and d.status='Active'";
          DefaultTableModel tmp2 =new DefaultTableModel()
            {
                @Override
      public boolean isCellEditable(int row, int column) {
        //return false;
          return (column == 4) ;
                }
            };
           current = stmt.executeQuery(SQL2);
            JTbDeposit.setModel(tmp2);
            //adding columns
         JTbDeposit.setAutoResizeMode(JtbClientRepay.AUTO_RESIZE_OFF);
             tmp2.addColumn("ClientID");
             tmp2.addColumn("AccountID");
             tmp2.addColumn("ClientName");
             tmp2.addColumn("Description");
             tmp2.addColumn("Amount");
             
          
          
             //setting column size
            JTbDeposit.getColumnModel().getColumn(0).setPreferredWidth(100);
            JTbDeposit.getColumnModel().getColumn(1).setPreferredWidth(80);
            JTbDeposit.getColumnModel().getColumn(2).setPreferredWidth(250);
            JTbDeposit.getColumnModel().getColumn(3).setPreferredWidth(150);
             JTbDeposit.getColumnModel().getColumn(4).setPreferredWidth(100);
            
            
             //initialisaction
            
           
             i=0;
         
         while( current.next()){
          tmp2.addRow(new String[i]);
          JTbDeposit.getModel().setValueAt(current.getString("custno"),i,0);
          JTbDeposit.getModel().setValueAt(current.getString("accountid"),i,1);
               JTbDeposit.getModel().setValueAt(current.getString("name"),i,2);
               JTbDeposit.getModel().setValueAt(current.getString("ProductID"),i,3);
               JTbDeposit.getModel().setValueAt("0.00",i,4);
               depBal[i]=current.getDouble("RunningBal");
                i=i+1;
         } 
          tmp2.addRow(new String[i]);
           JTbDeposit.getModel().setValueAt("Total Deposit",i,0);
          JTbDeposit.getModel().setValueAt("0.00",i,4);
         lastdepcount=i;
}
catch(Exception e){JOptionPane.showMessageDialog(this, e.getMessage());
}         // TODO add your handling code here:
    }//GEN-LAST:event_jButtonfindActionPerformed

    private void jTextFieldGcodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldGcodeKeyPressed
if (evt.getKeyCode()==KeyEvent.VK_ENTER){
    jButtonfind.doClick();
}// TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldGcodeKeyPressed

    private void jCombogroupnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCombogroupnameActionPerformed
     jTextFieldGcode.setText(jCombogroupname.getSelectedItem().toString());
        jButtonfind.doClick();
     Global glob =new Global();
      Connection conn=glob.getConnect();
        try {
           
         String  SQL ="select * from groups where GroupID='"+jCombogroupname.getSelectedItem().toString()+"'" ; 
       
              Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
        ResultSet result = stmt.executeQuery(SQL);
        
        result.next();
        
     
         
          jTextOfficer.setText(result.getString("PrimaryofficerID"));
      
        }catch(Exception e){JOptionPane.showMessageDialog(this, e.getMessage());}  
    
     // TODO add your handling code here:
    }//GEN-LAST:event_jCombogroupnameActionPerformed

    private void JtbClientRepayKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JtbClientRepayKeyReleased
 if(evt.getKeyCode()==KeyEvent.VK_DOWN ){
   if(JtbClientRepay.getModel().getValueAt(JtbClientRepay.getSelectedRow(), 6).toString().equalsIgnoreCase("")|| JtbClientRepay.getValueAt(JtbClientRepay.getSelectedRow(), 6).toString().isEmpty()){
//JOptionPane.showMessageDialog(rootPane, evt.getKeyCode());
JtbClientRepay.getModel().setValueAt("0.00", JtbClientRepay.getSelectedRow(), 6);

}
}        
// lastdeprow  
          //   JTbDeposit.getModel().setValueAt(current.getString("ProductID"),i,3);// TODO add your handling code here:
    }//GEN-LAST:event_JtbClientRepayKeyReleased

    private void jButtonSumUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSumUpActionPerformed
 BigDecimal Totaldep=BigDecimal.ZERO,totalrep=BigDecimal.ZERO,totalExp=BigDecimal.ZERO;
 
 int n=0;
        if( JTbDeposit.isShowing()){
    for(n=0;n<JTbDeposit.getRowCount()-1;n++) {
             //taking care of empty spaces
   if(JTbDeposit.getModel().getValueAt(n, 4).toString().equalsIgnoreCase("")|| JTbDeposit.getValueAt(n, 4).toString().isEmpty()){
//JOptionPane.showMessageDialog(rootPane, evt.getKeyCode());
JTbDeposit.getModel().setValueAt("0.00",n, 4);


   }//suming deposits
        Totaldep=Totaldep.add( BigDecimal.valueOf(Double.parseDouble(JTbDeposit.getModel().getValueAt(n, 4).toString())));
    //JOptionPane.showMessageDialog(this, JTbDeposit.getModel().getValueAt(n, 4).toString());
    }
    JTbDeposit.getModel().setValueAt(Totaldep.setScale(2, RoundingMode.HALF_UP), n, 4);
    txtMan.setText(Totaldep.setScale(2, RoundingMode.HALF_UP)+"");
    
    jTextFieldTcollect.setText(BigDecimal.valueOf(Double.parseDouble(textFieldRepay.getText())+Double.parseDouble
            (txtMan.getText())).setScale(2, RoundingMode.HALF_UP)+"");
   
 }else{
       for(n=0;n<JtbClientRepay.getRowCount()-1;n++) {
           //taking care of null vales
           if(JtbClientRepay.getModel().getValueAt(n, 6).toString().equalsIgnoreCase("")|| JtbClientRepay.getValueAt(n, 6).toString().isEmpty()){
//JOptionPane.showMessageDialog(rootPane, evt.getKeyCode());
JtbClientRepay.getModel().setValueAt("0.00",n, 6);


   } // summing repayment
        totalrep=totalrep.add( BigDecimal.valueOf(Double.parseDouble(JtbClientRepay.getModel().getValueAt(n, 6).toString())));
       totalExp=totalrep.add( BigDecimal.valueOf(Double.parseDouble(JtbClientRepay.getModel().getValueAt(n, 5).toString())));

    }  
      JtbClientRepay.getModel().setValueAt(totalrep.setScale(2, RoundingMode.HALF_UP), n, 6);
      JtbClientRepay.getModel().setValueAt( totalExp.setScale(2, RoundingMode.HALF_UP), n, 5);
      textFieldRepay.setText(totalrep.setScale(2, RoundingMode.HALF_UP)+"");
        jTextFieldTcollect.setText("0");
      jTextFieldTcollect.setText(BigDecimal.valueOf(Double.parseDouble(txtMan.getText())+Double.parseDouble
            (textFieldRepay.getText())).setScale(2, RoundingMode.HALF_UP)+"");
           
        } 
      
        jButtonPost.setEnabled(true);// TODO add your handling code here:
    }//GEN-LAST:event_jButtonSumUpActionPerformed

    private void jLabel19MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel19MouseClicked
        Reports rpt =new Reports();
        rpt.setVisible(true);// TODO add your handling code here:
    }//GEN-LAST:event_jLabel19MouseClicked

    private void jButtonPostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPostActionPerformed
String msg="Are you sure you want to Post? \n After Posting you can't undo it";
        final JDialog w= new JDialog();
w.setSize(300,200);
w.setLocation(500,200);
w.setTitle("Posting Result");
w.isAlwaysOnTop();
final JOptionPane optionPane= new JOptionPane(msg);
optionPane.setMessageType(JOptionPane.QUESTION_MESSAGE);
optionPane.setOptionType(0);
optionPane.isShowing();
w.setContentPane(optionPane);
w.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
w.setModal(true);
w.getMostRecentFocusOwner();
optionPane.addPropertyChangeListener(
    new PropertyChangeListener() {
        public void propertyChange(PropertyChangeEvent e) {
            String prop = e.getPropertyName();

            if (w.isVisible() 
             && (e.getSource() == optionPane)
             && (prop.equals(JOptionPane.VALUE_PROPERTY))) {
            w.setVisible(false);
            }
        }
    
            });

w.show();      
w.pack();
int value = ((Integer)optionPane.getValue()).intValue();
if (value == JOptionPane.YES_OPTION) {
 String query1,query2,query3,query4;        
String Year,Smonth,Sday,ID="",amount="",remark="Paid",tranid="002",Product,GLcode,intGL;
 Calendar now=Calendar.getInstance();
        now.getTime();
        int year=now.get(Calendar.YEAR);
        int Omonth=now.get(Calendar.MONTH);//opening as january=0 not 1
        int day=now.get(Calendar.DAY_OF_MONTH);
         int month=Omonth+1;//note month start with january=0 in java
         Year=year+"";
        Smonth=month+"";
        Sday=day+"";
       if(month<10){Smonth="0"+month;}// let it appear as two digit e.g 02
        if(day<10){Sday="0"+day;}
        Smonth=month+"";                                      

 

PreparedStatement pstmt;




Global glob=new Global();
Connection conn=glob.getConnect();
//JOptionPane.showMessageDialog(this,studentCount);
try
{
   String tranctno="";  
      conn.setAutoCommit(false);//for transaction posting
  
for(int ii=0;ii<lastdepcount;ii++){

//generating transaction number
    Timestamp timestamp = new Timestamp(System.currentTimeMillis());    
        Random rand = new Random(timestamp.getTime());
        int Rnum=rand.nextInt(999999);
             
        int len=jCombogroupname.getSelectedItem().toString().replaceAll(" ", "").length()-1;
        int mid=len/2; 
 tranctno=Year.substring(2)+Omonth+day+Rnum+jCombogroupname.getSelectedItem().toString().replaceAll(" ", "").substring(0,mid+1);
     
   ID= JTbDeposit.getModel().getValueAt(ii,1).toString();
    Product=JTbDeposit.getModel().getValueAt(ii,3).toString();

     
     String StrQuery="select GLCode from Product where productDesc like'%"+ Product+"%'";
Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
          
            ResultSet current = stmt.executeQuery(StrQuery);
           
            current.next();
          
   GLcode=current.getString("GLCode");
   amount=JTbDeposit.getModel().getValueAt(ii,4).toString();
   if(Double.parseDouble(amount)==0.00){continue;} // do not post account with Zero deposit
   query1="update glbal set GlbCredit=GlbCredit+"+Double.parseDouble(amount)+" where CoaNbr='"+GLcode+"-"+BranchCode+"' and GlbFinyear='C'"
        + " and glbPeriod='"+ses_date.substring(5,7)+"'";
 query2="update glbal set Glbdebit=Glbdebit+"+Double.parseDouble(amount)+" where CoaNbr='"+tellerControlGl+"' and GlbFinyear='C'"
  + " and glbPeriod='"+ses_date.substring(5,7)+"'";
double amnt=Double.parseDouble(amount);

 query3="update Deposit  set RunningBal=RunningBal+"+amnt+" where AccountID='"+ID+"'";
 query4=("insert into transactn (AccountID,tranid,Amount,DebitGL,CreditGL,Runningbal,ValueDate,DateEffective,CustNO,StmtRef,BranchID,ChequeNbr,CreatedBy,transactionNbr)"
        + " values(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");


      
     
       
   
 conn.setAutoCommit(false);//for transaction posting
  
pstmt=conn.prepareStatement(query1);
pstmt.executeUpdate();

pstmt=conn.prepareStatement(query2);
pstmt.executeUpdate();
 
pstmt=conn.prepareStatement(query3);
pstmt.executeUpdate();
 
depBal[ii]=depBal[ii]+Double.parseDouble(amount);//amount is for deposit while Amount for repayment
pstmt=conn.prepareStatement(query4);
pstmt.setString(1,ID);
pstmt.setString(2,tranid);
pstmt.setString(3,amount);
pstmt.setString(4,tellerControlGl);
pstmt.setString(5,GLcode+"-"+BranchCode);
//int curbal=Integer.parseInt(bal)-Integer.parseInt(amount);
pstmt.setString(6,depBal[ii]+"");
pstmt.setString(7,ses_date);
pstmt.setString(8,ses_date);
pstmt.setString(9,JTbDeposit.getModel().getValueAt(ii,0).toString());
pstmt.setString(10,"Bulk Dep by cash");
//JOptionPane.showMessageDialog(this,jTextFieldDescription.getToolTipText());
pstmt.setString(11,JTbDeposit.getModel().getValueAt(ii,2).toString());
pstmt.setString(12,"Bulk Trans");
pstmt.setString(13,userid);
pstmt.setString(14,tranctno);
pstmt.executeUpdate();

 //JOptionPane.showMessageDialog(this,ii);
 
}

 
////////////////////////////////////////////
//for repayment                        ///////////////
/////////////////////////////////////////////////////


for(int ii=0;ii<lastrepcount;ii++){
     //JOptionPane.showMessageDialog(this,lastrepcount);
String loanNum = JtbClientRepay.getModel().getValueAt(ii,1).toString();
String StrQuery="select GLCode,intGL from Product where productid like'%"+ JtbClientRepay.getModel().getValueAt(ii,3)+"%'";
      
   
 
ID= JtbClientRepay.getModel().getValueAt(ii,1).toString();
BigDecimal Amount=BigDecimal.valueOf(Double.parseDouble(JtbClientRepay.getModel().getValueAt(ii,6)
.toString())).setScale(2, RoundingMode.HALF_UP);
if(Double.parseDouble(Amount.toString())==0.00){continue;}
// do not post account with Zero Repayment

String SQL="select * from loanschedule where status='not serviced' and count<>'0' and loanID='"+loanNum+"' order by count";
Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
             ResultSet current = stmt.executeQuery(StrQuery);
            current.next();
            GLcode=current.getString("GLCode");
            intGL=current.getString("intGL");
            current = stmt.executeQuery(SQL);
            current.next();
        repaycount=current.getInt("count");
  double       prinRepay=current.getDouble("prinrepay");
  double       interest=current.getDouble("intrepay");
  double      Repaywithint=current.getDouble("repaywithint");  
  double      pamount=prinRepay;
  double     intamount=current.getDouble("intRepay");
  BigDecimal intRate=BigDecimal.valueOf(Repaywithint/pamount).setScale(5, RoundingMode.HALF_UP);
 double bal2=Double.parseDouble(JtbClientRepay.getModel().getValueAt(ii,4).toString().replace(",", ""))/intRate.doubleValue();//RunningBal is with interest.therefore divide to get principal

  current.close();
  //calculate for more than one instalment
  //note variable amount contains the value entered by the user
     BigDecimal intrt= BigDecimal.valueOf(interest/Repaywithint*Amount.doubleValue()).setScale(2, RoundingMode.HALF_UP);
        BigDecimal prin= Amount.subtract(intrt);

//get the number of loanschedule to be serviced
BigDecimal hans=null;
BigDecimal amt2 =Amount;


BigDecimal amt = BigDecimal.valueOf(Repaywithint);

hans=amt2.divide(amt, 2, RoundingMode.UP);

BigDecimal remain=amt2.divide(amt, 1, RoundingMode.UP);
//if(hans.subtract(remain).)){halfrepay=true;}


query1="update glbal set GlbCredit=GlbCredit+"+prin.doubleValue()+" where CoaNbr='"+GLcode+"-"+BranchCode+"' and GlbFinyear='C'"
        + " and glbPeriod='"+ses_date.substring(5,7)+"'";
String query1b="update glbal set GlbCredit=GlbCredit+"+intamount+" where CoaNbr='"+intGL+"-"+BranchCode+"' and GlbFinyear='C'"
        + " and glbPeriod='"+ses_date.substring(5,7)+"'";
 query2="update glbal set Glbdebit=Glbdebit+"+Amount.doubleValue()+" where CoaNbr='"+tellerControlGl+"' and GlbFinyear='C'"
  + " and glbPeriod='"+ses_date.substring(5,7)+"'";

  //convert amount to negative because you are reducing as below:
Double amnt=prin.doubleValue();
  
 query3="update loans set  OutstandingBal=OutstandingBal+"+amnt+" where loanID='"+ID+"'";
 query4=("insert into transactn (AccountID,tranid,Amount,DebitGL,CreditGL,Runningbal,ValueDate,DateEffective,custNo,StmtRef,BranchID,ChequeNbr,CreatedBy,transactionNbr)"
        + " values(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
 //JOptionPane.showMessageDialog(this,amnt+" "+query3);
String query5="update loanschedule set status='Serviced' where count='"+ repaycount+"'";
query1b="update glbal set GlbCredit=GlbCredit+"+intamount+" where CoaNbr='"+intGL+"' and GlbFinyear='C'"
        + " and glbPeriod='"+ses_date.substring(5,7)+"'";

  

 
 
   Double ovapaid=amnt-bal2;
   //check for full or partial payment or over payment
   if(amnt>bal2){//not e Amount is the total amount entered on screen
      JOptionPane.showMessageDialog(this,"Transaction cancelled for: \n"+JtbClientRepay.getModel().getValueAt(ii,2).toString()+" ("+JtbClientRepay.getModel().getValueAt(ii,0).toString() +" ) \n"+"This Account cannot be Overpaid by "+ovapaid);
   } 
   else{
       if(amnt==bal2){
        remark="Serviced";   
       }else{remark="Partially Serviced"; }
       
       
          
 
       
pstmt=conn.prepareStatement(query1);//update loan  portfolio
pstmt.executeUpdate();
//JOptionPane.showMessageDialog(this, query1);
pstmt=conn.prepareStatement(query1b);//update interest income
pstmt.executeUpdate();

pstmt=conn.prepareStatement(query2);
pstmt.executeUpdate();
//JOptionPane.showMessageDialog(this, query3);
pstmt=conn.prepareStatement(query3);//update loan accounts
pstmt.executeUpdate();
//JOptionPane.showMessageDialog(this,"ok");

pstmt=conn.prepareStatement(query4);
pstmt.setString(1,ID);
pstmt.setString(2,"001");
pstmt.setString(3,Amount+"");
pstmt.setString(4,tellerControlGl);
pstmt.setString(5,GLcode+"-"+BranchCode);
double curbal=bal2-Amount.doubleValue()+intamount;
pstmt.setString(6,curbal+"");
pstmt.setString(7,ses_date);
pstmt.setString(8,ses_date);
pstmt.setString(9,JtbClientRepay.getModel().getValueAt(ii,0).toString());
pstmt.setString(10,"Bulk Repayment by cash");
//JOptionPane.showMessageDialog(this,jTextFieldDescription.getToolTipText());
pstmt.setString(11,JtbClientRepay.getModel().getValueAt(ii,2).toString());
pstmt.setString(12,"Cash Payment");
pstmt.setString(13,userid);
pstmt.setString(14,tranctno);
pstmt.executeUpdate();
//JOptionPane.showMessageDialog(this, query4);



double AmountD=Double.parseDouble(Amount.toString());
 query5="";
String qq="";
//JOptionPane.showMessageDialog(this,repaycount);
 double RepayIntHist=0.00;        
while(AmountD>0 ){
 String query55="select * from loanschedule where remark='P' and loanID='"+ID+"'";
 stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
             current = stmt.executeQuery(query55);
        current.next();
        
        //check for presence of partial or none serviced condition
Double PplusInt,PrinNonserv,IntNonserv;
int count;
if(current.getString("status").equalsIgnoreCase("Partial")){
    PplusInt=current.getDouble("PrinRepay")-current.getDouble("servicedPrin")+current.getDouble("intRepay")-current.getDouble("servicedint");
PrinNonserv=current.getDouble("PrinRepay")-current.getDouble("servicedPrin");
IntNonserv=current.getDouble("intRepay")-current.getDouble("servicedInt");
count=current.getInt("count");//remain in thesame schedule,do not go next
}
else{PplusInt=current.getDouble("PrinRepay")+current.getDouble("intRepay");
PrinNonserv=current.getDouble("PrinRepay");
IntNonserv=current.getDouble("intRepay");
count=current.getInt("count");
}
if(AmountD>=PplusInt){
  query5="update loanschedule set status='Serviced',servicedprin=servicedprin+'"+PrinNonserv+"',"
        + "ServicedInt=ServicedInt+'"+IntNonserv+"',remark='D' where count='"+count +"'"
        + " and loanID='"+ID+"'";
  RepayIntHist=RepayIntHist+IntNonserv;
  //check for last schedule item to avoid errors of updating unexisting row
  if(current.getDouble("RunningBal")>(current.getDouble("RepayWithInt")+1)){
 qq="update loanschedule set remark='P' where count='"+(current.getInt("count")+1)+"'";
                        }
  else{
       qq="update loanschedule set remark='P' where count='"+(current.getInt("count"))+"'";

  }
   AmountD=AmountD-PplusInt;
   
 //JOptionPane.showMessageDialog(this, "Amount= "+AmountD); 
}
else if (AmountD<PplusInt){
    if(AmountD>IntNonserv){
        double AmountR=AmountD-IntNonserv;
       query5="update loanschedule set status='Partial',servicedprin=servicedprin+'"+AmountR+"',"
        + "ServicedInt=ServicedInt+'"+IntNonserv+"',remark='P' where count='"+ (current.getInt("count"))+"'"
        + " and loanID='"+ID+"'";
        
   AmountD=AmountD-PplusInt;
   RepayIntHist=RepayIntHist+IntNonserv;
    //JOptionPane.showMessageDialog(this, "Amount= "+AmountD); 
          }
   else{  
      RepayIntHist=RepayIntHist+AmountD;  
    query5="update loanschedule set status='Partial',"
        + "ServicedInt=ServicedInt+'"+AmountD+"',remark='P' where count='"+ (current.getInt("count")) +"'"
        + " and loanID='"+ID+"'";
            
 //JOptionPane.showMessageDialog(this, "Amount= "+AmountD); 
    AmountD=0;
    repaycount=repaycount+1;
    }
}

pstmt=conn.prepareStatement(query5);
pstmt.executeUpdate();
   pstmt=conn.prepareStatement(qq);
pstmt.executeUpdate();
      
}
//updating for interest
pstmt=conn.prepareStatement(query4);
pstmt.setString(1,ID);
pstmt.setString(2,"011");
pstmt.setDouble(3,RepayIntHist);
pstmt.setString(4,GLcode+"-"+BranchCode);
pstmt.setString(5,intGL+"-"+BranchCode);
pstmt.setString(6,curbal+"");
pstmt.setString(7,ses_date);
pstmt.setString(8,ses_date);
pstmt.setString(9,ID);
pstmt.setString(10,"Interest on Repayment");
//JOptionPane.showMessageDialog(this,jTextFieldDescription.getToolTipText());
pstmt.setString(11,JtbClientRepay.getModel().getValueAt(ii,2).toString());
pstmt.setString(12,"Cash Payment");
pstmt.setString(13,userid);
pstmt.setString(14,tranctno);
pstmt.executeUpdate();

conn.commit();
         

   //end here of individual acc
   
       


}
}
    

conn.commit();
JOptionPane.showMessageDialog(this, "Transactions Saved,Boss");
jTextFieldPosted.setText("YES");
jButtonPost.setEnabled(false);
textFieldRepay.setText("0.00");
txtMan.setText("0.00");
jTextFieldTcollect.setText("0.00");
jLabelstatus.setText("Posted");

}

    catch(Exception e){
try{JOptionPane.showMessageDialog(this, e.getMessage());
conn.rollback();
}catch(SQLException sqx){
JOptionPane.showMessageDialog(this,"Roll back failed: "+sqx.getMessage());
}
}
   
}

 else if (value == JOptionPane.NO_OPTION) {
    
}
               
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonPostActionPerformed

    private void jButtonBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseActionPerformed
       
        
            DefaultTableModel tmp =new DefaultTableModel()
            {
                @Override
      public boolean isCellEditable(int row, int column) {
        //return false;
          return (column == 6) ;
                }
               
           public Component prepareRenderer(TableCellRenderer renderer,
                    int row, int col) {


                Component c = this.prepareRenderer(renderer, row, col);
                if (col == 3) {
                    Integer intValue = (Integer) getValueAt(row, col);
                    c.setForeground(getColor(intValue));
                } else {
                    c.setForeground(getForeground());
                }
                return c;
            }

            private Color getColor(int intValue) {
                Color color = null;
                if (intValue > 0) {
                    color = Color.GREEN;
                } else if (intValue < 0) {
                    color = Color.RED;
                } else {
                    color = getForeground();
                }
                return color;
            }
        };
     
            
           JtbClientRepay.setModel(tmp);
   

            
            //adding columns
         JtbClientRepay.setAutoResizeMode(JtbClientRepay.AUTO_RESIZE_OFF);
             tmp.addColumn("ClientID");
             tmp.addColumn("AccountID");
             tmp.addColumn("ClientName");
             tmp.addColumn("Product");
             tmp.addColumn("Balance");
             tmp.addColumn("Expected");
             tmp.addColumn("Amount");
           
             //setting column size
             JtbClientRepay.getColumnModel().getColumn(0).setPreferredWidth(100);
             JtbClientRepay.getColumnModel().getColumn(1).setPreferredWidth(80);
            JtbClientRepay.getColumnModel().getColumn(2).setPreferredWidth(250);
            JtbClientRepay.getColumnModel().getColumn(3).setPreferredWidth(100);
            JtbClientRepay.getColumnModel().getColumn(3).setPreferredWidth(100);
             JtbClientRepay.getColumnModel().getColumn(3).setPreferredWidth(100);
             JtbClientRepay.getColumnModel().getColumn(4).setPreferredWidth(100);
        
  DefaultTableModel tmp2 =new DefaultTableModel()
            {
                @Override
      public boolean isCellEditable(int row, int column) {
        //return false;
          return (column == 4) ;
                }
            };
         
            JTbDeposit.setModel(tmp2);
            //adding columns
         JTbDeposit.setAutoResizeMode(JTbDeposit.AUTO_RESIZE_OFF);
             tmp2.addColumn("ClientID");
             tmp2.addColumn("AccountID");
             tmp2.addColumn("ClientName");
             tmp2.addColumn("Description");
             tmp2.addColumn("Amount");
             
          
          
             //setting column size
            JTbDeposit.getColumnModel().getColumn(0).setPreferredWidth(100);
            JTbDeposit.getColumnModel().getColumn(1).setPreferredWidth(80);
            JTbDeposit.getColumnModel().getColumn(2).setPreferredWidth(250);
            JTbDeposit.getColumnModel().getColumn(3).setPreferredWidth(150);
             JTbDeposit.getColumnModel().getColumn(4).setPreferredWidth(100);
            
 

        Global glob = new Global();
        String excelFile = "";

        FileDialog fd = new FileDialog(this,"Import Salary Excel File in .XLSX Format",FileDialog.LOAD); // begin of if stmt
        fd.setFile("*.xlsx");
        fd.setVisible(true);

        fd.setDirectory("C:\\");

            String path = fd.getDirectory() + fd.getFile();

            String filename =fd.getFiles()[0].toString();
            dir=path.replace(fd.getName(),"");
            //JOptionPane.showMessageDialog(this,filename);
            if (filename == null) {
                JOptionPane.showMessageDialog(this,"You cancelled the File Dialog");
            }
            else
            {
                excelFile=filename;
                F_Path=filename;
                File f = new File(excelFile);
                  File folder= new File(dir2+"\\Marketer Reports");
                if(!folder.exists() ){folder.mkdir();}

            }

            File xlsFile = new File(excelFile);

            Workbook workbook;

            try {

                workbook = loadSpreadSheet(xlsFile);

                readSpreadSheet(workbook);

                // JOptionPane.showMessageDialog(this,"DONE");
            } catch (FileNotFoundException e) {

                JOptionPane.showMessageDialog(this,"Excel File (or) PDF File is already opened. Please close the file");

                //System.exit(1);

            } catch (Exception e) {

                JOptionPane.showMessageDialog(this,  e.getMessage());

            }

            //// /////////////////importing from excel sheet

            //JOptionPane.showMessageDialog(this,filename);

            FileInputStream fis = null;
            try {
                //this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                fis = new FileInputStream(excelFile);

                // Using XSSF for xlsx format, for xls use HSSF
                workbook = new XSSFWorkbook(fis);

                int numberOfSheets = workbook.getNumberOfSheets();
                maxsheet= numberOfSheets;
                //looping over each workbook sheet
                //for (int i = 0; i < numberOfSheets; i++) {
                    //for (int i = 0; i <= 0; i++) {
                        Sheet sheet = workbook.getSheetAt(0);
                        Iterator rowIterator = sheet.iterator();
                        int r=0,c=0;
                        boolean end=false;

                                 c=0; // start from the beginning of the cells
                        rowIterator.next();//For table header
                        //iterating over each row
                        while (rowIterator.hasNext()) {
                          
                           
                             
                            Row row = (Row) rowIterator.next();
                            Iterator cellIterator = row.cellIterator();

                            //Iterating over each cell (column wise)  in a particular row.
                            while (cellIterator.hasNext()) {
                          
                                Cell cell =(Cell) cellIterator.next();
                                CellType type = cell.getCellTypeEnum();
                              
                           
                                //Cell with index 1 contains serial number
                              //JOptionPane.showMessageDialog(rootPane,String.valueOf(String.valueOf(row.getCell(5).getNumericCellValue())));
                            if (cell.getColumnIndex() == 2  && row.getCell(5).getNumericCellValue()>0 ) {
                                       tmp2.addRow(new String[r]);
                                       
                                    if(checkNumerictype(type.toString())){
                                        JTbDeposit.getModel().setValueAt(cell.getNumericCellValue(), r, 0);
                                    }else{
                                       
                                        JTbDeposit.getModel().setValueAt(cell.getStringCellValue(), r, 0);
                                    }
                                   r=r+1; 
                                }
                                //Cell with index 2 contains Names

                                else if (cell.getColumnIndex() == 3  && row.getCell(5).getNumericCellValue()>0) {
                                     //tmp2.addRow(new String[r]);
                                    //JOptionPane.showMessageDialog(rootPane,String.valueOf( row.getCell(3).getNumericCellValue()));
                                    if(checkNumerictype(type.toString())){
                                        JTbDeposit.getModel().setValueAt( new BigDecimal(cell.getNumericCellValue()), r-1, 2);
                                    }else{
                                       JTbDeposit.getModel().setValueAt( cell.getStringCellValue(), r-1, 2);
                                    }
                                
                                }
                                    else if (cell.getColumnIndex() == 4  && row.getCell(5).getNumericCellValue()>0) {
                                     //tmp2.addRow(new String[r]);
                                    //JOptionPane.showMessageDialog(rootPane,String.valueOf( row.getCell(3).getNumericCellValue()));
                                    if(checkNumerictype(type.toString())){
                                        JTbDeposit.getModel().setValueAt( new BigDecimal(cell.getNumericCellValue()), r-1, 1);
                                    }else{
                                       JTbDeposit.getModel().setValueAt( cell.getStringCellValue(), r-1, 1);
                                    }
                                
                                }
                                //Cell with index 3 contains marks in English
                                else if (cell.getColumnIndex() == 5 && row.getCell(5).getNumericCellValue()>0) {
                                      //tmp2.addRow(new String[r]);
                                    if(checkNumerictype(type.toString())){
                                         JTbDeposit.getModel().setValueAt(String.valueOf(cell.getNumericCellValue()), r-1, 4);
                                    }else{
                                         JTbDeposit.getModel().setValueAt(cell.getStringCellValue(), r-1, 4);
                                    }
                                     
                                    
                                }
                               //importing for loans
                               //JOptionPane.showMessageDialog(rootPane, row.getCell(13).getNumericCellValue());
                               if (cell.getColumnIndex() == 2  && row.getCell(14).getNumericCellValue()>0 ) {
                                 tmp.addRow(new String[c]); // increment only at a new customer number
                                    if(checkNumerictype(type.toString())){
                                         JtbClientRepay.getModel().setValueAt(String.valueOf(cell.getNumericCellValue()), c, 0);
                                    }else{
                                         JtbClientRepay.getModel().setValueAt(cell.getStringCellValue(), c, 0);
                                    }  
                                    c=c+1;
                               }
                               
                               else if (cell.getColumnIndex() == 6  && row.getCell(14).getNumericCellValue()>0 ) {
                                 
                                    if(checkNumerictype(type.toString())){
                                         JtbClientRepay.getModel().setValueAt(String.valueOf(cell.getNumericCellValue()), c-1, 1);
                                    }else{
                                         JtbClientRepay.getModel().setValueAt(cell.getStringCellValue(), c-1, 1);
                                    }  
                                    
                               } 
                               else if (cell.getColumnIndex() == 3  && row.getCell(14).getNumericCellValue()>0 ) {
                                
                                    if(checkNumerictype(type.toString())){
                                         JtbClientRepay.getModel().setValueAt(String.valueOf(cell.getNumericCellValue()), c-1, 2);
                                    }else{
                                         JtbClientRepay.getModel().setValueAt(cell.getStringCellValue(), c-1, 2);
                                    }  
                                  
                               } 
                             else if (cell.getColumnIndex() == 14  && row.getCell(14).getNumericCellValue()>0 ) {
                                
                                    if(checkNumerictype(type.toString())){
                                         JtbClientRepay.getModel().setValueAt(String.valueOf(cell.getNumericCellValue()), c-1, 6);
                                    }else{
                                         JtbClientRepay.getModel().setValueAt(cell.getStringCellValue(), c-1, 6);
                                    }  
                                  
                               }
                               else if (cell.getColumnIndex() == 8  && row.getCell(14).getNumericCellValue()>0 ) {
                                
                                    if(checkNumerictype(type.toString())){
                                         JtbClientRepay.getModel().setValueAt(String.valueOf(cell.getNumericCellValue()), c-1, 4);
                                    }else{
                                         JtbClientRepay.getModel().setValueAt(cell.getStringCellValue(), c-1, 4);
                                    }  
                                  
                               }
                               else if (cell.getColumnIndex() == 13  && row.getCell(14).getNumericCellValue()>0 ) {
                                
                                    if(checkNumerictype(type.toString())){
                                         JtbClientRepay.getModel().setValueAt(String.valueOf(cell.getNumericCellValue()), c-1, 5);
                                    }else{
                                         JtbClientRepay.getModel().setValueAt(cell.getStringCellValue(), c-1, 5);
                                    }  
                                  
                               } 
                                else if (cell.getColumnIndex() == 7  && row.getCell(14).getNumericCellValue()>0 ) {
                                
                                    if(checkNumerictype(type.toString())){
                                         JtbClientRepay.getModel().setValueAt(String.valueOf(cell.getNumericCellValue()), c-1, 3);
                                    }else{
                                         JtbClientRepay.getModel().setValueAt(cell.getStringCellValue(), c-1, 3);
                                    }  
                                  
                               }
                            }
                            //end iterating a row, add all the elements of a row in list
                           //r=r+1; 
                           
                            salcount=r;
                        }
                     
           JTbDeposit.getModel().setValueAt("Total Deposit",r-1,0);
          //JTbDeposit.getModel().setValueAt("0.00",r,4);
             
           JtbClientRepay.getModel().setValueAt("Total",c-1,0);
          //JtbClientRepay.getModel().setValueAt("",c,4);
        
                       lastdepcount=c-1;
                       lastrepcount=r-1;

                    fis.close();
                    //enable to buttons
                    // jButtonverify.setEnabled(true);
                    //jButtonsheet.setEnabled(true);
                    String SQL="";
                    Connection connect=glob.getConnect();
                    for(int k=0;k<salcount;k++){
                        //search for account numbers
                       
                            String s="select accountid  from deposit where custno='"+ JTbDeposit.getModel().getValueAt(k, 0).toString()+"'";
                            
                                Statement stmt = connect.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
                                ResultSet cc = stmt.executeQuery(s);
                                if(cc.next()){  
                                JTbDeposit.getModel().setValueAt(cc.getString("accountid"), k, 1);
                                JTbDeposit.getModel().setValueAt("Regular Savings", k, 3);
                                
                                              }
                              

                    }
                    this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                    connect.close();
                } catch (Exception e) {
                JOptionPane.showMessageDialog(this,e.getMessage());    
                } 
                              
                this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                jButtonSumUp.setEnabled(true);
    }//GEN-LAST:event_jButtonBrowseActionPerformed

    private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_formKeyTyped

    private void JTbDepositKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JTbDepositKeyReleased
         // TODO add your handling code here:
    }//GEN-LAST:event_JTbDepositKeyReleased

    private void JTbDepositKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JTbDepositKeyTyped

    }//GEN-LAST:event_JTbDepositKeyTyped

    private void JTbDepositFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_JTbDepositFocusLost

    }//GEN-LAST:event_JTbDepositFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BulkEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BulkEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BulkEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BulkEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BulkEntry().setVisible(true);
                
                
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable JTbDeposit;
    private javax.swing.JTable JtbClientRepay;
    private javax.swing.JButton jButtonBrowse;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonClear;
    private javax.swing.JButton jButtonPost;
    private javax.swing.JButton jButtonPrint;
    private javax.swing.JButton jButtonSumUp;
    private javax.swing.JButton jButtonVerify;
    private javax.swing.JButton jButtonfind;
    private javax.swing.JComboBox jCombogroupname;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabelstatus;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPopupMenu jPopupTran;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedBulk;
    private javax.swing.JTextField jTextCode;
    private javax.swing.JTextField jTextFieldGcode;
    private javax.swing.JTextField jTextFieldPosted;
    private javax.swing.JTextField jTextFieldSorted;
    private javax.swing.JTextField jTextFieldTcollect;
    private javax.swing.JTextField jTextOfficer;
    private javax.swing.JLabel jcount;
    private java.awt.Label label10;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private java.awt.Label label7;
    private java.awt.Label label8;
    private java.awt.TextField textFieldRepay;
    private java.awt.TextField txtMan;
    // End of variables declaration//GEN-END:variables
int lastdepcount,lastrepcount;
double[]  depBal=new double[200];
int repaycount;

String userid;
String tellerControlGl;
String BranchCode;
String ses_date,companyname,compshortname;
int salcount , maxsheet;
String dir,dir2;
//excel import methods and variables
String F_Path;
String dtt;
static int numberOfColumns;
Clientnameonly search=new Clientnameonly();
 public boolean checkNumerictype(String type ){
        boolean numeric;
        if(type.equalsIgnoreCase("Numeric")||type.equalsIgnoreCase("Formula")){numeric=true;}
        else 
        {numeric=false;}
      return numeric;     
  }
private static Workbook loadSpreadSheet(File xlsFile) throws Exception {

                        Workbook workbook = null;

 

                        String ext = getFileExtension(xlsFile.getName());

                        if (ext.equalsIgnoreCase("xlsx")) {

                                    OPCPackage pkg = OPCPackage.open(xlsFile.getAbsolutePath());

                                    workbook = new XSSFWorkbook(pkg);

                                    pkg.close();

                        } else if (ext.equalsIgnoreCase("xls")) {

                                    InputStream xlsFIS = new FileInputStream(xlsFile);

                                    workbook = new HSSFWorkbook(xlsFIS);

                                    xlsFIS.close();

                        } else {

                                    throw new Exception("FILE EXTENSION NOT RECOGNIZED");

                        }

                        return workbook;

            }

 private static String getFileExtension(String fileName) {

                        String ext = "";

                        int mid = fileName.lastIndexOf(".");

                        ext = fileName.substring(mid + 1, fileName.length());

                       // System.out.println("File Extension --" + ext);

                        return ext;

            }
 private  void readSpreadSheet(Workbook workbook) throws IOException,

                                    DocumentException {

 

                        Document document = new Document();
 // JOptionPane.showMessageDialog(null, dir);
                      
                        PdfWriter.getInstance(document, new FileOutputStream(jTextFieldGcode.getText()+"@"+dtt+".pdf"));

                        document.open();

                        

                       // addTitlePage(document);

                           

                        Anchor anchor = new Anchor("OHAFIA MICROFINANCE BANK PLC");

                        anchor.setName("DAILY MARKETERS REPORT");

 

                        // Second parameter is the number of the chapter

                        Chapter catPart = new Chapter(new Paragraph(anchor), 1);

 

                        Paragraph subPara = new Paragraph("DAILY MARKETERS REPORT");

                        Section subCatPart = catPart.addSection(subPara);

                        addEmptyLine(subPara, 5);

 ///////////////////Setting the worksheet

                        Sheet sheet = workbook.getSheetAt(0);

                       

                        // Iterate through each rows from first sheet

                        Iterator<Row> rowIterator = sheet.iterator();

 

                        int temp = 0;

                        boolean flag = true;

                        PdfPTable table = null;

                       

                        while (rowIterator.hasNext()) {

                                    Row row = rowIterator.next();

                                    int cellNumber = 0;

 

                                    if (flag) {

                                                table = new PdfPTable(row.getLastCellNum());

                                                flag = false;

                                    }

                                   

                                    // For each row, iterate through each columns

                                    Iterator<Cell> cellIterator = row.cellIterator();

                                    while (cellIterator.hasNext()) {

                                                Cell cell = cellIterator.next();

                                   

                                                switch (cell.getCellType()) {  

                                                case STRING:
                                                              
                                                            if (temp == 0) {                                 
                                                                         
                                                                        numberOfColumns = row.getLastCellNum();

                                                                        PdfPCell c1 = new PdfPCell(new Phrase(

                                                                                                cell.getStringCellValue()));

                                                                        c1.setHorizontalAlignment(Element.ALIGN_CENTER);

                                                                        table.addCell(c1);

                                                                        table.setHeaderRows(1);

                                                          

                                                            }else{

                                                                        cellNumber =checkEmptyCellAndAddCellContentToPDFTable(cellNumber,cell,table);

                                                            }                                                         

                                                            cellNumber++;

                                                            break;

                                                           

                                                case NUMERIC:
                                                            //if(cell.getNumericCellValue()>0){
                                                            cellNumber =checkEmptyCellAndAddCellContentToPDFTable(cellNumber,cell,table);

                                                            cellNumber++;

                                                            break;
                                                            //}

                                                }                     

                                    }

                                    temp = 1;

                                    if(numberOfColumns != cellNumber){

                                                for(int i=0;i<(numberOfColumns-cellNumber);i++){

                                                            table.addCell(" ");

                                                }

                                    }

                        }

                        subCatPart.add(table);

                        // Now add all this to the document

                        document.add(catPart);

                        document.close();
                        
            }


private static void addEmptyLine(Paragraph paragraph, int number) {

                        for (int i = 0; i < number; i++) {

                                    paragraph.add(new Paragraph(" "));

                        }

            }
 private static int checkEmptyCellAndAddCellContentToPDFTable(int cellNumber, Cell cell, PdfPTable table) {
                       
                        if (cellNumber == cell.getColumnIndex()) {

                                    if(cell.getCellType() == cell.getCellType().NUMERIC){
                                        

                                                table.addCell(Double.toString(cell.getNumericCellValue()));
                                                    
                                    }

                                    if(cell.getCellType() == cell.getCellType().STRING){

                                                table.addCell(cell.getStringCellValue());

                                    }

                       

                        } else {

                                    while( cellNumber < cell.getColumnIndex()) {

                                                 

                                                            table.addCell(" ");

                                                            cellNumber++;

                                               

                                    }

                                    if (cellNumber == cell.getColumnIndex()) {

                                                if(cell.getCellType() == cell.getCellType().NUMERIC){
                                                          
                                                            table.addCell(Double.toString(cell.getNumericCellValue()));
                                                         

                                                }

                                                if(cell.getCellType() == cell.getCellType().STRING){

                                                            table.addCell(cell.getStringCellValue());

                                                }

                                               

                                    }

                                    cellNumber = cell.getColumnIndex();

                        }         

                       

                        return cellNumber;

            }
 


}

