/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package mfbtrans;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import static java.awt.print.Printable.NO_SUCH_PAGE;
import static java.awt.print.Printable.PAGE_EXISTS;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.Date;
import java.util.Locale;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;

/**
 *
 * @author Emmanuel
 */
public class CashBookDaily extends javax.swing.JFrame implements Printable{
@Override
      public int print(Graphics g, PageFormat pf, int page) throws PrinterException { 
        if (page>0){
            return NO_SUCH_PAGE;
        }  
         Graphics2D g2d=(Graphics2D)g;
        int x=(int)pf.getImageableX();
        int y=(int)pf.getImageableY();
        g2d.scale(0.8, 0.8);
        g2d.translate(x, y);
     jPanelCash.paintAll(g);//does the actual printing
         return PAGE_EXISTS;
    }
    /**
     * Creates new form TrialBalance
     */
    public CashBookDaily() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelCash = new javax.swing.JPanel();
        jLabeltitle = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabelDate = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCashbalance = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jButtonPrint = new javax.swing.JButton();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jButtonPrint1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("CASH BOOK DAILY");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanelCash.setBackground(new java.awt.Color(255, 255, 255));

        jLabeltitle.setBackground(new java.awt.Color(0, 51, 255));
        jLabeltitle.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabeltitle.setForeground(new java.awt.Color(102, 0, 255));
        jLabeltitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabeltitle.setText("                                                   Bridge To Wealth Cash Balance");

        jLabel1.setForeground(new java.awt.Color(204, 0, 204));
        jLabel1.setText("CASHBOOK  AS AT");

        jLabelDate.setForeground(new java.awt.Color(204, 0, 204));
        jLabelDate.setText("TOTAL CASH COUNT  AS AT");

        jTableCashbalance.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "RECEIPT", "PAYMENT"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableCashbalance.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        jTableCashbalance.setAutoscrolls(false);
        jTableCashbalance.setCellSelectionEnabled(true);
        jTableCashbalance.setGridColor(new java.awt.Color(255, 0, 255));
        jTableCashbalance.setShowHorizontalLines(isEnabled());
        jScrollPane1.setViewportView(jTableCashbalance);
        jTableCashbalance.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        jLabel3.setForeground(new java.awt.Color(204, 0, 204));
        jLabel3.setText("___________________________");

        jLabel4.setForeground(new java.awt.Color(204, 0, 204));
        jLabel4.setText("___________________________");

        jLabel5.setForeground(new java.awt.Color(51, 51, 51));
        jLabel5.setText("                  MIS STAFF");

        jLabel6.setForeground(new java.awt.Color(51, 51, 51));
        jLabel6.setText("         MONITORING STAFF");

        jLabel7.setForeground(new java.awt.Color(204, 0, 204));
        jLabel7.setText("___________________________");

        jLabel8.setForeground(new java.awt.Color(51, 51, 51));
        jLabel8.setText("           BRANCH MANAGER ");

        javax.swing.GroupLayout jPanelCashLayout = new javax.swing.GroupLayout(jPanelCash);
        jPanelCash.setLayout(jPanelCashLayout);
        jPanelCashLayout.setHorizontalGroup(
            jPanelCashLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCashLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jPanelCashLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelCashLayout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelCashLayout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelCashLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(77, 77, 77))
            .addGroup(jPanelCashLayout.createSequentialGroup()
                .addGroup(jPanelCashLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelCashLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabeltitle, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelCashLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jLabelDate))
                    .addGroup(jPanelCashLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 684, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelCashLayout.setVerticalGroup(
            jPanelCashLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCashLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabeltitle, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(jPanelCashLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDate, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanelCashLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelCashLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelCashLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
        );

        jButtonPrint.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButtonPrint.setForeground(new java.awt.Color(0, 0, 255));
        jButtonPrint.setText("Print");
        jButtonPrint.setBorder(null);
        jButtonPrint.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPrintActionPerformed(evt);
            }
        });

        jDateChooser1.setDateFormatString("dd-MM-yyyy");

        jButtonPrint1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButtonPrint1.setForeground(new java.awt.Color(102, 102, 102));
        jButtonPrint1.setText("DISPLAY");
        jButtonPrint1.setBorder(null);
        jButtonPrint1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonPrint1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPrint1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelCash, javax.swing.GroupLayout.PREFERRED_SIZE, 701, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonPrint1))
                        .addContainerGap(60, Short.MAX_VALUE))
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jButtonPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonPrint1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanelCash, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
Image icon=null;
        try {
            icon = ImageIO.read(getClass().getResource("/mfbtrans/micro1.jpeg"));
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
   this.setIconImage(icon);
        Date cdate= new Date();
        jDateChooser1.setDate(cdate);
        jLabelDate.setText(ses_date.substring(0,10));
 
 String qCasha="select sum(amount) Credit from Transactn " +
"where  CreditGL like'11102-%' and valueDate<='"+ses_date+"'";
      String qCashb="select sum(amount)debit from Transactn " +
"where debitGL like'11102-%' and valueDate<='"+ses_date+"'";
String query1="select Sum(Amount) Amount,TranID,isnull(b.productid,'GL') productid,CreditGL,DebitGL from Transactn a left outer join (select loanid accountid,loanproduct productid from Loans union select productid,AccountID from Deposit) b" +
" on a.AccountID=b.accountid " +
" where valuedate='"+ses_date+"'" +
" group by TranID,b.productid,CreditGL,DebitGL ";

   BigDecimal deposit=BigDecimal.ZERO;//for deposit amount
   BigDecimal repayment=BigDecimal.ZERO;//for repayment Amount
   BigDecimal disbursement=BigDecimal.ZERO;//for disbursement Amount
   BigDecimal savingswithdr=BigDecimal.ZERO;//for  savingsWithdr Amount
   BigDecimal expenses=BigDecimal.ZERO;//for expenses Amount
   BigDecimal income=BigDecimal.ZERO;//for income Amount
   BigDecimal bankdeposit=BigDecimal.ZERO;//for bankdeposit Amount
   BigDecimal bankwithdrawal=BigDecimal.ZERO;//for bankwithdrawal Amount
   BigDecimal totalreceipt=BigDecimal.ZERO;//for totalreceipt Amounts
   BigDecimal totalpayment=BigDecimal.ZERO;//for totalpayment Amount
   BigDecimal  CashCredit=BigDecimal.ZERO;
   BigDecimal CashDebit=BigDecimal.ZERO;
    BigDecimal prevcash=BigDecimal.ZERO;

   Connection    conn = glob.getConnect();  
      
 
        
        
        try{
    
 jLabeltitle.setText(companyname.toUpperCase()+" DAILY CASH BOOK");
 Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
            
  ResultSet rs =stmt.executeQuery(qCasha);
         if(rs.next()){
           CashCredit=rs.getBigDecimal("Credit");
         }
         rs =stmt.executeQuery(qCashb);
         if(rs.next()){
           CashDebit=rs.getBigDecimal("Debit");
         }

 ResultSet current = stmt.executeQuery(query1);
           
           while( current.next()){
               if(current.getString("tranid").endsWith("002")){
               deposit=deposit.add(current.getBigDecimal("Amount"));
               totalreceipt=totalreceipt.add(current.getBigDecimal("Amount"));
               }
              else if(current.getString("tranid").endsWith("001")){
               repayment=repayment.add(current.getBigDecimal("Amount"));
               totalreceipt=totalreceipt.add(current.getBigDecimal("Amount"));
               }
               else if(current.getString("tranid").endsWith("010")){
               disbursement=disbursement.add(current.getBigDecimal("Amount"));
               totalpayment=totalpayment.add(current.getBigDecimal("Amount"));
               }
               else if(current.getString("tranid").endsWith("005")){
               savingswithdr=savingswithdr.add(current.getBigDecimal("Amount"));
               totalpayment=totalpayment.add(current.getBigDecimal("Amount"));
               }
               else if(current.getString("tranid").endsWith("020")){
                   if(current.getString("CreditGl").startsWith("11102") && current.getString("DebitGl").startsWith("11")){
                     bankdeposit=bankdeposit.add(current.getBigDecimal("Amount"));
                    totalpayment=totalpayment.add(current.getBigDecimal("Amount"));
                      }//expenses
                   else if(current.getString("CreditGl").startsWith("11102") && current.getString("DebitGl").startsWith("4")){
                    expenses=expenses.add(current.getBigDecimal("Amount"));
                    totalpayment=totalpayment.add(current.getBigDecimal("Amount"));
                      }//expenses
                      else if(current.getString("CreditGl").startsWith("11102") && current.getString("DebitGl").startsWith("5")){
                    expenses=expenses.add(current.getBigDecimal("Amount"));
                    totalpayment=totalpayment.add(current.getBigDecimal("Amount"));
                      }
                   else if(current.getString("DebitGl").startsWith("11102") && current.getString("CreditGl").startsWith("11")){
                    bankwithdrawal= bankwithdrawal.add(current.getBigDecimal("Amount"));
               totalreceipt=totalreceipt.add(current.getBigDecimal("Amount"));
                      }
                   else if(current.getString("DebitGl").startsWith("11102") && current.getString("CreditGl").startsWith("3")){
                    income=income.add(current.getBigDecimal("Amount"));
                    totalreceipt=totalreceipt.add(current.getBigDecimal("Amount"));
                      }
               
               
               }
                 //uploading the Receipt side
               jTableCashbalance.getModel().setValueAt("Repayment:  "+repayment.setScale(2, RoundingMode.HALF_UP),2,0);
               jTableCashbalance.getModel().setValueAt("Deposit:  "+deposit.setScale(2, RoundingMode.HALF_UP),5,0);
               jTableCashbalance.getModel().setValueAt("Income:  "+income.setScale(2, RoundingMode.HALF_UP),10,0);
               jTableCashbalance.getModel().setValueAt("Bank Withdrawal: "+bankwithdrawal.setScale(2, RoundingMode.HALF_UP),12,0);
             //uploading the Payment side
               jTableCashbalance.getModel().setValueAt("Disbursement: "+disbursement.setScale(2, RoundingMode.HALF_UP),2,1);
               jTableCashbalance.getModel().setValueAt("Savings Withdrawn: "+savingswithdr.setScale(2, RoundingMode.HALF_UP),5,1);
               jTableCashbalance.getModel().setValueAt("Expenses:  "+expenses.setScale(2, RoundingMode.HALF_UP),10,1);
               jTableCashbalance.getModel().setValueAt("Bank Deposit: "+bankdeposit.setScale(2, RoundingMode.HALF_UP),12,1);
              
             
               
          
           }//get the total
              jTableCashbalance.getModel().setValueAt("Total Receipt: "+totalreceipt.setScale(2, RoundingMode.HALF_UP),16,0);
              jTableCashbalance.getModel().setValueAt("Total Payment: "+totalpayment.setScale(2, RoundingMode.HALF_UP),16,1);
              //calculating previous cash in hands
              CashDebit=CashDebit.subtract(CashCredit); //get the cash in hands and subtract backward to get the previous Cash in hand
              prevcash= CashDebit.subtract(totalreceipt).add(totalpayment).setScale(2,RoundingMode.HALF_UP);
              
              jTableCashbalance.getModel().setValueAt("Current Cash in Hand: "+totalreceipt.subtract(totalpayment).add(prevcash).setScale(2, RoundingMode.HALF_UP),20,0);
             
          jTableCashbalance.getModel().setValueAt("Previous Cash in Hand: "+prevcash.setScale(2, RoundingMode.HALF_UP),0,0);
            
}
catch(Exception e){JOptionPane.showMessageDialog(this, e.getMessage());}        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void jButtonPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPrintActionPerformed
PrinterJob job = PrinterJob.getPrinterJob();
        PageFormat format=job.defaultPage();
        format.setOrientation(PageFormat.PORTRAIT);
        job.setPrintable(this,format);
            boolean ok =job.printDialog();
            
            if(ok){
        try {
            
            job.print();// TODO add your handling code here:
        } catch (PrinterException ex) {
         JOptionPane.showMessageDialog(this, ex.getMessage());
        }
            }// TODO add your handling code here:
    }//GEN-LAST:event_jButtonPrintActionPerformed

    private void jButtonPrint1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPrint1ActionPerformed
String dd=jDateChooser1.getDate().toString();
        String m="";
        if(dd.contains("Jan")){m="01";}
        else if(dd.contains("Feb")){m="02";}
         else if(dd.contains("Mar")){m="03";}
         else if(dd.contains("Apr")){m="04";}
         else if(dd.contains("May")){m="05";}
         else if(dd.contains("Jun")){m="06";}
        else if(dd.contains("Jul")){m="07";}
        else if(dd.contains("Aug")){m="08";}
        else if(dd.contains("Sep")){m="09";}
        else if(dd.contains("Oct")){m="10";}
        else if(dd.contains("Nov")){m="11";}
        else if(dd.contains("Dec")){m="12";}
String SelectedDate= dd.substring(dd.length()-4)+"-"+m+"-"+dd.substring(8,10);
SelectedDate=SelectedDate+" 00:00:00.000";    
String qCasha="select sum(amount) Credit from Transactn " +
"where  CreditGL like'11102-%' and valuedate<='"+SelectedDate+"'";
      String qCashb="select sum(amount)debit from Transactn " +
"where debitGL like'11102-%' and valuedate<='"+SelectedDate+"'";
String query1="select Sum(Amount) Amount,TranID,isnull(b.productid,'GL') productid,CreditGL,DebitGL from Transactn a left outer join (select loanid accountid,loanproduct productid from Loans union select productid,AccountID from Deposit) b" +
" on a.AccountID=b.accountid " +
" where valuedate='"+SelectedDate+"'" +
" group by TranID,b.productid,CreditGL,DebitGL ";

   BigDecimal deposit=BigDecimal.ZERO;//for deposit amount
   BigDecimal repayment=BigDecimal.ZERO;//for repayment Amount
   BigDecimal disbursement=BigDecimal.ZERO;//for disbursement Amount
   BigDecimal savingswithdr=BigDecimal.ZERO;//for  savingsWithdr Amount
   BigDecimal expenses=BigDecimal.ZERO;//for expenses Amount
   BigDecimal income=BigDecimal.ZERO;//for income Amount
   BigDecimal bankdeposit=BigDecimal.ZERO;//for bankdeposit Amount
   BigDecimal bankwithdrawal=BigDecimal.ZERO;//for bankwithdrawal Amount
   BigDecimal totalreceipt=BigDecimal.ZERO;//for totalreceipt Amounts
   BigDecimal totalpayment=BigDecimal.ZERO;//for totalpayment Amount
   BigDecimal  CashCredit=BigDecimal.ZERO;
   BigDecimal CashDebit=BigDecimal.ZERO;
    BigDecimal prevcash=BigDecimal.ZERO;

   Connection    conn = glob.getConnect();  
      
 
        
        
        try{
    
 jLabeltitle.setText(companyname.toUpperCase()+" DAILY CASH BOOK");
 Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
            
  ResultSet rs =stmt.executeQuery(qCasha);
         if(rs.next()){
           CashCredit=rs.getBigDecimal("Credit");
         }
         rs =stmt.executeQuery(qCashb);
         if(rs.next()){
           CashDebit=rs.getBigDecimal("Debit");
         }

 ResultSet current = stmt.executeQuery(query1);
           
           while( current.next()){
               if(current.getString("tranid").endsWith("002")){
               deposit=deposit.add(current.getBigDecimal("Amount"));
               totalreceipt=totalreceipt.add(current.getBigDecimal("Amount"));
               }
              else if(current.getString("tranid").endsWith("001")){
               repayment=repayment.add(current.getBigDecimal("Amount"));
               totalreceipt=totalreceipt.add(current.getBigDecimal("Amount"));
               }
               else if(current.getString("tranid").endsWith("010")){
               disbursement=disbursement.add(current.getBigDecimal("Amount"));
               totalpayment=totalpayment.add(current.getBigDecimal("Amount"));
               }
               else if(current.getString("tranid").endsWith("005")){
               savingswithdr=savingswithdr.add(current.getBigDecimal("Amount"));
               totalpayment=totalpayment.add(current.getBigDecimal("Amount"));
               }
               else if(current.getString("tranid").endsWith("020")){
                   if(current.getString("CreditGl").startsWith("11102") && current.getString("DebitGl").startsWith("11")){
                     bankdeposit=bankdeposit.add(current.getBigDecimal("Amount"));
                    totalpayment=totalpayment.add(current.getBigDecimal("Amount"));
                      }//expenses
                   else if(current.getString("CreditGl").startsWith("11102") && current.getString("DebitGl").startsWith("4")){
                    expenses=expenses.add(current.getBigDecimal("Amount"));
                    totalpayment=totalpayment.add(current.getBigDecimal("Amount"));
                      }//expenses
                      else if(current.getString("CreditGl").startsWith("11102") && current.getString("DebitGl").startsWith("5")){
                    expenses=expenses.add(current.getBigDecimal("Amount"));
                    totalpayment=totalpayment.add(current.getBigDecimal("Amount"));
                      }
                   else if(current.getString("DebitGl").startsWith("11102") && current.getString("CreditGl").startsWith("11")){
                    bankwithdrawal= bankwithdrawal.add(current.getBigDecimal("Amount"));
               totalreceipt=totalreceipt.add(current.getBigDecimal("Amount"));
                      }
                   else if(current.getString("DebitGl").startsWith("11102") && current.getString("CreditGl").startsWith("3")){
                    income=income.add(current.getBigDecimal("Amount"));
                    totalreceipt=totalreceipt.add(current.getBigDecimal("Amount"));
                      }
               
               
               }
                 //uploading the Receipt side
               jTableCashbalance.getModel().setValueAt("Repayment:  "+repayment.setScale(2, RoundingMode.HALF_UP),2,0);
               jTableCashbalance.getModel().setValueAt("Deposit:  "+deposit.setScale(2, RoundingMode.HALF_UP),5,0);
               jTableCashbalance.getModel().setValueAt("Income:  "+income.setScale(2, RoundingMode.HALF_UP),10,0);
               jTableCashbalance.getModel().setValueAt("Bank Withdrawal: "+bankwithdrawal.setScale(2, RoundingMode.HALF_UP),12,0);
             //uploading the Payment side
               jTableCashbalance.getModel().setValueAt("Disbursement: "+disbursement.setScale(2, RoundingMode.HALF_UP),2,1);
               jTableCashbalance.getModel().setValueAt("Savings Withdrawn: "+savingswithdr.setScale(2, RoundingMode.HALF_UP),5,1);
               jTableCashbalance.getModel().setValueAt("Expenses:  "+expenses.setScale(2, RoundingMode.HALF_UP),10,1);
               jTableCashbalance.getModel().setValueAt("Bank Deposit: "+bankdeposit.setScale(2, RoundingMode.HALF_UP),12,1);
              
             
               
          
           }//get the total
              jTableCashbalance.getModel().setValueAt("Total Receipt: "+totalreceipt.setScale(2, RoundingMode.HALF_UP),16,0);
              jTableCashbalance.getModel().setValueAt("Total Receipt: "+totalpayment.setScale(2, RoundingMode.HALF_UP),16,1);
              //calculating previous cash in hands
              CashDebit=CashDebit.subtract(CashCredit); //get the cash in hands and subtract backward to get the previous Cash in hand
              prevcash= CashDebit.subtract(totalreceipt).add(totalpayment).setScale(2,RoundingMode.HALF_UP);
              
              jTableCashbalance.getModel().setValueAt("Current Cash in Hand: "+totalreceipt.subtract(totalpayment).add(prevcash).setScale(2, RoundingMode.HALF_UP),20,0);
             
          jTableCashbalance.getModel().setValueAt("Previous Cash in Hand: "+prevcash.setScale(2, RoundingMode.HALF_UP),0,0);
            
}
catch(SQLException e){JOptionPane.showMessageDialog(this, e.getMessage());}    // TODO add your handling code here:
    }//GEN-LAST:event_jButtonPrint1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CashBookDaily.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CashBookDaily.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CashBookDaily.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CashBookDaily.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CashBookDaily().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonPrint;
    private javax.swing.JButton jButtonPrint1;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabelDate;
    private javax.swing.JLabel jLabeltitle;
    private javax.swing.JPanel jPanelCash;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableCashbalance;
    // End of variables declaration//GEN-END:variables
String ses_date,companyname,compshortname;
Global glob=new Global();
public String thseparate(BigDecimal amount){
 DecimalFormat formatter = (DecimalFormat) NumberFormat.getInstance(Locale.ENGLISH);
DecimalFormatSymbols symbols = formatter.getDecimalFormatSymbols();

symbols.setGroupingSeparator(',');
formatter.setDecimalFormatSymbols(symbols);
formatter.setMinimumFractionDigits(2);
return formatter.format((amount.setScale(2, RoundingMode.HALF_UP)));    

 }
}
