/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package mfbtrans;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import static java.awt.print.Printable.NO_SUCH_PAGE;
import static java.awt.print.Printable.PAGE_EXISTS;
import java.awt.print.PrinterException;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author Emmanuel
 */
public class Account extends javax.swing.JFrame implements Printable {
@Override
      public int print(Graphics g, PageFormat pf, int page) throws PrinterException { 
        if (page>0){
            return NO_SUCH_PAGE;
        }  
         Graphics2D g2d=(Graphics2D)g;
        int x=(int)pf.getImageableX();
        int y=(int)pf.getImageableY();
        g2d.scale(0.8, 0.8);
        g2d.translate(x, y);
     jPanelAccount.paintAll(g);//does the actual printing
         return PAGE_EXISTS;
    }
 
    /**
     * Creates new form StudentAccount
     */
    public Account() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupTrans = new javax.swing.JPopupMenu();
        jMenuItemDeposit = new javax.swing.JMenuItem();
        jMenuItemWithdrawal = new javax.swing.JMenuItem();
        Transfer = new javax.swing.JMenuItem();
        jPopupRepTrans = new javax.swing.JPopupMenu();
        jMenuItemRepay = new javax.swing.JMenuItem();
        jMenuGuarantor = new javax.swing.JMenuItem();
        Schedule = new javax.swing.JMenuItem();
        jMenuItemDualPost = new javax.swing.JMenuItem();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jButtonPrint = new javax.swing.JButton();
        jButtonPayment = new javax.swing.JButton();
        jButtonHistory = new javax.swing.JButton();
        jPanelAccount = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableAccount = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldActBal = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldClientID = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldGroup = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldType = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldStage = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldAppDate = new javax.swing.JTextField();
        jLabelPix = new javax.swing.JLabel();
        jButtonDisburse = new javax.swing.JButton();
        jCheckBoxAll = new javax.swing.JCheckBox();
        jComboBoxsavings = new javax.swing.JComboBox();
        jLabelsavings = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jTextFieldTbal2 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jTextFieldTbal = new javax.swing.JTextField();
        jButtonClear = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButtonreject = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jTextFieldlasttrandate = new javax.swing.JTextField();
        jButtontrans = new javax.swing.JButton();
        jComboBoxDepTrans = new javax.swing.JComboBox();
        jButtonActivate = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jButtonClosedAccount = new javax.swing.JButton();
        jButtonPayOff = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabelsign = new javax.swing.JLabel();
        jComboBoxlastnames = new javax.swing.JComboBox<>();
        jTextFieldlastname = new javax.swing.JTextField();
        jButtonget = new javax.swing.JButton();
        jButtonClientSearch = new javax.swing.JButton();
        jComboBoxNT = new javax.swing.JComboBox<>();
        jButtonDuaposting = new javax.swing.JButton();

        jPopupTrans.setBackground(new java.awt.Color(204, 0, 255));
        jPopupTrans.setAutoscrolls(true);
        jPopupTrans.setInheritsPopupMenu(true);
        jPopupTrans.setLabel("");
        jPopupTrans.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jPopupTransFocusGained(evt);
            }
        });

        jMenuItemDeposit.setBackground(new java.awt.Color(0, 255, 153));
        jMenuItemDeposit.setText("Deposit");
        jMenuItemDeposit.setOpaque(true);
        jMenuItemDeposit.setSelected(true);
        jMenuItemDeposit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDepositActionPerformed(evt);
            }
        });
        jPopupTrans.add(jMenuItemDeposit);

        jMenuItemWithdrawal.setBackground(new java.awt.Color(255, 51, 51));
        jMenuItemWithdrawal.setText("Withdrawal");
        jMenuItemWithdrawal.setToolTipText("");
        jMenuItemWithdrawal.setOpaque(true);
        jMenuItemWithdrawal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemWithdrawalActionPerformed(evt);
            }
        });
        jPopupTrans.add(jMenuItemWithdrawal);

        Transfer.setText("Transfer");
        Transfer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TransferActionPerformed(evt);
            }
        });
        jPopupTrans.add(Transfer);

        jPopupRepTrans.setBackground(new java.awt.Color(204, 0, 255));
        jPopupRepTrans.setLabel("");

        jMenuItemRepay.setBackground(new java.awt.Color(204, 0, 204));
        jMenuItemRepay.setText("Repayment");
        jMenuItemRepay.setOpaque(true);
        jMenuItemRepay.setSelected(true);
        jMenuItemRepay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRepayActionPerformed(evt);
            }
        });
        jPopupRepTrans.add(jMenuItemRepay);

        jMenuGuarantor.setBackground(new java.awt.Color(51, 51, 51));
        jMenuGuarantor.setText("See Guarantor(s)");
        jMenuGuarantor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuGuarantorActionPerformed(evt);
            }
        });
        jPopupRepTrans.add(jMenuGuarantor);

        Schedule.setText("Loan Schedule");
        Schedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ScheduleActionPerformed(evt);
            }
        });
        jPopupRepTrans.add(Schedule);

        jMenuItemDualPost.setText("Dual Posting");
        jMenuItemDualPost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDualPostActionPerformed(evt);
            }
        });
        jPopupRepTrans.add(jMenuItemDualPost);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Customer Account");
        setLocationByPlatform(true);
        setModalExclusionType(java.awt.Dialog.ModalExclusionType.TOOLKIT_EXCLUDE);
        setResizable(false);
        setType(java.awt.Window.Type.POPUP);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jButtonPrint.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jButtonPrint.setText("Print");
        jButtonPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPrintActionPerformed(evt);
            }
        });

        jButtonPayment.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jButtonPayment.setText("Payment");
        jButtonPayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPaymentActionPerformed(evt);
            }
        });

        jButtonHistory.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jButtonHistory.setText("History");
        jButtonHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHistoryActionPerformed(evt);
            }
        });

        jTableAccount.setFont(jTableAccount.getFont().deriveFont(jTableAccount.getFont().getStyle() | java.awt.Font.BOLD, 12));
        jTableAccount.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "AccountID", "Account Type", "Balance", "Remark"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableAccount.setColumnSelectionAllowed(true);
        jTableAccount.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableAccount.setShowHorizontalLines(isEnabled());
        jTableAccount.setShowVerticalLines(isEnabled());
        jTableAccount.setSurrendersFocusOnKeystroke(true);
        jTableAccount.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableAccountMouseClicked(evt);
            }
        });
        jTableAccount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTableAccountKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTableAccount);
        jTableAccount.setSelectionBackground(Color.BLUE);
        jTableAccount.setRowSelectionAllowed(true);
        jTableAccount.setRowSelectionAllowed(true);
        //jTableAccount.setRowSelectionInterval(0, 0);
        jTableAccount.requestFocusInWindow();
        jTableAccount.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (jTableAccount.getColumnModel().getColumnCount() > 0) {
            jTableAccount.getColumnModel().getColumn(0).setMinWidth(80);
            jTableAccount.getColumnModel().getColumn(0).setPreferredWidth(100);
            jTableAccount.getColumnModel().getColumn(0).setMaxWidth(120);
            jTableAccount.getColumnModel().getColumn(1).setMinWidth(100);
            jTableAccount.getColumnModel().getColumn(1).setPreferredWidth(150);
            jTableAccount.getColumnModel().getColumn(1).setMaxWidth(160);
            jTableAccount.getColumnModel().getColumn(2).setMinWidth(100);
            jTableAccount.getColumnModel().getColumn(2).setPreferredWidth(120);
            jTableAccount.getColumnModel().getColumn(2).setMaxWidth(150);
            jTableAccount.getColumnModel().getColumn(3).setMinWidth(60);
            jTableAccount.getColumnModel().getColumn(3).setPreferredWidth(100);
            jTableAccount.getColumnModel().getColumn(3).setMaxWidth(150);
        }

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("Last Transaction Date");
        jLabel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTextFieldActBal.setEditable(false);
        jTextFieldActBal.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTextFieldActBal.setForeground(new java.awt.Color(255, 102, 51));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("ClientInfo"));
        jPanel1.setForeground(new java.awt.Color(0, 204, 255));

        jLabel3.setText("Client ID");

        jTextFieldClientID.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jTextFieldClientID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldClientIDActionPerformed(evt);
            }
        });
        jTextFieldClientID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldClientIDKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldClientIDKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldClientIDKeyTyped(evt);
            }
        });

        jLabel1.setText("Group");

        jTextFieldGroup.setEditable(false);
        jTextFieldGroup.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N

        jLabel5.setText("Type");

        jTextFieldType.setEditable(false);
        jTextFieldType.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N

        jLabel2.setText("Client  Name");

        jTextFieldName.setEditable(false);
        jTextFieldName.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N

        jLabel4.setText("Approved Date");

        jTextFieldStage.setEditable(false);
        jTextFieldStage.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N

        jLabel6.setText("Stage");

        jTextFieldAppDate.setEditable(false);
        jTextFieldAppDate.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N

        jLabelPix.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabelPix.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelPixMouseClicked(evt);
            }
        });

        jButtonDisburse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mfbtrans/disbursementicon.jpg"))); // NOI18N
        jButtonDisburse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDisburseActionPerformed(evt);
            }
        });

        jCheckBoxAll.setText("Show Closed Accounts");
        jCheckBoxAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxAllActionPerformed(evt);
            }
        });

        jComboBoxsavings.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Daily", "DASCA", "Current", "Fixed", "Future", "Regular", "Target", "Union purse", "Voluntary" }));
        jComboBoxsavings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxsavingsActionPerformed(evt);
            }
        });

        jLabelsavings.setText("SAVINGS");

        jLabel11.setText("Sum Deposit");

        jTextFieldTbal2.setEditable(false);
        jTextFieldTbal2.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jTextFieldTbal2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextFieldTbal2MouseClicked(evt);
            }
        });

        jLabel12.setText("Total Loan");

        jTextFieldTbal.setEditable(false);
        jTextFieldTbal.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N

        jButtonClear.setText("CLEAR");
        jButtonClear.setBorder(null);
        jButtonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearActionPerformed(evt);
            }
        });

        jButton1.setText("ADV");
        jButton1.setBorder(null);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldClientID, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldGroup, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldType))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(jLabelsavings, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jTextFieldStage, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jComboBoxsavings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jTextFieldAppDate))
                                            .addComponent(jCheckBoxAll)))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextFieldTbal, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTextFieldTbal2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelPix, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonClear, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButtonDisburse, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1)))))
                .addContainerGap())
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(500, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldClientID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldGroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jTextFieldType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelPix, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCheckBoxAll)
                            .addComponent(jComboBoxsavings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelsavings))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(jTextFieldTbal2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12)
                            .addComponent(jTextFieldTbal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldStage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jTextFieldAppDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonClear)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jButtonDisburse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1)
                                .addGap(41, 41, 41))))))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(119, Short.MAX_VALUE)
                    .addComponent(jLabel6)
                    .addContainerGap()))
        );

        jButtonreject.setText("Reject");
        jButtonreject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonrejectActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setText("P+I");
        jLabel9.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTextFieldlasttrandate.setEditable(false);
        jTextFieldlasttrandate.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jButtontrans.setBorderPainted(false);
        jButtontrans.setContentAreaFilled(false);
        jButtontrans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtontransActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelAccountLayout = new javax.swing.GroupLayout(jPanelAccount);
        jPanelAccount.setLayout(jPanelAccountLayout);
        jPanelAccountLayout.setHorizontalGroup(
            jPanelAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAccountLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanelAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelAccountLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldlasttrandate, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldActBal, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtontrans, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonreject)
                        .addContainerGap())
                    .addGroup(jPanelAccountLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane1))))
        );
        jPanelAccountLayout.setVerticalGroup(
            jPanelAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAccountLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtontrans, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFieldActBal)
                        .addComponent(jButtonreject, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFieldlasttrandate)))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        jComboBoxDepTrans.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Deposit", "Withdraw", " " }));
        jComboBoxDepTrans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDepTransActionPerformed(evt);
            }
        });

        jButtonActivate.setText("Activate");
        jButtonActivate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonActivateActionPerformed(evt);
            }
        });

        jLabel19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mfbtrans/imagesreportsmall.png"))); // NOI18N
        jLabel19.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel19.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel19MouseClicked(evt);
            }
        });

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mfbtrans/NewClientsmall.jpg"))); // NOI18N
        jLabel8.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel8MouseClicked(evt);
            }
        });

        jButtonClosedAccount.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonClosedAccount.setForeground(new java.awt.Color(255, 0, 0));
        jButtonClosedAccount.setText("X");
        jButtonClosedAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClosedAccountActionPerformed(evt);
            }
        });

        jButtonPayOff.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jButtonPayOff.setText("WriteOff");
        jButtonPayOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPayOffActionPerformed(evt);
            }
        });

        jButton3.setText("Signature");
        jButton3.setBorder(null);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jComboBoxlastnames.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jComboBoxlastnames.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jComboBoxlastnamesFocusLost(evt);
            }
        });
        jComboBoxlastnames.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBoxlastnamesMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jComboBoxlastnamesMouseExited(evt);
            }
        });
        jComboBoxlastnames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxlastnamesActionPerformed(evt);
            }
        });

        jTextFieldlastname.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTextFieldlastname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldlastnameActionPerformed(evt);
            }
        });
        jTextFieldlastname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldlastnameKeyReleased(evt);
            }
        });

        jButtonget.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonget.setText("Get");
        jButtonget.setBorder(null);
        jButtonget.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtongetActionPerformed(evt);
            }
        });

        jButtonClientSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mfbtrans/client icon.PNG"))); // NOI18N
        jButtonClientSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClientSearchActionPerformed(evt);
            }
        });

        jComboBoxNT.setBackground(new java.awt.Color(0, 204, 255));
        jComboBoxNT.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jComboBoxNT.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "L", "F", "M" }));
        jComboBoxNT.setBorder(null);
        jComboBoxNT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxNTActionPerformed(evt);
            }
        });

        jButtonDuaposting.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButtonDuaposting.setText("Dual Payment");
        jButtonDuaposting.setBorder(null);
        jButtonDuaposting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDuapostingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonClosedAccount)
                .addGap(7, 7, 7)
                .addComponent(jButtonHistory)
                .addGap(45, 45, 45)
                .addComponent(jButtonPrint)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonPayment)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBoxDepTrans, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonActivate)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonDuaposting)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonPayOff)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelAccount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jComboBoxlastnames, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxNT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 1, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(jLabelsign, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(55, 55, 55)
                                .addComponent(jButtonget))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(58, 58, 58)
                                .addComponent(jButtonClientSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jTextFieldlastname, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelAccount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelsign, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonClientSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(jTextFieldlastname, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxlastnames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxNT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonget)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonHistory)
                            .addComponent(jButtonPrint)
                            .addComponent(jButtonPayment)
                            .addComponent(jComboBoxDepTrans, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonActivate, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonDuaposting)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButtonClosedAccount)
                                .addComponent(jButtonPayOff)))))
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleParent(this);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
 jButtontrans.setVisible(false);
 Global glob = new Global();
 Connection conn= glob.getConnect();
   try{
       Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
      
   
   String SQL="Select * from company";
    ResultSet current = stmt.executeQuery(SQL);
     current.next();
     ses_date=current.getString("ses_date");
companyname=current.getString("fullname");
compshortname=current.getString("shortname");
//jLabelsesdate.setText("SESSION DATE: "+ses_date.substring(0,10));
String query="select *  from roles where roleid ='"+userRole+"'";
            
                
               current = stmt.executeQuery(query);
                    
                   
                if(current.next()){
                 jButtonActivate.setVisible(current.getBoolean("AccountsActivate"));
                 jButtonreject.setVisible(current.getBoolean("AccountsActivate"));
                 jComboBoxsavings.setVisible(current.getBoolean("AccountsCreate"));
                 jLabelsavings.setVisible(current.getBoolean("AccountsCreate"));
                 jButtonClosedAccount.setVisible(current.getBoolean("AccountsClosed"));
                 Reversal=current.getBoolean("AccountReversal");
                jButtonDisburse.setVisible(current.getBoolean("AccountsDisburse"));
                 jButtonPayOff.setVisible(current.getBoolean("AccountsWriteoff"));
                
                     
                }
            
        current.close();
        conn.close();
        //JOptionPane.showMessageDialog(rootPane, ses_date);
        }
   catch(Exception e){JOptionPane.showMessageDialog(rootPane, e.getMessage());}

        Image icon=null;
        try {
            icon = ImageIO.read(getClass().getResource("/mfbtrans/micro1.jpeg"));
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
   this.setIconImage(icon); 
   jButtonHistory.setEnabled(false);
   jButtonPrint.setEnabled(false);
   jButtonPayOff.setEnabled(false);
   jButtonPayment.setEnabled(false);
   jComboBoxDepTrans.setEnabled(false);
   jButtonActivate.setEnabled(false);
   jButtonreject.setEnabled(false);
   jTableAccount.changeSelection(0, 0, false, false);

    }//GEN-LAST:event_formWindowOpened

    private void jButtonPaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPaymentActionPerformed
//Global glob = new Global();
 int count=1;
Connection conn =glob.getConnect();
String loanNum = jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(),0).toString();
//double Amount=0,Amont=Double.parseDouble(jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(),2).toString().replaceAll(",", ""));
String SQL="select * from loanschedule where remark='P'  and loanID='"+loanNum+"'";
try{
Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
            ResultSet current = stmt.executeQuery(SQL);
            current.next();
            repaycount=current.getInt("count");
            prinRepay=current.getDouble("prinrepay");
             interest=current.getDouble("intrepay");
             
    String PayBal=jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(),2).toString().replaceAll(",", "");
 
 String descriptn=jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(),1).toString();
 String ID=jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(),0).toString();
   Payment pay=new Payment();
   pay.jTextFieldDescription.setText(descriptn);
    pay.jTextFieldDescription.setToolTipText(jTextFieldName.getText());
  pay.jTextFieldBalance.setText(PayBal);
  BigDecimal bal=new BigDecimal(Double.parseDouble(PayBal) * Double.parseDouble(intperc[jTableAccount.getSelectedRow()]));
  pay.jTextFieldBalance2.setText(bal.setScale(2, RoundingMode.UP)+"");
  pay.jTextFieldAmount.setText(current.getBigDecimal("repaywithint").doubleValue()+"");
   AmtRepay=current.getDouble("repaywithint");
  
  pay.jTextFieldAmount.requestFocusInWindow();
  pay.jTextFieldPayID.setText(ID);
  String cltname=jTextFieldName.getText();
  if(cltname.length()>30){
     cltname=cltname.substring(0,30);
  }
  pay.jTextFieldReference.setText(descriptn+" PAYMENT BY "+cltname);
  pay.jTextFieldPayID.setToolTipText(jTextFieldClientID.getText());
  pay.prinRepay=prinRepay;
  pay.ses_date=ses_date;
  pay.interest=interest;
  pay.jTextFieldprin.setText(prinRepay+"");
  pay.jTextFieldint.setText(interest+"");
  pay.Amount=current.getDouble("repaywithint");
  pay.repaycount=repaycount;
  pay.AccName=jTextFieldName.getText();
  pay.hands=1;
 pay.repaycount=repaycount;
 pay.BranchCode=BranchCode;
 pay.userid=userid;
 pay.tellerControlGl=tellerControlGl;
 
  pay.setVisible(true);
  current.close();
  conn.close();
}
catch(Exception e){
    JOptionPane.showMessageDialog(this, e.getMessage());
}
PaymentFlag=true;  
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonPaymentActionPerformed

    private void jButtonHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHistoryActionPerformed
String PayBal=jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(),2).toString().replace(",","");
 String descriptn=jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(),1).toString();
 String ID=jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(),0).toString();
   AccountHistory history=new AccountHistory();
   
  history.jTextFieldName.setText(jTextFieldName.getText());
   history.AccName=jTextFieldName.getText();
 history.jTextFieldClientID.setText(jTextFieldClientID.getText());
 history.jLabelItem.setText(descriptn);
  history.jTextFieldClientID.setToolTipText(ID);
  history.jTextFieldAccountID.setText(ID);
  history.ses_date=ses_date;
  history.compshortname=compshortname;
  history.companyname=companyname;
  history.isloan=isloan;
  history.LoanIntRate=intperc[jTableAccount.getSelectedRow()];
 history.tellerControlGl=tellerControlGl;
 
 history.Reversal=Reversal;
 history.setVisible(true);  

    }//GEN-LAST:event_jButtonHistoryActionPerformed

    private void jButtonPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPrintActionPerformed
String IP="localhost";
int i=0;
String date=null;
int amount=0;
String bank=null;
            
             i=jTableAccount.getSelectedRow();
 String url =  "jdbc:sqlserver://"+IP+"\\SQLEXPRESS:1433;databaseName=BankDatabase";
String query2="select sum(amount) as paid,Max(DateEffective)as date,Max(ChequeNbr)as bank from transactn" +
" where AccountID='"+jTableAccount.getModel().getValueAt(i, 0).toString()+"'";

        
        
        try{
    //Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
 //Connection    conn = DriverManager.getConnection(url, "sa", "123456789");
 Connection    conn = glob.getConnect();
 Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
            ResultSet current = stmt.executeQuery(query2);
            
            current.next();
               
   
   date=current.getString("date").substring(0, 11);
    amount=current.getInt("paid");
    bank=current.getString("bank");
         
            current.close();
}
catch(Exception e){JOptionPane.showMessageDialog(this, e.getMessage());}   
        
 PaymentReceipt rcpt=new PaymentReceipt();
 rcpt.jLabelsum.setText("<html><U>"+amount+"________________________ "+"</U></html>");
 rcpt.jLabelReceiver3.setText("<html><U>"+jTextFieldName.getText()+"_________________________"+"</U></html>");
 rcpt.jLabelpurpose.setText("<html><U>"+jTableAccount.getModel().getValueAt(i,1).toString()+"______________________   "+"</U></html>");
 rcpt.jLabelNo.setText("<html><U>"+jTableAccount.getModel().getValueAt(i,0).toString()+"______________________________         "+"</U></html>");
 rcpt.jLabelDate.setText("<html><U>"+date+"__________________________________ "+"</U></html>");
 rcpt.jLabelbankpaid.setText("Payment Made at "+bank);
rcpt.setVisible(true);
        
                     // TODO add your handling code here:
    }//GEN-LAST:event_jButtonPrintActionPerformed

    private void jTextFieldClientIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldClientIDKeyPressed
 if (evt.getKeyCode()==KeyEvent.VK_ENTER ){
    jTableAccount.changeSelection(0, 0, false, false);
 jTableAccount.requestFocusInWindow();
     //Clear images
     jLabelsign.setIcon(null);
     jLabelPix.setIcon(null);
       Global glob = new Global();
Connection conn=glob.getConnect();
     ///check for accountid or loan num entered instead of custno
     if(jTextFieldClientID.getText().startsWith("200")){
         String query1="select CustNo from Deposit  where AccountID='"+jTextFieldClientID.getText()+"'";          

try
{
 Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);

 ResultSet   current = stmt.executeQuery(query1);
String ClientID="";
         
        if(current.next()){
        
         ClientID=current.getString("custno");
          jTextFieldClientID.setText( ClientID);         
        }
        else {
            JOptionPane.showMessageDialog(jPanelAccount, "Invalid AccountID.");
        }
}
catch(Exception e){JOptionPane.showMessageDialog(jPanelAccount, "The AccountID does not exist");}
     }
     else if(jTextFieldClientID.getText().startsWith("300")){
       String query1="select CustNo from loans  where loanID='"+jTextFieldClientID.getText()+"'";          

try
{
 Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);

 ResultSet   current = stmt.executeQuery(query1);
String ClientID="";
         
        if(current.next()){
        
         ClientID=current.getString("custno");
          jTextFieldClientID.setText( ClientID);         
        }
}
catch(Exception e){JOptionPane.showMessageDialog(jPanelAccount, "The loanid does not exist");}
        
      } 
 //CLEAR table
     int l=0,m=0;
     for( l=0;l<4;l++){
       //jTableAccount.getModel().setValueAt("",m,l);   
       for(m=0;m<jTableAccount.getModel().getRowCount();m++){
         jTableAccount.getModel().setValueAt("",m,l); 
         //JOptionPane.showMessageDialog(this,"Row="+m+" and column="+l+" rowcount= "+jTableAccount.getModel().getRowCount());
     }
     }
     
byte[] fileBytes=null;

String query,query2,query3,query4,query5;
if(jCheckBoxAll.isSelected()){
 query="select Custno,AccountID,AccountName,ProductID,RunningBal,'' interestpercent,GroupID,status,datecreated  from Deposit where custNo='"+jTextFieldClientID.getText()+"' union all select Custno,LoanID,AccountName,LoanProduct,OutstandingBal,interestPercent,GroupID,status,Disburseddate from loans" +
" where custNo='"+jTextFieldClientID.getText()+"'";
}else{
query="select Custno,AccountID,AccountName,ProductID,RunningBal,'' interestpercent,GroupID,status,datecreated   from Deposit where custNo='"+jTextFieldClientID.getText()+"' and status='Active' union all select Custno,LoanID,AccountName,LoanProduct,OutstandingBal,interestPercent,GroupID,status,Disburseddate  from loans" +
" where custNo='"+jTextFieldClientID.getText()+"' and (Status='Active' or Status='Pending')";   

}
//fileBytes =current.getBytes("passport");
BigDecimal TDepBal =BigDecimal.ZERO;
BigDecimal TLNBal =BigDecimal.ZERO;
try{
Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
     //displaying customer info only for client without savings
     String altQuery="select * from clients where Custno='"+jTextFieldClientID.getText()+"'";
                   ResultSet cur=stmt.executeQuery( altQuery);
                  if( cur.next()){
                   jTextFieldClientID.setText(cur.getString("Custno")); 
                   jTextFieldName.setText((cur.getString("FirstName")+' '+cur.getString("middlename")+' '+cur.getString("Lastname")));
                  jTextFieldGroup.setText(cur.getString("GroupiD")) ;
                jTextFieldTbal2.setText("");
                 jTextFieldTbal.setText("");
                 jTextFieldStage.setText("");
                 jTextFieldAppDate.setText("");
                 jLabelPix.setIcon(null);
                           }
                 //end of client without savings
   //displaying accounts
  ResultSet current = stmt.executeQuery(query);

//acc.jTextFieldClientID.setText(current.getString("Custno")); 
//acc.jTextFieldName.setText((current.getString("accountName")));
int i=0;
           while(current.next()){
               if(!current.getString("Custno").isEmpty()){
               jTextFieldClientID.setText(current.getString("Custno")); 
jTextFieldName.setText((current.getString("accountName")));
  
                }

jTableAccount.getModel().setValueAt(current.getString("AccountID"),i,0);
              jTableAccount.getModel().setValueAt(current.getString("ProductID"),i,1);
               jTableAccount.getModel().setValueAt(thseparate(current.getBigDecimal("RunningBal")),i,2);
               jTableAccount.getModel().setValueAt(current.getString("status")+"->"+current.getString("DateCreated").substring(0,10),i,3);
             intperc[i]=current.getString("interestpercent");
             
           i=i+1;
           if(current.getString("ProductID").contains("Savings")){
               TDepBal=TDepBal.add(current.getBigDecimal("RunningBal"));
           }
           if(current.getString("ProductID").contains("LN")){
                if(current.getString("Status").equalsIgnoreCase("Active")){
               TLNBal=TLNBal.add(current.getBigDecimal("RunningBal"));
               jTextFieldGroup.setText((current.getString("GroupID")) );
                       }
           }
           jTextFieldTbal.setText(TDepBal.setScale(2, RoundingMode.HALF_UP).toString());
           jTextFieldTbal2.setText(TLNBal.setScale(2, RoundingMode.HALF_UP).toString());
           } // end of while stmt
           //get the loan stage
   String SQL2="Select count(loanid) as stage from loans where custno='"+jTextFieldClientID.getText()+"'and LoanProduct like'REGLN%'";

 current = stmt.executeQuery(SQL2);
     current.next();
 jTextFieldStage.setText(current.getInt("stage")+"");
 //getting Client Approved date
  String SQL5="Select datecreated,pix,Branchcode,phone  from clients where custno='"+jTextFieldClientID.getText()+"'";
     current = stmt.executeQuery(SQL5);
     current.next();
     Phone=current.getString("Phone");
 jTextFieldAppDate.setText(current.getString("Datecreated").substring(0,10)+"");
BranchCode=current.getString("Branchcode");
fileBytes =current.getBytes("pix");
jTextFieldClientID.setForeground(Color.BLACK); 
current.close();
conn.close();
 
}
catch(SQLException e){if(e.getMessage().contains("no current row")){JOptionPane.showMessageDialog(this,"The Customer ID ("+jTextFieldClientID.getText()+") does not exist");} else{ JOptionPane.showMessageDialog(this,e.getMessage());}}

      
        
                
    //OutputStream targetFile= new FileOutputStream("C://Image//new.JPG");  --for writing to file
    //targetFile.write(fileBytes); --for writing to file
    //targetFile.close(); ----for writing to file
     ImageIcon pic=new ImageIcon(fileBytes);
     Image resizpic =pic.getImage().getScaledInstance(150,100,Image.SCALE_DEFAULT);
     ImageIcon resizIcon = new ImageIcon(resizpic);
     
repaint();
pack();
     jLabelPix.setIcon(resizIcon);
          
           }
           
 

   
      //change negative to red
      jTableAccount.setDefaultRenderer(Object.class, new
AttributiveCellRenderer());  
      
      
     
            
       jTextFieldType.setText("Normal");
         
 
 
    }//GEN-LAST:event_jTextFieldClientIDKeyPressed

    private void jTextFieldClientIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldClientIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldClientIDActionPerformed

    private void jTableAccountMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableAccountMouseClicked
      
        //JOptionPane.showMessageDialog(this, jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(), 2).toString().startsWith("-"));
     if(!jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(), 0).toString().isEmpty()){
        boolean checkLoan= jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(), 2).toString().startsWith("-");
       boolean checkPendingLoan= jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(), 3).toString().substring(0, 7).equalsIgnoreCase("pending") ;  
       boolean checkdailysavings=jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(), 3).toString().startsWith("M");   
    if(checkdailysavings){
    jComboBoxDepTrans.setEnabled(true);
            jButtonPayment.setEnabled(false);
             jButtonPayOff.setEnabled(false);
            jButtonActivate.setEnabled(true);
            jButtonreject.setEnabled(false);
             jButtonHistory.setEnabled(true);
             
          
    
    }
   else if (checkLoan && !checkPendingLoan){
            jComboBoxDepTrans.setEnabled(false);
            jButtonPayment.setEnabled(true);
             jButtonPayOff.setEnabled(true);
            jButtonActivate.setEnabled(false);
            jButtonreject.setEnabled(false);
             jButtonHistory.setEnabled(true);
            isloan=true;
            //getting the last transactn date
             String SQL="select Max(DateEffective) as lasttrandate from transactn where accountid='"
            +jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(), 0).toString()+"'" ;
    //glob = new Global();
Connection conn=glob.getConnect();
try{
Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
           
  ResultSet current = stmt.executeQuery(SQL);
    if( current.next())
    {
 jTextFieldlasttrandate.setText(current.getString("lasttrandate").substring(0,16)+"");
    }
  current.close();
  conn.close();
}
catch(SQLException e){JOptionPane.showMessageDialog(this, e.getMessage());}
///end of getting last transactn date
             if(evt.getClickCount()==2){
        jPopupRepTrans.show(jTableAccount,evt.getX(), evt.getY()); 
        
    
    }
BigDecimal balWitCos=BigDecimal.valueOf(Double.parseDouble(jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(), 2).toString().replaceAll(",", ""))*Double.parseDouble( intperc[jTableAccount.getSelectedRow()]+"")).setScale(2, RoundingMode.HALF_UP);
jTextFieldActBal.setText(balWitCos.setScale(2, RoundingMode.HALF_UP)+"");        }else  if  (checkLoan && checkPendingLoan){
          jComboBoxDepTrans.setEnabled(false);
            jButtonPayment.setEnabled(false);
            jButtonPayOff.setEnabled(false);
            jButtonActivate.setEnabled(true);  
            jButtonreject.setEnabled(true); 
            jButtonHistory.setEnabled(false);
            isloan=true;
            
      //BigDecimal balWitCos=BigDecimal.valueOf(Double.parseDouble(jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(), 2).toString())*Double.parseDouble(1.20+"")).setScale(2, RoundingMode.HALF_UP);
     
     BigDecimal balWitCos=BigDecimal.valueOf(Double.parseDouble(jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(), 2).toString().replaceAll(",", ""))*Double.parseDouble( intperc[jTableAccount.getSelectedRow()]+"")).setScale(2, RoundingMode.HALF_UP);

      //BigDecimal bal=BigDecimal.valueOf(balWitCos).setScale(2, RoundingMode.HALF_UP);
      
jTextFieldActBal.setText(balWitCos.setScale(2, RoundingMode.HALF_UP)+"");
        }
        else{//for savings
    
        jComboBoxDepTrans.setEnabled(true); 
        jButtonPayment.setEnabled(false);
        jButtonPayOff.setEnabled(false);
         jButtonActivate.setEnabled(false);
         jButtonreject.setEnabled(false);
         jButtonHistory.setEnabled(true);
         isloan=false;
          jTextFieldActBal.setText("");
           String SQL="select Max(DateEffective) as lasttrandate from transactn where accountid='"
            +jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(), 0).toString()+"'" ;
           
           //check for Double Clicking to get Menu
               if(evt.getClickCount()==2){
        jPopupTrans.show(jTableAccount,evt.getX(), evt.getY()); 
       }

Connection conn=glob.getConnect();
try{
Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
           
  ResultSet current = stmt.executeQuery(SQL);
      if(current.next()){
 jTextFieldlasttrandate.setText(current.getString("lasttrandate").substring(0,16));
 
     }
   current.close();
  conn.close();
}
catch(SQLException e){JOptionPane.showMessageDialog(this, e.getMessage());}
///end of getting last transactn date for savings

      
        }
     
     } //end of topmost if 
    }//GEN-LAST:event_jTableAccountMouseClicked

    private void jButtonActivateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonActivateActionPerformed
 Fieldprintdisbamt=0.00;
if(jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(), 1).toString().equalsIgnoreCase("Daily Savings"))  
{
    try {
        Global glob = new Global();
      Connection    conn = glob.getConnect();
     PreparedStatement pstmt;
         String q="update deposit set status='Active' where accountid='"+ jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(), 0).toString()+"'"; 
                         pstmt=conn.prepareStatement(q);  
                        pstmt.executeUpdate();
   JOptionPane.showMessageDialog(this, "Account is now active for deposit");
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, ex.getMessage());
    }
    
    
    
}
else{
    Calendar now=Calendar.getInstance();
      SimpleDateFormat sdf= new SimpleDateFormat("yyyy-MM-dd");

String dt;//don't forget to change default date to dt=year+"-"+Smonth+"-"+Sday;
      String loanNum = jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(),0).toString();
   String loanSQL="select instalment from loans where loanid='"+loanNum +"'";      
boolean err=false;
double InterestRate=0; int term=0,moratorium=1;
int instalcount=0,noOfmonths=0;
Global glob = new Global();
String disbdate=jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(),3).toString();
 disbdate=disbdate.substring(disbdate.length()-10);
dt=JOptionPane.showInputDialog("Do you like to change date using format(2018-04-02) ",disbdate);
    try {
        now.setTime(sdf.parse(dt));
    } catch (ParseException ex) {
        JOptionPane.showMessageDialog(this, ex.getMessage());
    }
if(dt.length()<10){dt=dt.substring(0,5)+"0"+dt.substring(5);};
 int count=1;
 
Connection conn =glob.getConnect();
String frqncy="",GLcode="0";
double Amount=0;
String SQL="Select * from Product where ProductID='"+ jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(), 1)+"'";
String query=("insert into loanschedule VALUES (?,?,?,?,?,?,?,?,?,?,?,?)");
String query3;//="update loans set Disburseddate='"+dt+"' ,status='Active',instalment="+instal+" where loanID='"+jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(), 0)+"'";
String query4=("insert into transactn (AccountID,tranid,Amount,CreditGL,DebitGL,Runningbal,ValueDate,DateEffective,CustNo,StmtRef,BranchID,ChequeNbr,transactionNbr)"
        + " values(?,?,?,?,?,?,?,?,?,?,?,?,?)");
String amount=jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(),2).toString().replace("-", "").replaceAll(",", "");
amount=JOptionPane.showInputDialog("Do you like to change loan Amount",amount);
if(amount.contains(",")){amount=amount.replaceAll(",", "");}
String query1="update glbal set GlbCredit=GlbCredit+"+Double.parseDouble(amount)+" where CoaNbr='"+tellerControlGl+"' and GlbFinyear='C'"
        + " and glbPeriod='"+ses_date.substring(5,7)+"'";

String query2="";
glob.getHolidays();//this is a function to fetch holiday
//JOptionPane.showMessageDialog(this, glob.holidays[1]);//////////////////////////////////////////
PreparedStatement pstmt;
int repaygap=1;
try{
Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
            ResultSet current = stmt.executeQuery(SQL);
            current.next();
 term = current.getInt("term");
 GLcode=current.getString("GLCode")+"-"+BranchCode;
 query2="update glbal set Glbdebit=Glbdebit+"+(amount)+" where CoaNbr='"+GLcode+"' and GlbFinyear='C'"
  + " and glbPeriod='"+ses_date.substring(5,7)+"'";//ses_date.substring(5,7) is the session month

 moratorium= current.getInt("moratorium");
 InterestRate=current.getDouble("InterestRate");
 frqncy=current.getString("paymentfrequency");
 noOfmonths=current.getInt("monthduration");
 Amount=Double.parseDouble(amount);
 instalcount=term-moratorium;
  current = stmt.executeQuery(loanSQL);
  if(current.next()){
      
  String adjInstalcount=current.getString("instalment").substring(0,1);
   if(current.getString("instalment").equalsIgnoreCase("12.0000")){
      Biweekly=true;
        instalcount=12;
      //JOptionPane.showMessageDialog(jPanelAccount, "Biweekly true");
   }
   else if( !adjInstalcount.contains("1") && !adjInstalcount.contains("0")){
     repaygap=instalcount/(Integer.parseInt(adjInstalcount));
     instalcount=Integer.parseInt(adjInstalcount);
   
     now.add(Calendar.MONTH,(repaygap)) ;
                                                } 
   else if(frqncy.equalsIgnoreCase("monthly")){
      now.add(Calendar.MONTH,1) ;
                           }
 
                   }
  
current.close();
//JOptionPane.showMessageDialog(this,term+"-"+InterestRate);
}
catch(Exception e){ JOptionPane.showMessageDialog(this,e.getMessage());}
double totalInt=Amount*InterestRate/12*noOfmonths/100;
JOptionPane.showMessageDialog(this,"Total interest on loan is "+totalInt);
double Intpercent=(InterestRate/12*noOfmonths/100)+1;
double AmountWithint=totalInt+Amount;
 Fieldprintdisbamt=AmountWithint;
String query33="update loans set interestpercent='"+BigDecimal.valueOf(Intpercent).setScale(4, RoundingMode.HALF_EVEN)+"',outstandingBal='-"+Amount+"' where loanID='"+loanNum+"'";
double repayment=AmountWithint/instalcount;

query3="update loans set Disburseddate='"+dt+"' ,status='Active',instalment="+BigDecimal.valueOf(repayment).setScale(2, RoundingMode.HALF_UP)+" where loanID='"+jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(), 0)+"'";

double Intrepay=totalInt/instalcount;
          
            String ddd="";
            if(moratorium==1){
                now.add(Calendar.DATE,14);//to week of grace
                ddd=sdf.format(now.getTime()).toString().substring(8,10)+sdf.format(now.getTime()).toString().substring(4,7);
                
            }
            //now.getTime();
      BigDecimal intrepay=BigDecimal.valueOf(Intrepay);
           BigDecimal repaymnt=BigDecimal.valueOf(repayment);
       
      
             
    try {
         //SimpleDateFormat sdfDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
 //Date cdate = new Date();
 // String strnow=sdfDate.format(cdate);
 //generating transaction number
    Timestamp timestamp = new Timestamp(System.currentTimeMillis());    
        Random rand = new Random(timestamp.getTime());
        int Rnum=rand.nextInt(9999999);
String tranctno=dt.substring(2, 4)+dt.substring(5, 7)+dt.substring(8,10)+Rnum+"LD";



        conn.setAutoCommit(false);
        pstmt=conn.prepareStatement(query4);
pstmt.setString(1,jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(),0).toString());
pstmt.setString(2,"010");
pstmt.setDouble(3,Double.parseDouble(amount.replaceAll(",", "")));
pstmt.setString(4,"11102-"+BranchCode);
pstmt.setString(5,GLcode+"");
pstmt.setString(6,Double.parseDouble(amount.replaceAll(",", ""))+"");
pstmt.setString(7,dt+" 00:00:00.000");
pstmt.setString(8,ses_date);
pstmt.setString(9,jTextFieldClientID.getText());
pstmt.setString(10,"Disbursement");
//JOptionPane.showMessageDialog(this,jTextFieldDescription.getToolTipText());
pstmt.setString(11,jTextFieldName.getText());
pstmt.setString(12,"");
pstmt.setString(13,tranctno);
pstmt.executeUpdate();
//updating gl for trial balance
pstmt=conn.prepareStatement(query1);
pstmt.executeUpdate();

pstmt=conn.prepareStatement(query2);
pstmt.executeUpdate();

    int lastschedEven=term-moratorium;//to get last schedule for fractional differences
   BigDecimal RunningPrin = BigDecimal.ONE;
   BigDecimal RunningInt = BigDecimal.ONE;
   BigDecimal RunningPrinWithInt = BigDecimal.ONE;
           // if(frqncy.equalsIgnoreCase("monthly") ){
            //   now.add(Calendar.MONTH,1) ; //to give one month grace for monthly loans and correct first grace for BI-Monthly,quarterly
             //        }
          BigDecimal AmountWithintt=BigDecimal.ZERO;
        while(AmountWithint>0 && count<=(term-moratorium)){
   ddd=sdf.format(now.getTime()).substring(8,10)+sdf.format(now.getTime()).substring(4,7);
//the above shows the correct holiday format with the note pad
            if(glob.checkHoliday(ddd)){//this will skip public holidays
                if(frqncy.equalsIgnoreCase("weekly")){now.add(Calendar.DATE,7);//to increase date
            // JOptionPane.showMessageDialog(this,ddd);
             }else if(frqncy.equalsIgnoreCase("monthly")){
              now.add(Calendar.DATE,1);  
             }
             continue;   
            }//end of if check holiday is true
               
        pstmt=conn.prepareStatement(query3);
        pstmt.executeUpdate();
       //JOptionPane.showMessageDialog(this,query33);
        pstmt=conn.prepareStatement(query33);//to insert interest rate
        pstmt.executeUpdate();
   
        //Creating Schedule of loans
        ///////////////////////////////////////////////
       
        AmountWithintt = new BigDecimal(AmountWithint).setScale(2, RoundingMode.HALF_EVEN);
        
        BigDecimal InitialAmountWithint = AmountWithintt; 
        pstmt=conn.prepareStatement(query); 
        pstmt.setString(1,jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(),0).toString());
        pstmt.setString(2,sdf.format(now.getTime())+" 00:00:00.000");
            
        if(count==lastschedEven){  
        BigDecimal CumulaPrin=repaymnt.setScale(2, RoundingMode.HALF_UP).subtract(intrepay.setScale(2, RoundingMode.HALF_UP)).multiply(BigDecimal.valueOf(lastschedEven-1));
        pstmt.setString(3,BigDecimal.valueOf(Amount).setScale(2, RoundingMode.HALF_UP).subtract(CumulaPrin).setScale(2, RoundingMode.HALF_UP).add(intrepay.setScale(2, RoundingMode.HALF_UP)).toString());
        pstmt.setString(4,BigDecimal.valueOf(Amount).setScale(2, RoundingMode.HALF_UP).subtract(CumulaPrin).setScale(2, RoundingMode.HALF_UP).add(intrepay.setScale(2, RoundingMode.HALF_UP)).toString());
        pstmt.setString(5,BigDecimal.valueOf(Amount).setScale(2, RoundingMode.HALF_UP).subtract(CumulaPrin).setScale(2, RoundingMode.HALF_UP).toString());
        pstmt.setString(6,intrepay.setScale(2, RoundingMode.HALF_UP).setScale(2, RoundingMode.HALF_UP).toString());
       // pstmt.setString(6,BigDecimal.valueOf(totalInt).subtract(RunningInt).toString());
           }
        else{
            
        pstmt.setString(3,AmountWithintt+"");
        pstmt.setString(4,repaymnt.setScale(2, RoundingMode.HALF_UP).toString());
        pstmt.setString(5,repaymnt.setScale(2, RoundingMode.HALF_UP).subtract(intrepay.setScale(2, RoundingMode.HALF_UP)).toString());
        pstmt.setString(6,intrepay.setScale(2, RoundingMode.HALF_UP).toString());
            }
        pstmt.setString(7,"Not Serviced");
        pstmt.setString(8,jTextFieldClientID.getText());
         pstmt.setInt(9,count);
         pstmt.setInt(10,0);
          pstmt.setInt(11,0);
          if(count==1){
          pstmt.setString(12,"P");
          }else{
            pstmt.setString(12,"U");   
          }
        pstmt.executeUpdate();

 
             //JOptionPane.showMessageDialog(this,totalInt+" "+ AmountWithint+"----"+repaymnt.setScale(2, RoundingMode.HALF_UP)+"int on repay"+ intrepay.setScale(2, RoundingMode.HALF_UP)+ " and term is "+term+" and moratorium is "+moratorium);
             if(Biweekly==true){now.add(Calendar.DATE,14);  }//to increase date
             else if(frqncy.equalsIgnoreCase("weekly")){now.add(Calendar.DATE,7);//to increase date
             
             }else if(frqncy.equalsIgnoreCase("monthly")){
              now.add(Calendar.MONTH,repaygap) ;  
             }
            count=count+1;
           AmountWithint=AmountWithint-repayment;
           RunningInt =RunningInt.add(intrepay);
           RunningPrin =RunningPrin.add(repaymnt).subtract(intrepay);
          RunningPrinWithInt =RunningPrinWithInt.add(repaymnt);
    } // end of while
         String onedaybefore=dt;// just inialising
        try
        {
       Date prevdate=new SimpleDateFormat("yyyy-MM-dd").parse(dt);
       prevdate = new Date(prevdate.getTime() - 2);
       DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
       onedaybefore = dateFormat.format( prevdate);
      
        }
        catch(Exception e){JOptionPane.showMessageDialog(this, e.getMessage());}
        //updating loanschedule to display loan balance in field print
        String strSQl="insert into Loanschedule values('"+jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(),0).toString()+"','"+onedaybefore+" 00:00:00.000"+"','"+Fieldprintdisbamt+"','','0.00','0.00','Not Serviced','"+jTextFieldClientID.getText()+"','0','0.00','0.00','D')";
        pstmt=conn.prepareStatement(strSQl);
        pstmt.executeUpdate();
        try {
        conn.commit();
        conn.close(); 
          JOptionPane.showMessageDialog(this, "Loan schedule Created"+"\n"+"Loan activated!!");       
      jTableAccount.getModel().setValueAt("Active->"+dt,jTableAccount.getSelectedRow(),3); 
    } catch (SQLException ex) {
         JOptionPane.showMessageDialog(this,ex.getMessage());
    }
    }// TODO add your handling code here:
    catch (SQLException ex) {
      JOptionPane.showMessageDialog(this,ex.getMessage())   ;
    }
}  
    jButtonActivate.setEnabled(false);
   
        
              
      
         
      

           
        
          
         
        
        
              
             
         
      

           
       // TODO add your handling code here:
    }//GEN-LAST:event_jButtonActivateActionPerformed

    private void jComboBoxDepTransActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDepTransActionPerformed

        jButtontrans.doClick();// TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxDepTransActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
jButtontrans.setVisible(false);   //Declaration of variables

  if(PaymentFlag==true || withdrFlag==true ||DepositFlag==true){     
   String Account,Acctype,AccIDCol,Qcoln;
     //Global glob = new Global();
   Account=jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(), 0).toString();
    Acctype=jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(), 1).toString();
    if(Acctype.contains("LN")){
        AccIDCol="LoanID";Qcoln="OutstandingBal";
        Acctype="Loans";
    }else{
     AccIDCol="AccountID";Qcoln="RunningBal";  
      Acctype="Deposit";
    }
   String SQL="Select * from "+Acctype+" where "+AccIDCol+" ='"+Account+"'";
   String SQL2="Select max(DateEffective) lastdate from transactn  where AccountiD ='"+Account+"'";
 int count=1;
Connection conn =glob.getConnect();
try{
Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
            ResultSet current = stmt.executeQuery(SQL);
            if(current.next()){
            jTableAccount.getModel().setValueAt(thseparate(current.getBigDecimal(Qcoln)),jTableAccount.getSelectedRow(),2);
            
            if(Acctype.equalsIgnoreCase("Loans")){jTextFieldActBal.setText(current.getBigDecimal(Qcoln).multiply(BigDecimal.valueOf(Double.parseDouble( intperc[jTableAccount.getSelectedRow()]+""))).setScale(2, RoundingMode.HALF_UP)+"");}
            jTableAccount.getDefaultRenderer(null);
                             }
             current = stmt.executeQuery(SQL2);
             if(current.next()){
               jTextFieldlasttrandate.setText(current.getString("lastdate").substring(0,16));
             }
            current.close();
            conn.close();
           
}
catch(NumberFormatException | SQLException e){
 JOptionPane.showMessageDialog(this, e.getMessage());
}
    }
    }//GEN-LAST:event_formWindowActivated

    private void jButtonDisburseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDisburseActionPerformed
if(jTextFieldClientID.getText().equalsIgnoreCase("")){JOptionPane.showMessageDialog(this, " No ClientID Found");}else{
Disburse dd= new Disburse();
dd.jTextFieldClientID.setText(jTextFieldClientID.getText());
dd.setVisible(true);}// TODO add your handling code here:
    }//GEN-LAST:event_jButtonDisburseActionPerformed

    private void jButtonrejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonrejectActionPerformed
Global glob = new Global();
String Stat=jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(),3).toString().substring(0, 7);
if(!Stat.equalsIgnoreCase("Pending")){
 JOptionPane.showMessageDialog(this,"You can't reject an active loan");   
}else
{
 String loanNum = jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(),0).toString();
Connection conn =glob.getConnect();

String SQL="delete  from loans where loanID='"+ jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(), 0)+"'";
PreparedStatement pstmt;
try{
     pstmt=conn.prepareStatement(SQL); 
 pstmt.executeUpdate();
JOptionPane.showMessageDialog(this,"Loan Successfully rejected");
jTableAccount.getModel().setValueAt("",jTableAccount.getSelectedRow(), 0);
jTableAccount.getModel().setValueAt("",jTableAccount.getSelectedRow(), 1);
jTableAccount.getModel().setValueAt("",jTableAccount.getSelectedRow(), 2);
jTableAccount.getModel().setValueAt("",jTableAccount.getSelectedRow(), 3);
}
catch(Exception e){ JOptionPane.showMessageDialog(this,e.getMessage());}
}
             // TODO add your handling code here:
    }//GEN-LAST:event_jButtonrejectActionPerformed

    private void jLabel8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseClicked
        ClientReg cr= new ClientReg();
        cr.jTextCustNo.setText("<New>");
        cr.jTextCustNo.setEditable(false);
         cr.userRole=userRole;
        
        //cr.jButtonSubmit.setEnabled(true);
        this.setSize(800,600);
        cr.setVisible(true);
        //jButtonSubmit.setLocation(450,350);
    }//GEN-LAST:event_jLabel8MouseClicked

    private void jLabel19MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel19MouseClicked
Reports rpt =new Reports();
rpt.companyname=companyname;
         rpt.compshortname=compshortname;
          rpt.ses_date=ses_date;
rpt.setVisible(true);// TODO add your handling code here:
    }//GEN-LAST:event_jLabel19MouseClicked

    private void jButtonClosedAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClosedAccountActionPerformed
  //Declaration of variables
        String bal;
               bal=jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(), 2).toString().replaceAll(",", "");
          String Account,Acctype,AccIDCol,Qcoln;
            if(jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(), 3).toString().contains("cancel")){
             Account=jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(), 0).toString();
    
 
            String qupdate="update loanschedule set status='final' where custno='"+jTextFieldClientID.getText()+"' and loanid='"+Account+"'";
            Connection conn2 =glob.getConnect();
           PreparedStatement pstmt2;
            try {
                pstmt2 = conn2.prepareStatement(qupdate);
                pstmt2.executeUpdate();
                JOptionPane.showMessageDialog(this, "Done Boss");
                 conn2.close();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
    
        }
          else if(Double.parseDouble(bal)!=0.0){
            JOptionPane.showMessageDialog(this, "Cannot close account with running Balance");
            if(jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(), 1).toString().contains("LN")){
            jButtonPayOff.setEnabled(true);
            }
        }
      
        else if(Double.parseDouble(bal)==0.0){    
     Global glob = new Global();
   Account=jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(), 0).toString();
    Acctype=jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(), 1).toString();
    if(Acctype.contains("LN")|| Acctype.contains("lN") || Acctype.contains("ln")){
        AccIDCol="loanID";Qcoln="OutstandingBal";
        Acctype="Loans";
    }else{
     AccIDCol="AccountID";Qcoln="RunningBal";  
      Acctype="Deposit";
    }
   String SQL="Update "+Acctype+" set status='closed' "+" where "+AccIDCol+" ='"+Account+"'";
   String queryupdate="update loanschedule set status='Serviced' where custno='"+jTextFieldClientID.getText()+"' and loanid='"+Account+"'";
  // JOptionPane.showMessageDialog(this,queryupdate);
 int count=1;
Connection conn =glob.getConnect();
try{
    PreparedStatement pstmt=conn.prepareStatement(SQL);
    pstmt.executeUpdate();
    pstmt=conn.prepareStatement(queryupdate);
    pstmt.executeUpdate();
    String SQL2="insert into transactn (AccountID,tranid,Amount,DebitGL,CreditGL,Runningbal,ValueDate,DateEffective,custNo,StmtRef,BranchID,ChequeNbr,CreatedBy,transactionNbr) " +
    " values(?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
    pstmt=conn.prepareStatement(SQL2);
pstmt.setString(1,jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(), 0)+"");
pstmt.setString(2,"101");
pstmt.setString(3,"0.00");
pstmt.setString(4,"");
pstmt.setString(5,"");
pstmt.setString(6,"0.00");
pstmt.setString(7,ses_date);
pstmt.setString(8,ses_date);
//pstmt.setString(8,strnow);
pstmt.setString(9,jTextFieldClientID.getText());
pstmt.setString(10,"Closed "+Acctype);
pstmt.setString(11,jTextFieldName.getText());
pstmt.setString(12,"");
pstmt.setString(13,userid);
pstmt.setString(14,"C");
pstmt.executeUpdate();
if(Acctype.equalsIgnoreCase("Loans")){
String Sqlremark="update Loanschedule set  Remark='C',status='final' " +
" where  CustNo='"+jTextFieldClientID.getText()+"' and LoanID='"+jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(), 0)+"'";
 pstmt=conn.prepareStatement(Sqlremark); 
    pstmt.executeUpdate();

}
       conn.close();
       JOptionPane.showMessageDialog(this,"Done,Boss");
}
catch(Exception e){
 JOptionPane.showMessageDialog(this, e.getMessage());
}
}        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonClosedAccountActionPerformed

    private void jCheckBoxAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxAllActionPerformed
jTextFieldClientID.requestFocusInWindow(); 

    }//GEN-LAST:event_jCheckBoxAllActionPerformed

    private void jMenuItemDepositActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDepositActionPerformed
 withdrFlag=false;
 DepositFlag=true;
 jComboBoxDepTrans.setSelectedItem("Deposit");
//jButtontrans.doClick();

    }//GEN-LAST:event_jMenuItemDepositActionPerformed

    private void jButtontransActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtontransActionPerformed
//Global glob = new Global();
 int count=1;
Connection conn =glob.getConnect();
String loanNum = jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(),0).toString();
//double Amount=0,Amont=Double.parseDouble(jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(),2).toString().replaceAll(",", ""));
try{

         depositStopped=jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(), 3).toString().startsWith("M");
     
    String PayBal=jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(),2).toString().replaceAll(",", "");
    
 String descriptn=jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(),1).toString();
 String ID=jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(),0).toString();
 
  Deposit pay = new Deposit();
   pay.jTextFieldDescription.setText(descriptn);
    pay.jTextFieldDescription.setToolTipText(jTextFieldName.getText());
  pay.jTextFieldBalance.setText(PayBal);
  pay.jTextFieldAmount.setText("");
  pay.Phone=Phone;
  pay.tellerControlGl=tellerControlGl;
  pay.jTextFieldAmount.requestFocusInWindow();
  pay.jTextFieldPayID.setText(ID);
  pay.ses_date=ses_date;
  pay.depositStopped=depositStopped;
  String cltname=jTextFieldName.getText();
  if(cltname.length()>30){
     cltname=cltname.substring(0,30);
  }
   if(jComboBoxDepTrans.getSelectedItem().toString().equalsIgnoreCase("Deposit")){
     pay.jTextFieldReference.setText("CSH DEP BY "+cltname);
   withdrFlag=false;
   Desc="Cr";
   TranType="Csh Dep";
}
  
   else {
    pay.jTextFieldReference.setText("CSH WITHDR BY "+cltname);
    withdrFlag=true;
     Desc="Dr";
     TranType="Csh Withr";
  }
  
  pay.jTextFieldPayID.setToolTipText(jTextFieldClientID.getText());
  pay.Desc=Desc;
  pay.TranType=TranType;
pay.withdrFlag=withdrFlag;
pay.BranchCode=BranchCode;
pay.userid=userid;
  pay.setVisible(true);
  
  
}
catch(Exception e){
    JOptionPane.showMessageDialog(this, e.getMessage());
}

         // TODO add your handling code here:
    }//GEN-LAST:event_jButtontransActionPerformed

    private void jMenuItemWithdrawalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemWithdrawalActionPerformed
String loanNum = jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(),0).toString();
//double Amount=0,Amont=Double.parseDouble(jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(),2).toString().replace(",",""));


           
    String PayBal=jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(),2).toString().replace(",","");
 String descriptn=jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(),1).toString();
 String ID=jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(),0).toString();
 
 Withdrawal pay= new Withdrawal();
   pay.jTextFieldDescription.setText(descriptn);
    pay.jTextFieldDescription.setToolTipText(jTextFieldName.getText());
  pay.jTextFieldBalance.setText(PayBal);
  pay.jTextFieldAmount.setText("");
  pay.tellerControlGl=tellerControlGl;
  pay.BranchCode=BranchCode;
  pay.jTextFieldAmount.requestFocusInWindow();
  pay.jTextFieldPayID.setText(ID);
  pay.ses_date=ses_date;
    String cltname=jTextFieldName.getText();
  if(cltname.length()>30){
     cltname=cltname.substring(0,30);
  }
    pay.jTextFieldReference.setText("CSH WITHDR BY "+cltname);
    withdrFlag=true;
  
  pay.userid=userid;
  pay.jTextFieldPayID.setToolTipText(jTextFieldClientID.getText());
 
        withdrFlag=true;
 jComboBoxDepTrans.setSelectedItem("Withdrawal");

pay.setVisible(true);// TODO add your handling code here:
    }//GEN-LAST:event_jMenuItemWithdrawalActionPerformed

    private void jMenuItemRepayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRepayActionPerformed
jButtonPayment.doClick();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItemRepayActionPerformed

    private void jButtonPayOffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPayOffActionPerformed
Global glob = new Global();
 int count=1;
Connection conn =glob.getConnect();
String loanNum = jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(),0).toString();
double Amount=0,Amont=Double.parseDouble(jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(),2).toString().replace(",",""));
///////////////////Fraction write-off
if(Amont>0 && Amont<2){
    try{
    String fractinQuery="update loans set Outstandingbal=0.00 where loanid='"+loanNum +"'";
PreparedStatement pstmt= conn.prepareStatement(fractinQuery);
pstmt.executeUpdate();
JOptionPane.showMessageDialog(this,"Done");
    }
    catch(Exception e){JOptionPane.showMessageDialog(jPanelAccount, e.getMessage());}
}
else{/////////////////// Normal Payoff
String SQL="select * from loanschedule where loanID='"+loanNum+"' order by count";
try{
Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
            ResultSet current = stmt.executeQuery(SQL);
            current.next();
            repaycount=current.getInt("count");
            prinRepay=current.getDouble("prinrepay");
             interest=current.getDouble("intrepay");
    String PayBal=jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(),2).toString().replace(",","");
 String descriptn=jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(),1).toString();
 String ID=jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(),0).toString();
   Payoff pay=new Payoff();
   pay.jTextFieldDescription.setText(descriptn);
    pay.jTextFieldDescription.setToolTipText(jTextFieldName.getText());
  pay.jTextFieldBalance.setText(PayBal);
  pay.tellerControlGl=tellerControlGl;
  pay.jTextFieldAmount.setText(current.getBigDecimal("repaywithint").setScale(2, RoundingMode.HALF_UP)+"");
   AmtRepay=current.getDouble("repaywithint");
  pay.jTextFieldAmount.requestFocusInWindow();
  pay.jTextFieldPayID.setText(ID);
  pay.jTextFieldReference.setText(descriptn+" Payment by cash");
  pay.jTextFieldPayID.setToolTipText(jTextFieldClientID.getText());
  pay.prinRepay=prinRepay;
  pay.interest=interest;
  pay.jTextFieldprin.setText(prinRepay+"");
  pay.jTextFieldint.setText(interest+"");
  pay.Amount=Double.parseDouble(PayBal)*(AmtRepay/prinRepay);
  pay.repaycount=repaycount;
  pay.AccName=jTextFieldName.getText();
  pay.hands=1;
 pay.repaycount=repaycount;
  pay.setVisible(true);
  current.close();
  conn.close();
}
catch(Exception e){
    JOptionPane.showMessageDialog(this, e.getMessage());
}

PaymentFlag=true;  
}
    }//GEN-LAST:event_jButtonPayOffActionPerformed

    private void jComboBoxsavingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxsavingsActionPerformed
       String query1="select count(Custno) as no from Deposit where Status='Active' and ProductId like'"+'%'+jComboBoxsavings.getSelectedItem().toString()+"%' and custno='"+jTextFieldClientID.getText()+"'";
 int no=0;
//check for existing loan of thesame product
   Global glob = new Global();
        Connection conn=glob.getConnect();//from global setting
        Statement stmt;
       try{
                  stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
  
           ResultSet current = stmt.executeQuery(query1);
            if(current.next()){
            no=current.getInt("no");
            }
             }
        catch(Exception e){ JOptionPane.showMessageDialog(this,e.getMessage());}
             
    if(no>0){
                JOptionPane.showMessageDialog(this, "The user is still having running Savings Account"+"\n"+
                        "of thesame product."+"\n Account cannot be created");
             }    
 else if(jTextFieldClientID.getText().isEmpty()){
  JOptionPane.showMessageDialog(this, "No Client ID Found");
            }
 else if(jTextFieldName.getText().isEmpty()) {
   JOptionPane.showMessageDialog(this, "No Name Found, click search first.");  
 }
        
else if(jComboBoxsavings.getModel().getSelectedItem().toString().equalsIgnoreCase("Daily")){//
    String DailyAmount=JOptionPane.showInputDialog("Enter Amount of daily contribution");
    if ((Integer.parseInt(DailyAmount)-Integer.parseInt(DailyAmount))==0){
        try {
            
        
       
        String query2,query5;
        int LastDepositNum=0;
        String Brancode ="",ClientID="",name="",LoanNum,DepositNum,DepositNum2,dailyDepcode="250";
        PreparedStatement pstmt;

      query2="insert into Deposit VALUES (?,?,?,?,?,?,?,?,?,?)";
       
       
        query5="Select max(serial) as  serial  from deposit";
       //extracting the last deposit number
          stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
          
ResultSet   current = stmt.executeQuery(query5);

            if(current.next()){
             LastDepositNum=current.getInt("serial");
            //JOptionPane.showMessageDialog(this, LastDepositNum);
           current.close();
            }
DepositNum=dailyDepcode+glob.getIDFormat(LastDepositNum+1);
        pstmt=conn.prepareStatement(query2);
          pstmt.setString(1,jTextFieldClientID.getText());
          pstmt.setString(2,jTextFieldName.getText());
         pstmt.setString(3,DepositNum);
         Calendar now=Calendar.getInstance();
        now.getTime();
        int rar=now.get(Calendar.YEAR);
        String Smonth,Sday;
        int Omonth=now.get(Calendar.MONTH);//opening as january=0 not 1
        int day=now.get(Calendar.DAY_OF_MONTH);
         int year=now.get(Calendar.YEAR);
         int month=Omonth+1;//note month start with january=0 in java
        Smonth=month+"";
        Sday=day+"";
       if(month<10){Smonth="0"+month;}// let it appear as two digit e.g 02
        if(day<10){Sday="0"+day;}

         pstmt.setString(4,year+"-"+Smonth+"-"+Sday+" 00:00:00.000");
         pstmt.setString(5,"0.0");
         pstmt.setString(6,DailyAmount);
         pstmt.setString(7,"Daily Savings");
         pstmt.setString(8,"Active");
         pstmt.setString(9,jTextFieldGroup.getText());
          pstmt.setString(10,"optional");
         pstmt.executeUpdate();
        JOptionPane.showMessageDialog(this, "Daily Savings created successfully");

        //query9="update Deposit set groupID='" +jTextFieldGroup.getText()+
        //"'  where custno='"+jTextFieldClientID.getText()+"'";
        } catch (SQLException ex) {
           JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }
}
    else if(!jComboBoxsavings.getModel().getSelectedItem().toString().equalsIgnoreCase("Fixed")){
        
        try {
           
            
       int  dailyDepcode=200;
       if(jComboBoxsavings.getSelectedItem().toString().trim().equalsIgnoreCase("Future"))
       {
           dailyDepcode=220;
       }
       else if(jComboBoxsavings.getSelectedItem().toString().equalsIgnoreCase("Current"))
       {
           dailyDepcode=230;
       }
       else if(jComboBoxsavings.getSelectedItem().toString().equalsIgnoreCase("Voluntary"))
       {
           dailyDepcode=201;
       }
            
            PreparedStatement pstmt;

          String query2="insert into Deposit VALUES (?,?,?,?,?,?,?,?,?,?)";
           
           
           String  query5="Select max(serial) as  serial  from deposit";
           //extracting the last deposit number
              stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
              
      ResultSet current = stmt.executeQuery(query5);
             int      LastDepositNum=0;
               if( current.next()){
               LastDepositNum=current.getInt("serial");
                //JOptionPane.showMessageDialog(this, LastDepositNum);
               current.close();
               }
  String DepositNum=dailyDepcode+glob.getIDFormat(LastDepositNum+1);
            pstmt=conn.prepareStatement(query2);
              pstmt.setString(1,jTextFieldClientID.getText());
              pstmt.setString(2,jTextFieldName.getText());
             pstmt.setString(3,DepositNum);
             Calendar now=Calendar.getInstance();
            now.getTime();
            int rar=now.get(Calendar.YEAR);
            String Smonth,Sday;
            int Omonth=now.get(Calendar.MONTH);//opening as january=0 not 1
             int day=now.get(Calendar.DAY_OF_MONTH);
             int year=now.get(Calendar.YEAR);
             int month=Omonth+1;//note month start with january=0 in java
            Smonth=month+"";
            Sday=day+"";
           if(month<10){Smonth="0"+month;}// let it appear as two digit e.g 02
            if(day<10){Sday="0"+day;}

             pstmt.setString(4,year+"-"+Smonth+"-"+Sday+" 00:00:00.000");
             pstmt.setString(5,"0.0");
             pstmt.setString(6,"0.0");
             pstmt.setString(7,jComboBoxsavings.getSelectedItem().toString()+" Savings");
             pstmt.setString(8,"Active");
             pstmt.setString(9,jTextFieldGroup.getText());
             pstmt.setString(10,"optional");
             pstmt.executeUpdate();
            JOptionPane.showMessageDialog(this, jComboBoxsavings.getSelectedItem().toString()+" Savings created successfully");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }

    }
 
    else{
        JOptionPane.showMessageDialog(this, "Invalid Input");
    }

    }//GEN-LAST:event_jComboBoxsavingsActionPerformed

    private void jLabelPixMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelPixMouseClicked
if (!jTextFieldClientID.getText().isEmpty()){
 jTableAccount.changeSelection(jTableAccount.getSelectedRow(), 0, true, true);
 
        //CLEAR table
     int l=0,m=0;
     for( l=0;l<4;l++){
       //jTableAccount.getModel().setValueAt("",m,l);   
       for(m=0;m<jTableAccount.getModel().getRowCount();m++){
         jTableAccount.getModel().setValueAt("",m,l); 
         //JOptionPane.showMessageDialog(this,"Row="+m+" and column="+l+" rowcount= "+jTableAccount.getModel().getRowCount());
     }
     }
     
byte[] fileBytePhoto=null;
byte[] fileByteSign=null;
  glob = new Global();
Connection conn=glob.getConnect();
String query;
if(jCheckBoxAll.isSelected()){
 query="select Custno,AccountID,AccountName,ProductID,RunningBal,'' interestpercent,GroupID,status,datecreated  from Deposit where custNo='"+jTextFieldClientID.getText()+"' union all select Custno,LoanID,AccountName,LoanProduct,OutstandingBal,interestPercent,GroupID,status,Disburseddate from loans" +
" where custNo='"+jTextFieldClientID.getText()+"'";
}else{
query="select Custno,AccountID,AccountName,ProductID,RunningBal,'' interestpercent,GroupID,status,datecreated   from Deposit where custNo='"+jTextFieldClientID.getText()+"' and status='Active' union all select Custno,LoanID,AccountName,LoanProduct,OutstandingBal,interestPercent,GroupID,status,Disburseddate  from loans" +
" where custNo='"+jTextFieldClientID.getText()+"' and (Status='Active' or Status='Pending')";   

}

BigDecimal TDepBal =BigDecimal.ZERO;
BigDecimal TLNBal =BigDecimal.ZERO;
try{
Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
           
 //get the loan stage
   String SQL2="Select count(loanid) as stage from loans where custno='"+jTextFieldClientID.getText()+"'and LoanProduct like'REGLN%'";
 ResultSet current = stmt.executeQuery(SQL2);
    if( current.next()){
 jTextFieldStage.setText(current.getInt("stage")+"");
 //getting Client Approved date
  String SQL5="Select branchcode,datecreated,pix,sign  from clients where custno='"+jTextFieldClientID.getText()+"'";
     current = stmt.executeQuery(SQL5);
     current.next();
 jTextFieldAppDate.setText(current.getString("Datecreated").substring(0,10)+"");
BranchCode=current.getString("branchcode");
fileBytePhoto =current.getBytes("pix");
fileByteSign =current.getBytes("sign");
}
 //displaying accounts

 current = stmt.executeQuery(query);
         

//acc.jTextFieldClientID.setText(current.getString("Custno")); 
//acc.jTextFieldName.setText((current.getString("accountName")));
int i=0;
           while(current.next()){
              
               jTextFieldClientID.setText(current.getString("Custno")); 
jTextFieldName.setText((current.getString("accountName")));


jTableAccount.getModel().setValueAt(current.getString("AccountID"),i,0);
              jTableAccount.getModel().setValueAt(current.getString("ProductID"),i,1);
               jTableAccount.getModel().setValueAt(thseparate(current.getBigDecimal("RunningBal")),i,2);
               jTableAccount.getModel().setValueAt(current.getString("status")+"->"+current.getString("DateCreated").substring(0,10),i,3);
             intperc[i]=current.getString("interestpercent");
             
           i=i+1;
           if(current.getString("ProductID").contains("Savings")){
               TDepBal=TDepBal.add(current.getBigDecimal("RunningBal"));
           }
           if(current.getString("ProductID").contains("LN")){
               if(current.getString("Status").equalsIgnoreCase("Active")){
               TLNBal=TLNBal.add(current.getBigDecimal("RunningBal"));
                jTextFieldGroup.setText((current.getString("GroupID")) );
               }
           }
           jTextFieldTbal.setText(TDepBal.setScale(2, RoundingMode.HALF_UP).toString());
           jTextFieldTbal2.setText(TLNBal.setScale(2, RoundingMode.HALF_UP).toString());
           }
           if(i==0){// for clients without accounts, let the client name and ID show
            current = stmt.executeQuery("Select firstname+' '+middlename+' '+lastname AccountName from clients where custno='"+jTextFieldClientID.getText()+"'");
           if(current.next()){
               jTextFieldName.setText((current.getString("accountName")));
                             }
           }
current.close();
conn.close();
 jTextFieldClientID.setForeground(Color.BLACK); 
}
catch(SQLException e){if(e.getMessage().contains("no current row")){JOptionPane.showMessageDialog(this,"The Customer ID ("+jTextFieldClientID.getText()+") does not exist");} else{ JOptionPane.showMessageDialog(this,e.getMessage());jTextFieldClientID.setEditable(true);}}

      
        
                
    //OutputStream targetFile= new FileOutputStream("C://Image//new.JPG");  --for writing to file
    //targetFile.write(fileBytes); --for writing to file
    //targetFile.close(); ----for writing to file
    //for photos
     ImageIcon pic=new ImageIcon(fileBytePhoto);
     Image resizpic =pic.getImage().getScaledInstance(150,100,Image.SCALE_SMOOTH);
     ImageIcon resizIconP = new ImageIcon(resizpic);
     //for signatures
      pic=new ImageIcon(fileByteSign);
      resizpic =pic.getImage().getScaledInstance(150,100,Image.SCALE_SMOOTH);
     ImageIcon resizIconS = new ImageIcon(resizpic);
     
repaint();
pack();
     jLabelPix.setIcon(resizIconP);
     jLabelsign.setIcon(resizIconS);
          
           }
           
 

   
      //change negative to red
      jTableAccount.setDefaultRenderer(Object.class, new
AttributiveCellRenderer());  
      
        jTextFieldType.setText("Normal");
     
         jTextFieldClientID.setEditable(true);
         
         
         // TODO add your handling code here:
    }//GEN-LAST:event_jLabelPixMouseClicked

    private void jTextFieldTbal2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextFieldTbal2MouseClicked
BigDecimal RemBal= BigDecimal.valueOf(Double.parseDouble(jTextFieldTbal2.getText())+ Double.parseDouble(jTextFieldTbal.getText()));
        JOptionPane.showMessageDialog(this, "Amount left for adjustment="+RemBal) ;
// TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldTbal2MouseClicked

    private void jMenuGuarantorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuGuarantorActionPerformed
Guarantors grtor= new Guarantors();
grtor.jTextFieldCID.setText(jTextFieldClientID.getText());
grtor.jComboBoxLID.addItem(jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(),0)+"");
grtor.setVisible(true);

    }//GEN-LAST:event_jMenuGuarantorActionPerformed

    private void ScheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ScheduleActionPerformed
LoanSchedule sch= new LoanSchedule();
sch.ses_date=ses_date;
sch.companyname=companyname;
sch.compshortname=compshortname;
sch.loanid=jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(), 0).toString();
sch.setVisible(true);
    }//GEN-LAST:event_ScheduleActionPerformed

    private void TransferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TransferActionPerformed

 jComboBoxDepTrans.setSelectedItem("Transfer");
       Transfer tf= new Transfer();
       tf.setVisible(true);
    }//GEN-LAST:event_TransferActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
if(Showsignature==false)    {
jLabelsign.setVisible(true);
    Showsignature=true;                    }
else{
    jLabelsign.setVisible(false);
   Showsignature=false; 
}
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButtonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearActionPerformed
jTextFieldClientID.setText("");
jTextFieldClientID.setEditable(true);
jTextFieldClientID.requestFocusInWindow();
jTextFieldGroup.setText(""); 
jTextFieldType.setText(""); 
jTextFieldName.setText(""); 
jTextFieldTbal.setText(""); 
jTextFieldTbal.setText(""); 
jTextFieldTbal2.setText(""); 
jTextFieldStage.setText(""); 
jTextFieldAppDate.setText(""); 
jTextFieldlasttrandate.setText("");
jTextFieldActBal.setText("");
jLabelPix.setIcon(null);
jLabelsign.setIcon(null);
//CLEAR table
     int l=0,m=0;
     for( l=0;l<4;l++){
       //jTableAccount.getModel().setValueAt("",m,l);   
       for(m=0;m<jTableAccount.getModel().getRowCount();m++){
         jTableAccount.getModel().setValueAt("",m,l); 
         //JOptionPane.showMessageDialog(this,"Row="+m+" and column="+l+" rowcount= "+jTableAccount.getModel().getRowCount());
     }
     }
    }//GEN-LAST:event_jButtonClearActionPerformed

    private void jTextFieldClientIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldClientIDKeyTyped
     
    }//GEN-LAST:event_jTextFieldClientIDKeyTyped

    private void jTextFieldClientIDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldClientIDKeyReleased
if(jTextFieldClientID.getText().length()==7){
        jTextFieldClientID.setForeground(Color.GREEN);
     }else{
         jTextFieldClientID.setForeground(Color.red); 
     }
    }//GEN-LAST:event_jTextFieldClientIDKeyReleased

    private void jTextFieldlastnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldlastnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldlastnameActionPerformed

    private void jTextFieldlastnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldlastnameKeyReleased
    String sql;  jComboBoxlastnames.removeAllItems();
  if(jComboBoxNT.getSelectedItem().toString().equalsIgnoreCase("L")){
    sql="select lastname,middlename,firstname,custno from clients"+
" where lastname like'"+jTextFieldlastname.getText()+"%'";
  
  }
  else  if(jComboBoxNT.getSelectedItem().toString().equalsIgnoreCase("F")){
     sql="select lastname,middlename,firstname,custno from clients"+
" where  firstname like'"+jTextFieldlastname.getText()+"%'";
 
  }
   else  if(jComboBoxNT.getSelectedItem().toString().equalsIgnoreCase("M")){
     sql="select lastname,middlename,firstname,custno from clients"+
" where middlename like'"+jTextFieldlastname.getText()+"%'";
 
  }
   else{
    sql="select lastname,middlename,firstname,custno from clients"+
" where lastname like'"+jTextFieldlastname.getText()+"%' or firstname like'"+jTextFieldlastname.getText()+"%' or middlename like'"+jTextFieldlastname.getText()+"%'";
   
   }
    try
    {
     Connection conn=glob.getConnect();
    // JOptionPane.showMessageDialog(this,sql);
    Statement stmt= conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
    ResultSet rs= stmt.executeQuery(sql);
  
    while( rs.next()){
    jComboBoxlastnames.addItem(rs.getString("firstname")+" "+rs.getString("middlename")+" "+rs.getString("lastname")+"-"+rs.getString("custno"));
    }
    jComboBoxlastnames.showPopup();
    //jComboBoxlastnames.scrollRectToVisible(new Rectangle(500,500,500,1000));
    }
    catch(Exception e){JOptionPane.showMessageDialog(this,e.getMessage());}
    }//GEN-LAST:event_jTextFieldlastnameKeyReleased

    private void jComboBoxlastnamesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBoxlastnamesMouseClicked

    }//GEN-LAST:event_jComboBoxlastnamesMouseClicked

    private void jComboBoxlastnamesMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBoxlastnamesMouseExited
          // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxlastnamesMouseExited

    private void jComboBoxlastnamesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBoxlastnamesFocusLost
//String input = jComboBoxlastnames.getSelectedItem().toString();  
//String[] inputArray =input.split("-");
//jTextFieldClientID.setText(inputArray[1]); 
jButtonget.doClick();

    }//GEN-LAST:event_jComboBoxlastnamesFocusLost

    private void jComboBoxlastnamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxlastnamesActionPerformed
jTextFieldlastname.requestFocusInWindow();        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxlastnamesActionPerformed

    private void jButtongetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtongetActionPerformed
    jButtonClear.doClick();
   String input = jComboBoxlastnames.getSelectedItem().toString();  
String[] inputArray =input.split("-");
jTextFieldClientID.setText(inputArray[inputArray.length-1]);
    }//GEN-LAST:event_jButtongetActionPerformed

    private void jTableAccountKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableAccountKeyPressed
             if(!jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(), 0).toString().isEmpty()){
                 
                
        boolean checkLoan= jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(), 2).toString().startsWith("-");
       boolean checkPendingLoan= jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(), 3).toString().substring(0, 7).equalsIgnoreCase("pending") ;  
       boolean checkdailysavings=jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(), 3).toString().startsWith("M");   
    if(checkdailysavings){
    jComboBoxDepTrans.setEnabled(true);
            jButtonPayment.setEnabled(false);
             jButtonPayOff.setEnabled(false);
            jButtonActivate.setEnabled(true);
            jButtonreject.setEnabled(false);
             jButtonHistory.setEnabled(true);
             
          
    
    }
   else if (checkLoan && !checkPendingLoan){
            jComboBoxDepTrans.setEnabled(false);
            jButtonPayment.setEnabled(true);
             jButtonPayOff.setEnabled(true);
            jButtonActivate.setEnabled(false);
            jButtonreject.setEnabled(false);
             jButtonHistory.setEnabled(true);
            isloan=true;
            //getting the last transactn date
             String SQL="select Max(DateEffective) as lasttrandate from transactn where accountid='"
            +jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(), 0).toString()+"'" ;
    Global glob = new Global();
Connection conn=glob.getConnect();
try{
Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
           
  ResultSet current = stmt.executeQuery(SQL);
     current.next();
 jTextFieldlasttrandate.setText(current.getString("lasttrandate").substring(0,16)+"");
  current.close();
  conn.close();
}
catch(Exception e){JOptionPane.showMessageDialog(this, e.getMessage());}
///end of getting last transactn date
             if(evt.getKeyCode()==KeyEvent.VK_ENTER){
                
         
        jPopupRepTrans.show(jTableAccount,jTableAccount.getX()+300, jTableAccount.getY());
        try {
                Thread.sleep(5);
                 jMenuItemRepay.doClick();
            } catch (InterruptedException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
             
        
    
    }
BigDecimal balWitCos=BigDecimal.valueOf(Double.parseDouble(jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(), 2).toString().replaceAll(",", ""))*Double.parseDouble( intperc[jTableAccount.getSelectedRow()]+"")).setScale(2, RoundingMode.HALF_UP);
jTextFieldActBal.setText(balWitCos.setScale(2, RoundingMode.HALF_UP)+"");        }else  if  (checkLoan && checkPendingLoan){
          jComboBoxDepTrans.setEnabled(false);
            jButtonPayment.setEnabled(false);
            jButtonPayOff.setEnabled(false);
            jButtonActivate.setEnabled(true);  
            jButtonreject.setEnabled(true); 
            jButtonHistory.setEnabled(false);
            isloan=true;
            
      //BigDecimal balWitCos=BigDecimal.valueOf(Double.parseDouble(jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(), 2).toString())*Double.parseDouble(1.20+"")).setScale(2, RoundingMode.HALF_UP);
     
     BigDecimal balWitCos=BigDecimal.valueOf(Double.parseDouble(jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(), 2).toString().replaceAll(",", ""))*Double.parseDouble( intperc[jTableAccount.getSelectedRow()]+"")).setScale(2, RoundingMode.HALF_UP);

      //BigDecimal bal=BigDecimal.valueOf(balWitCos).setScale(2, RoundingMode.HALF_UP);
      
jTextFieldActBal.setText(balWitCos.setScale(2, RoundingMode.HALF_UP)+"");
        }
        else{//for savings
        jComboBoxDepTrans.setEnabled(true); 
        jButtonPayment.setEnabled(false);
        jButtonPayOff.setEnabled(false);
         jButtonActivate.setEnabled(false);
         jButtonreject.setEnabled(false);
         jButtonHistory.setEnabled(true);
         isloan=false;
          jTextFieldActBal.setText("");
           if(evt.getKeyCode()==KeyEvent.VK_ENTER){
                      //jMenuItemWithdrawal.setEnabled(false);  
                        
        jPopupTrans.show(jTableAccount,jTableAccount.getX()+350, jTableAccount.getY());
            try {
                Thread.sleep(5);
                 this.jMenuItemDeposit.doClick();
            } catch (InterruptedException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
                           
         
       
       
        
   
    
    }
        }
     
     } //end of topmost if
             
        
    }//GEN-LAST:event_jTableAccountKeyPressed

    private void jPopupTransFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPopupTransFocusGained
       // TODO add your handling code here:
    }//GEN-LAST:event_jPopupTransFocusGained

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
if(jTextFieldClientID.getText().isEmpty()){
  JOptionPane.showMessageDialog(jPanelAccount, "Client ID not yet entered");
}
else if(jTextFieldName.getText().isEmpty()){
  JOptionPane.showMessageDialog(jPanelAccount, "Client Name not available. \n"
          + " Please call the customer details first then try again");
}
else{
      AdvDisb ad= new AdvDisb();
ad.jTextFieldname.setText(jTextFieldName.getText());
ad.ClientID=jTextFieldClientID.getText();
ad.Brancode=BranchCode;
ad.ses_date=ses_date;
ad.companyname=companyname;
ad.compshortname=compshortname;
ad.GroupID=jTextFieldGroup.getText();
ad.setVisible(true);
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButtonClientSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClientSearchActionPerformed
        Clients nam= new Clients();
        nam.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButtonClientSearchActionPerformed

    private void jComboBoxNTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxNTActionPerformed
         String sql;  jComboBoxlastnames.removeAllItems();
  if(jComboBoxNT.getSelectedItem().toString().equalsIgnoreCase("L")){
    sql="select lastname,middlename,firstname,custno from clients"+
" where lastname like'"+jTextFieldlastname.getText()+"%'";
  
  }
  else  if(jComboBoxNT.getSelectedItem().toString().equalsIgnoreCase("F")){
     sql="select lastname,middlename,firstname,custno from clients"+
" where  firstname like'"+jTextFieldlastname.getText()+"%'";
 
  }
   else  if(jComboBoxNT.getSelectedItem().toString().equalsIgnoreCase("M")){
     sql="select lastname,middlename,firstname,custno from clients"+
" where middlename like'"+jTextFieldlastname.getText()+"%'";
 
  }
   else{
    sql="select lastname,middlename,firstname,custno from clients"+
" where lastname like'"+jTextFieldlastname.getText()+"%' or firstname like'"+jTextFieldlastname.getText()+"%' or middlename like'"+jTextFieldlastname.getText()+"%'";
   
   }
    try
    {
     Connection conn=glob.getConnect();
    // JOptionPane.showMessageDialog(this,sql);
    Statement stmt= conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
    ResultSet rs= stmt.executeQuery(sql);
  
    while( rs.next()){
    jComboBoxlastnames.addItem(rs.getString("lastname")+" "+rs.getString("middlename")+" "+rs.getString("firstname")+"-"+rs.getString("custno"));
    }
    jComboBoxlastnames.showPopup();
    
    }
    catch(Exception e){JOptionPane.showMessageDialog(this,e.getMessage());}
    }//GEN-LAST:event_jComboBoxNTActionPerformed

    private void jButtonDuapostingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDuapostingActionPerformed
 int count=1;
Connection conn =glob.getConnect();
String loanNum = jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(),0).toString();
//double Amount=0,Amont=Double.parseDouble(jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(),2).toString().replaceAll(",", ""));
String SQL="select * from loanschedule where remark='P'  and loanID='"+loanNum+"'";
try{
Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
            ResultSet current = stmt.executeQuery(SQL);
            current.next();
            repaycount=current.getInt("count");
            prinRepay=current.getDouble("prinrepay");
             interest=current.getDouble("intrepay");
        String cltname=jTextFieldName.getText();
    if(cltname.length()>30){
     cltname=cltname.substring(0,30);
  }       
    String PayBal=jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(),2).toString().replaceAll(",", "");
 
 String descriptn=jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(),1).toString();
 String ID=jTableAccount.getModel().getValueAt(jTableAccount.getSelectedRow(),0).toString();

        DualPayment dt= new DualPayment();
       dt.ses_date=ses_date;
       dt.tellerControlGl=tellerControlGl;
       dt.companyname=companyname;
       dt.compshortname=compshortname;
       dt.jTextFieldPayID.setToolTipText(jTextFieldClientID.getText());
      dt.jTextFieldDescription.setText(descriptn);
   dt.jTextFieldDescription.setToolTipText(jTextFieldName.getText());
  dt.jTextFieldBalance.setText(PayBal);
  BigDecimal bal=new BigDecimal(Double.parseDouble(PayBal) * Double.parseDouble(intperc[jTableAccount.getSelectedRow()]));
  dt.jTextFieldBalance2.setText(bal.setScale(2, RoundingMode.UP)+"");
  dt.jTextFieldAmount.setText(current.getBigDecimal("repaywithint").doubleValue()+"");
   AmtRepay=current.getDouble("repaywithint");
  
  dt.jTextFieldAmount.requestFocusInWindow();
  dt.jTextFieldPayID.setText(ID);

  dt.jTextFieldReference.setText(descriptn+" PAYMENT BY"+cltname);
  dt.jTextFieldPayID.setToolTipText(jTextFieldClientID.getText());
  dt.prinRepay=prinRepay;
  dt.ses_date=ses_date;
  dt.interest=interest;
  dt.jTextFieldprin.setText(prinRepay+"");
  dt.jTextFieldint.setText(interest+"");
  dt.Amount=current.getDouble("repaywithint");
  dt.repaycount=repaycount;
  dt.AccName=jTextFieldName.getText();
  dt.hands=1;
  dt.repaycount=repaycount;
  dt.BranchCode=BranchCode;
  dt.userid=userid;
  dt.tellerControlGl=tellerControlGl;
 
  dt.BranchCode=BranchCode;
  dt.userid=userid;
  dt.setVisible(true);
    current.close();
  conn.close();
}
catch(Exception e){
    JOptionPane.showMessageDialog(this, e.getMessage());
}
PaymentFlag=true;  
       
    }//GEN-LAST:event_jButtonDuapostingActionPerformed

    private void jMenuItemDualPostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDualPostActionPerformed
jButtonDuaposting.doClick();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItemDualPostActionPerformed

   /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientReg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientReg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientReg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientReg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Account().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JMenuItem Schedule;
    public javax.swing.JMenuItem Transfer;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButtonActivate;
    private javax.swing.JButton jButtonClear;
    private javax.swing.JButton jButtonClientSearch;
    private javax.swing.JButton jButtonClosedAccount;
    private javax.swing.JButton jButtonDisburse;
    private javax.swing.JButton jButtonDuaposting;
    private javax.swing.JButton jButtonHistory;
    private javax.swing.JButton jButtonPayOff;
    private javax.swing.JButton jButtonPayment;
    private javax.swing.JButton jButtonPrint;
    private javax.swing.JButton jButtonget;
    private javax.swing.JButton jButtonreject;
    private javax.swing.JButton jButtontrans;
    private javax.swing.JCheckBox jCheckBoxAll;
    private javax.swing.JComboBox jComboBoxDepTrans;
    private javax.swing.JComboBox<String> jComboBoxNT;
    private javax.swing.JComboBox<String> jComboBoxlastnames;
    private javax.swing.JComboBox jComboBoxsavings;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    public javax.swing.JLabel jLabelPix;
    private javax.swing.JLabel jLabelsavings;
    private javax.swing.JLabel jLabelsign;
    public javax.swing.JMenuItem jMenuGuarantor;
    public javax.swing.JMenuItem jMenuItemDeposit;
    private javax.swing.JMenuItem jMenuItemDualPost;
    public javax.swing.JMenuItem jMenuItemRepay;
    public javax.swing.JMenuItem jMenuItemWithdrawal;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelAccount;
    private javax.swing.JPopupMenu jPopupRepTrans;
    private javax.swing.JPopupMenu jPopupTrans;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable jTableAccount;
    private javax.swing.JTextField jTextFieldActBal;
    public javax.swing.JTextField jTextFieldAppDate;
    public javax.swing.JTextField jTextFieldClientID;
    public javax.swing.JTextField jTextFieldGroup;
    public javax.swing.JTextField jTextFieldName;
    public javax.swing.JTextField jTextFieldStage;
    public javax.swing.JTextField jTextFieldTbal;
    public javax.swing.JTextField jTextFieldTbal2;
    public javax.swing.JTextField jTextFieldType;
    private javax.swing.JTextField jTextFieldlastname;
    private javax.swing.JTextField jTextFieldlasttrandate;
    // End of variables declaration//GEN-END:variables
public boolean withdrFlag=false,PaymentFlag=false;
public int repaycount;
double  prinRepay,interest,AmtRepay;
double Fieldprintdisbamt;
boolean isloan=false;
boolean DepositFlag=false;
boolean depositStopped,Biweekly;
String userid,BranchCode;
String[] intperc= new String[20];
String Phone;
String Desc,TranType;
String tellerControlGl;
String ses_date,compshortname,companyname;
boolean  Showsignature=true;
boolean Reversal=true;
String userRole;
Global glob= new Global();
public String thseparate(BigDecimal amount){
 DecimalFormat formatter = (DecimalFormat) NumberFormat.getInstance(Locale.ENGLISH);
DecimalFormatSymbols symbols = formatter.getDecimalFormatSymbols();

symbols.setGroupingSeparator(',');
formatter.setDecimalFormatSymbols(symbols);
formatter.setMinimumFractionDigits(2);
return formatter.format((amount.setScale(2, RoundingMode.HALF_UP)));    

 }

}
